
Test_nRF24L01_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000328  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012ec  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be3  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069a  00000000  00000000  0000238f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f6  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000623  00000000  00000000  000032b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000038d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e2       	ldi	r30, 0x28	; 40
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	aa e0       	ldi	r26, 0x0A	; 10
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 30       	cpi	r26, 0x0A	; 10
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 80 01 	call	0x300	; 0x300 <main>
  e2:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <UART_Init>:
	//Pull CSN high to stop SPI communication
	CSN_HIGH();	
	
	//Reset the status register
	nRF24L01_Write_Reg(NRF24L01_REG_STATUS, _BV(NRF24L01_REG_RX_DR));
}
  ea:	51 9a       	sbi	0x0a, 1	; 10
  ec:	50 98       	cbi	0x0a, 0	; 10
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  f6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  fa:	e8 ec       	ldi	r30, 0xC8	; 200
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	80 83       	st	Z, r24
 104:	ea ec       	ldi	r30, 0xCA	; 202
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
 10e:	e9 ec       	ldi	r30, 0xC9	; 201
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <SPI_Init>:
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	86 60       	ori	r24, 0x06	; 6
 11e:	84 b9       	out	0x04, r24	; 4
 120:	23 98       	cbi	0x04, 3	; 4
 122:	8c b5       	in	r24, 0x2c	; 44
 124:	80 65       	ori	r24, 0x50	; 80
 126:	8c bd       	out	0x2c, r24	; 44
 128:	08 95       	ret

0000012a <nRF24L01_Init>:
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	80 63       	ori	r24, 0x30	; 48
 12e:	84 b9       	out	0x04, r24	; 4
 130:	2c 98       	cbi	0x05, 4	; 5
 132:	2d 9a       	sbi	0x05, 5	; 5
 134:	85 e3       	ldi	r24, 0x35	; 53
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <nRF24L01_Init+0xc>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <SPI_Write_Byte>:
 13e:	8e bd       	out	0x2e, r24	; 46
 140:	0d b4       	in	r0, 0x2d	; 45
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <SPI_Write_Byte+0x2>
 146:	8e b5       	in	r24, 0x2e	; 46
 148:	08 95       	ret

0000014a <nRF24L01_Write_Reg>:
 14a:	cf 93       	push	r28
 14c:	c6 2f       	mov	r28, r22
 14e:	2d 98       	cbi	0x05, 5	; 5
 150:	8f 71       	andi	r24, 0x1F	; 31
 152:	80 62       	ori	r24, 0x20	; 32
 154:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 15e:	2d 9a       	sbi	0x05, 5	; 5
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <nRF24L01_Write_Regs>:
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	7b 01       	movw	r14, r22
 170:	04 2f       	mov	r16, r20
 172:	2d 98       	cbi	0x05, 5	; 5
 174:	8f 71       	andi	r24, 0x1F	; 31
 176:	80 62       	ori	r24, 0x20	; 32
 178:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	10 16       	cp	r1, r16
 180:	11 06       	cpc	r1, r17
 182:	8c f4       	brge	.+34     	; 0x1a6 <nRF24L01_Write_Regs+0x42>
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	f7 01       	movw	r30, r14
 188:	ec 0f       	add	r30, r28
 18a:	f1 1d       	adc	r31, r1
 18c:	c7 fd       	sbrc	r28, 7
 18e:	fa 95       	dec	r31
 190:	80 81       	ld	r24, Z
 192:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 196:	cf 5f       	subi	r28, 0xFF	; 255
 198:	8c 2f       	mov	r24, r28
 19a:	0c 2e       	mov	r0, r28
 19c:	00 0c       	add	r0, r0
 19e:	99 0b       	sbc	r25, r25
 1a0:	80 17       	cp	r24, r16
 1a2:	91 07       	cpc	r25, r17
 1a4:	84 f3       	brlt	.-32     	; 0x186 <nRF24L01_Write_Regs+0x22>
 1a6:	2d 9a       	sbi	0x05, 5	; 5
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <nRF24L01_Read_Reg>:
 1b4:	2d 98       	cbi	0x05, 5	; 5
 1b6:	8f 71       	andi	r24, 0x1F	; 31
 1b8:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 1c2:	2d 9a       	sbi	0x05, 5	; 5
 1c4:	08 95       	ret

000001c6 <nRF24L01_DR_Setup>:
 1c6:	cf 93       	push	r28
 1c8:	c8 2f       	mov	r28, r24
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <nRF24L01_Read_Reg>
 1d0:	c1 30       	cpi	r28, 0x01	; 1
 1d2:	39 f0       	breq	.+14     	; 0x1e2 <nRF24L01_DR_Setup+0x1c>
 1d4:	18 f0       	brcs	.+6      	; 0x1dc <nRF24L01_DR_Setup+0x16>
 1d6:	c2 30       	cpi	r28, 0x02	; 2
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <nRF24L01_DR_Setup+0x20>
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <nRF24L01_DR_Setup+0x24>
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <nRF24L01_DR_Setup+0x24>
 1e2:	87 7d       	andi	r24, 0xD7	; 215
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <nRF24L01_DR_Setup+0x24>
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	68 2f       	mov	r22, r24
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <nRF24L01_OP_Power>:
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <nRF24L01_Read_Reg>
 200:	c1 30       	cpi	r28, 0x01	; 1
 202:	41 f0       	breq	.+16     	; 0x214 <nRF24L01_OP_Power+0x1e>
 204:	28 f0       	brcs	.+10     	; 0x210 <nRF24L01_OP_Power+0x1a>
 206:	c2 30       	cpi	r28, 0x02	; 2
 208:	41 f0       	breq	.+16     	; 0x21a <nRF24L01_OP_Power+0x24>
 20a:	c3 30       	cpi	r28, 0x03	; 3
 20c:	49 f0       	breq	.+18     	; 0x220 <nRF24L01_OP_Power+0x2a>
 20e:	09 c0       	rjmp	.+18     	; 0x222 <nRF24L01_OP_Power+0x2c>
 210:	89 7f       	andi	r24, 0xF9	; 249
 212:	07 c0       	rjmp	.+14     	; 0x222 <nRF24L01_OP_Power+0x2c>
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	82 60       	ori	r24, 0x02	; 2
 218:	04 c0       	rjmp	.+8      	; 0x222 <nRF24L01_OP_Power+0x2c>
 21a:	8d 7f       	andi	r24, 0xFD	; 253
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	01 c0       	rjmp	.+2      	; 0x222 <nRF24L01_OP_Power+0x2c>
 220:	86 60       	ori	r24, 0x06	; 6
 222:	68 2f       	mov	r22, r24
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <nRF24L01_Mode>:
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	51 f0       	breq	.+20     	; 0x246 <nRF24L01_Mode+0x18>
 232:	18 f0       	brcs	.+6      	; 0x23a <nRF24L01_Mode+0xc>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	81 f0       	breq	.+32     	; 0x258 <nRF24L01_Mode+0x2a>
 238:	08 95       	ret
 23a:	2c 98       	cbi	0x05, 4	; 5
 23c:	68 e0       	ldi	r22, 0x08	; 8
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 244:	08 95       	ret
 246:	60 e7       	ldi	r22, 0x70	; 112
 248:	87 e0       	ldi	r24, 0x07	; 7
 24a:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 24e:	6a e0       	ldi	r22, 0x0A	; 10
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 256:	08 95       	ret
 258:	2d 98       	cbi	0x05, 5	; 5
 25a:	82 ee       	ldi	r24, 0xE2	; 226
 25c:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 260:	2d 9a       	sbi	0x05, 5	; 5
 262:	60 e7       	ldi	r22, 0x70	; 112
 264:	87 e0       	ldi	r24, 0x07	; 7
 266:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 26a:	2c 98       	cbi	0x05, 4	; 5
 26c:	6b e0       	ldi	r22, 0x0B	; 11
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 274:	2c 9a       	sbi	0x05, 4	; 5
 276:	08 95       	ret

00000278 <UART_Tx>:
 278:	e8 ec       	ldi	r30, 0xC8	; 200
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	90 81       	ld	r25, Z
 27e:	95 ff       	sbrs	r25, 5
 280:	fd cf       	rjmp	.-6      	; 0x27c <UART_Tx+0x4>
 282:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 286:	08 95       	ret

00000288 <nRF24L01_Config>:
 288:	87 e0       	ldi	r24, 0x07	; 7
 28a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <nRF24L01_Read_Reg>
 28e:	0e 94 3c 01 	call	0x278	; 0x278 <UART_Tx>
 292:	69 e6       	ldi	r22, 0x69	; 105
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <nRF24L01_Read_Reg>
 2a0:	0e 94 3c 01 	call	0x278	; 0x278 <UART_Tx>
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <nRF24L01_DR_Setup>
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <nRF24L01_OP_Power>
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	81 e1       	ldi	r24, 0x11	; 17
 2b4:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	8c e1       	ldi	r24, 0x1C	; 28
 2bc:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 2c0:	63 e0       	ldi	r22, 0x03	; 3
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 2c8:	45 e0       	ldi	r20, 0x05	; 5
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	71 e0       	ldi	r23, 0x01	; 1
 2ce:	8a e0       	ldi	r24, 0x0A	; 10
 2d0:	0e 94 b2 00 	call	0x164	; 0x164 <nRF24L01_Write_Regs>
 2d4:	45 e0       	ldi	r20, 0x05	; 5
 2d6:	65 e0       	ldi	r22, 0x05	; 5
 2d8:	71 e0       	ldi	r23, 0x01	; 1
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	0e 94 b2 00 	call	0x164	; 0x164 <nRF24L01_Write_Regs>
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 2f0:	68 e0       	ldi	r22, 0x08	; 8
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 17 01 	call	0x22e	; 0x22e <nRF24L01_Mode>
 2fe:	08 95       	ret

00000300 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	89 e6       	ldi	r24, 0x69	; 105
 304:	98 e1       	ldi	r25, 0x18	; 24
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x6>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x10>
 310:	00 00       	nop
//Main function
int main(void)
{
	//Initialize the AVR and peripherals
	AVR_Init();
	SPI_Init();
 312:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_Init>
	UART_Init();
 316:	0e 94 75 00 	call	0xea	; 0xea <UART_Init>
	
//	UART_Tx(0xDD);
	
	//Initialize and configure the nRF module
	nRF24L01_Init();
 31a:	0e 94 95 00 	call	0x12a	; 0x12a <nRF24L01_Init>
	
//	UART_Tx(0xDD);
	
	nRF24L01_Config();
 31e:	0e 94 44 01 	call	0x288	; 0x288 <nRF24L01_Config>
 322:	ff cf       	rjmp	.-2      	; 0x322 <main+0x22>

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>

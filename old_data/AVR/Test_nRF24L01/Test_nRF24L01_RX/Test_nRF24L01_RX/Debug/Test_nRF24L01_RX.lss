
Test_nRF24L01_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080010a  0080010a  00000414  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c6  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be3  00000000  00000000  000017f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068e  00000000  00000000  000023d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000605  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e7       	ldi	r30, 0x76	; 118
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	aa e0       	ldi	r26, 0x0A	; 10
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 32       	cpi	r26, 0x2A	; 42
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
  e2:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <UART_Init>:
		data[rByte_cnt] = SPI_Write_Byte(NRF24L01_CMD_NOP);
	}
	
	//Pull CSN high to stop SPI communication
	CSN_HIGH();
}
  ea:	51 9a       	sbi	0x0a, 1	; 10
  ec:	50 98       	cbi	0x0a, 0	; 10
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  f6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  fa:	e8 ec       	ldi	r30, 0xC8	; 200
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	80 83       	st	Z, r24
 104:	ea ec       	ldi	r30, 0xCA	; 202
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
 10e:	e9 ec       	ldi	r30, 0xC9	; 201
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <SPI_Init>:
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	86 60       	ori	r24, 0x06	; 6
 11e:	84 b9       	out	0x04, r24	; 4
 120:	23 98       	cbi	0x04, 3	; 4
 122:	8c b5       	in	r24, 0x2c	; 44
 124:	80 65       	ori	r24, 0x50	; 80
 126:	8c bd       	out	0x2c, r24	; 44
 128:	08 95       	ret

0000012a <nRF24L01_Init>:
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	81 61       	ori	r24, 0x11	; 17
 12e:	84 b9       	out	0x04, r24	; 4
 130:	2c 98       	cbi	0x05, 4	; 5
 132:	28 9a       	sbi	0x05, 0	; 5
 134:	85 e3       	ldi	r24, 0x35	; 53
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <nRF24L01_Init+0xc>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <SPI_Write_Byte>:
 13e:	8e bd       	out	0x2e, r24	; 46
 140:	0d b4       	in	r0, 0x2d	; 45
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <SPI_Write_Byte+0x2>
 146:	8e b5       	in	r24, 0x2e	; 46
 148:	08 95       	ret

0000014a <nRF24L01_Write_Reg>:
 14a:	cf 93       	push	r28
 14c:	c6 2f       	mov	r28, r22
 14e:	28 98       	cbi	0x05, 0	; 5
 150:	8f 71       	andi	r24, 0x1F	; 31
 152:	80 62       	ori	r24, 0x20	; 32
 154:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 15e:	28 9a       	sbi	0x05, 0	; 5
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <nRF24L01_Write_Regs>:
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	7b 01       	movw	r14, r22
 170:	04 2f       	mov	r16, r20
 172:	28 98       	cbi	0x05, 0	; 5
 174:	8f 71       	andi	r24, 0x1F	; 31
 176:	80 62       	ori	r24, 0x20	; 32
 178:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	10 16       	cp	r1, r16
 180:	11 06       	cpc	r1, r17
 182:	8c f4       	brge	.+34     	; 0x1a6 <nRF24L01_Write_Regs+0x42>
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	f7 01       	movw	r30, r14
 188:	ec 0f       	add	r30, r28
 18a:	f1 1d       	adc	r31, r1
 18c:	c7 fd       	sbrc	r28, 7
 18e:	fa 95       	dec	r31
 190:	80 81       	ld	r24, Z
 192:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 196:	cf 5f       	subi	r28, 0xFF	; 255
 198:	8c 2f       	mov	r24, r28
 19a:	0c 2e       	mov	r0, r28
 19c:	00 0c       	add	r0, r0
 19e:	99 0b       	sbc	r25, r25
 1a0:	80 17       	cp	r24, r16
 1a2:	91 07       	cpc	r25, r17
 1a4:	84 f3       	brlt	.-32     	; 0x186 <nRF24L01_Write_Regs+0x22>
 1a6:	28 9a       	sbi	0x05, 0	; 5
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <nRF24L01_Read_Reg>:
 1b4:	28 98       	cbi	0x05, 0	; 5
 1b6:	8f 71       	andi	r24, 0x1F	; 31
 1b8:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 1c2:	28 9a       	sbi	0x05, 0	; 5
 1c4:	08 95       	ret

000001c6 <nRF24L01_DR_Setup>:
 1c6:	cf 93       	push	r28
 1c8:	c8 2f       	mov	r28, r24
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <nRF24L01_Read_Reg>
 1d0:	c1 30       	cpi	r28, 0x01	; 1
 1d2:	39 f0       	breq	.+14     	; 0x1e2 <nRF24L01_DR_Setup+0x1c>
 1d4:	18 f0       	brcs	.+6      	; 0x1dc <nRF24L01_DR_Setup+0x16>
 1d6:	c2 30       	cpi	r28, 0x02	; 2
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <nRF24L01_DR_Setup+0x20>
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <nRF24L01_DR_Setup+0x24>
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <nRF24L01_DR_Setup+0x24>
 1e2:	87 7d       	andi	r24, 0xD7	; 215
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <nRF24L01_DR_Setup+0x24>
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	68 2f       	mov	r22, r24
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <nRF24L01_OP_Power>:
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <nRF24L01_Read_Reg>
 200:	c1 30       	cpi	r28, 0x01	; 1
 202:	41 f0       	breq	.+16     	; 0x214 <nRF24L01_OP_Power+0x1e>
 204:	28 f0       	brcs	.+10     	; 0x210 <nRF24L01_OP_Power+0x1a>
 206:	c2 30       	cpi	r28, 0x02	; 2
 208:	41 f0       	breq	.+16     	; 0x21a <nRF24L01_OP_Power+0x24>
 20a:	c3 30       	cpi	r28, 0x03	; 3
 20c:	49 f0       	breq	.+18     	; 0x220 <nRF24L01_OP_Power+0x2a>
 20e:	09 c0       	rjmp	.+18     	; 0x222 <nRF24L01_OP_Power+0x2c>
 210:	89 7f       	andi	r24, 0xF9	; 249
 212:	07 c0       	rjmp	.+14     	; 0x222 <nRF24L01_OP_Power+0x2c>
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	82 60       	ori	r24, 0x02	; 2
 218:	04 c0       	rjmp	.+8      	; 0x222 <nRF24L01_OP_Power+0x2c>
 21a:	8d 7f       	andi	r24, 0xFD	; 253
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	01 c0       	rjmp	.+2      	; 0x222 <nRF24L01_OP_Power+0x2c>
 220:	86 60       	ori	r24, 0x06	; 6
 222:	68 2f       	mov	r22, r24
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <nRF24L01_RX_FIFO_Empty>:

//Checks the status of the received data in the FIFO
uint8_t nRF24L01_RX_FIFO_Empty()
{
	//Get the current value from the FIFO status register
	uint8_t nRF_FIFO_status = nRF24L01_Read_Reg(NRF24L01_REG_FIFO_STATUS);
 22e:	87 e1       	ldi	r24, 0x17	; 23
 230:	0e 94 da 00 	call	0x1b4	; 0x1b4 <nRF24L01_Read_Reg>
	
	return (nRF_FIFO_status & (_BV(NRF24L01_REG_RX_EMPTY)));
}
 234:	81 70       	andi	r24, 0x01	; 1
 236:	08 95       	ret

00000238 <nRF24L01_RX_DR_Flag>:

//Checks the status of the receiver data in the status and FIFO status registers
uint8_t nRF24L01_RX_DR_Flag()
{
	//Get the current value from the status register
	uint8_t nRF_status_value = nRF24L01_Read_Reg(NRF24L01_REG_STATUS);
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <nRF24L01_Read_Reg>
	
	if(nRF_status_value & (_BV(NRF24L01_REG_RX_DR)))
 23e:	86 fd       	sbrc	r24, 6
 240:	07 c0       	rjmp	.+14     	; 0x250 <nRF24L01_RX_DR_Flag+0x18>
	{
		return 1;
	}
	
	return !nRF24L01_RX_FIFO_Empty();;	 	
 242:	0e 94 17 01 	call	0x22e	; 0x22e <nRF24L01_RX_FIFO_Empty>
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	88 23       	and	r24, r24
 24a:	19 f0       	breq	.+6      	; 0x252 <nRF24L01_RX_DR_Flag+0x1a>
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	01 c0       	rjmp	.+2      	; 0x252 <nRF24L01_RX_DR_Flag+0x1a>
	//Get the current value from the status register
	uint8_t nRF_status_value = nRF24L01_Read_Reg(NRF24L01_REG_STATUS);
	
	if(nRF_status_value & (_BV(NRF24L01_REG_RX_DR)))
	{
		return 1;
 250:	91 e0       	ldi	r25, 0x01	; 1
	}
	
	return !nRF24L01_RX_FIFO_Empty();;	 	
}
 252:	89 2f       	mov	r24, r25
 254:	08 95       	ret

00000256 <nRF24L01_Mode>:
}

//Selects the operation mode of the nRF module
void nRF24L01_Mode(uint8_t nRF_mode)
{
	switch(nRF_mode)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	51 f0       	breq	.+20     	; 0x26e <nRF24L01_Mode+0x18>
 25a:	18 f0       	brcs	.+6      	; 0x262 <nRF24L01_Mode+0xc>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	81 f0       	breq	.+32     	; 0x280 <nRF24L01_Mode+0x2a>
 260:	08 95       	ret
	{
		//Power down mode
		case NRF24L01_POWER_DOWN:
			CE_LOW();
 262:	2c 98       	cbi	0x05, 4	; 5
			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG);
 264:	68 e0       	ldi	r22, 0x08	; 8
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
			break;
 26c:	08 95       	ret
		
		//TX mode
		case NRF24L01_TX_MODE:
			nRF24L01_Write_Reg(NRF24L01_REG_STATUS, (_BV(NRF24L01_REG_RX_DR))   | 
 26e:	60 e7       	ldi	r22, 0x70	; 112
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_TX_DS))   |
								(_BV(NRF24L01_REG_MAX_RT)));
								
			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG     |
 276:	6a e0       	ldi	r22, 0x0A	; 10
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_PWR_UP)   |
								_NBV(NRF24L01_REG_PRIM_RX)));
			break;
 27e:	08 95       	ret
		
		//RX mode
		case NRF24L01_RX_MODE:
			CSN_LOW();
 280:	28 98       	cbi	0x05, 0	; 5
			SPI_Write_Byte(NRF24L01_CMD_FLUSH_RX);
 282:	82 ee       	ldi	r24, 0xE2	; 226
 284:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
			CSN_HIGH();
 288:	28 9a       	sbi	0x05, 0	; 5

			nRF24L01_Write_Reg(NRF24L01_REG_STATUS, (_BV(NRF24L01_REG_RX_DR))   |
 28a:	60 e7       	ldi	r22, 0x70	; 112
 28c:	87 e0       	ldi	r24, 0x07	; 7
 28e:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_TX_DS))   |
								(_BV(NRF24L01_REG_MAX_RT)));

			CE_LOW();
 292:	2c 98       	cbi	0x05, 4	; 5
			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG     |
 294:	6b e0       	ldi	r22, 0x0B	; 11
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_PWR_UP)   |
								_BV(NRF24L01_REG_PRIM_RX)));
			CE_HIGH();
 29c:	2c 9a       	sbi	0x05, 4	; 5
 29e:	08 95       	ret

000002a0 <nRF24L01_Config>:
	/************************************************************************/
	/*                             RF Setup                                 */
	/************************************************************************/
	
	//Set the RF channel to 105 i.e. @2.505 GHz
	nRF24L01_Write_Reg(NRF24L01_REG_RF_CH, NRF24L01_CHANNEL);
 2a0:	69 e6       	ldi	r22, 0x69	; 105
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
	
	//Set the data rate to 2 MBPS
	nRF24L01_DR_Setup(NRF24L01_DR_2_MBPS);
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <nRF24L01_DR_Setup>
	
	//Set the output power to 0dBM
	nRF24L01_OP_Power(NRF24L01_OP_POWER_POS_0dBM);
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <nRF24L01_OP_Power>
	/************************************************************************/
	/*                          Payload config                              */
	/************************************************************************/
	
	//Enable data-pipe 0 with a payload length of 1 byte
	nRF24L01_Write_Reg(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD_LEN);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	81 e1       	ldi	r24, 0x11	; 17
 2b8:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
	
	//Disable dynamic payload
	nRF24L01_Write_Reg(NRF24L01_REG_DYNPD, 0x00);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	8c e1       	ldi	r24, 0x1C	; 28
 2c0:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
	/************************************************************************/
	/*                          Address config                              */
	/************************************************************************/
	
	//Address width set to 5 bytes
	nRF24L01_Write_Reg(NRF24L01_REG_SETUP_AW, NRF24L01_ADDRESS_WIDTH);
 2c4:	63 e0       	ldi	r22, 0x03	; 3
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
	
	//Set the 5-byte receiver address from RX_address array
	nRF24L01_Write_Regs(NRF24L01_REG_RX_ADDR_P0, RX_address, 5);
 2cc:	45 e0       	ldi	r20, 0x05	; 5
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	8a e0       	ldi	r24, 0x0A	; 10
 2d4:	0e 94 b2 00 	call	0x164	; 0x164 <nRF24L01_Write_Regs>
	
	//Set the 5-byte transmitter address from TX_address array
	nRF24L01_Write_Regs(NRF24L01_REG_TX_ADDR, TX_address, 5);
 2d8:	45 e0       	ldi	r20, 0x05	; 5
 2da:	65 e0       	ldi	r22, 0x05	; 5
 2dc:	71 e0       	ldi	r23, 0x01	; 1
 2de:	80 e1       	ldi	r24, 0x10	; 16
 2e0:	0e 94 b2 00 	call	0x164	; 0x164 <nRF24L01_Write_Regs>
	/************************************************************************/
	/*			   Data verification                            */
	/************************************************************************/
	
	//Enable auto-acknowledgment for the data-pipe in use(data-pipe 0)
	nRF24L01_Write_Reg(NRF24L01_REG_EN_AA, _BV(NRF24L01_REG_ENAA_P0));
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
	
	//Disable auto-retry
	nRF24L01_Write_Reg(NRF24L01_REG_SETUP_RETR, NRF24L01_RETRY_COUNT);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	84 e0       	ldi	r24, 0x04	; 4
 2f0:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
	
	//Enable CRC and set the length to 1 byte
	nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG);
 2f4:	68 e0       	ldi	r22, 0x08	; 8
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
	/************************************************************************/
	/*			   Transceiver mode                             */
	/************************************************************************/
	
	//Set the nRF in receiver mode
	nRF24L01_Mode(NRF24L01_RX_MODE);
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 2b 01 	call	0x256	; 0x256 <nRF24L01_Mode>
 302:	08 95       	ret

00000304 <UART_Tx>:
** - The data is received & displayed in a Hyperterminal
*************************************************************************************/
//Transmit data via UART
void UART_Tx(unsigned char data)
{
	loop_until_bit_is_set(UCSR1A, UDRE1);	//Wait until buffer is empty
 304:	e8 ec       	ldi	r30, 0xC8	; 200
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	90 81       	ld	r25, Z
 30a:	95 ff       	sbrs	r25, 5
 30c:	fd cf       	rjmp	.-6      	; 0x308 <UART_Tx+0x4>
	UDR1 = data;				//Send data
 30e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 312:	08 95       	ret

00000314 <nRF24L01_Payload_RX>:
	CSN_HIGH();
}

//Receives the incoming payload
void nRF24L01_Payload_RX(uint8_t *RX_pld_data)
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
	//Pull CSN low to start SPI communication
	CSN_LOW();
 31a:	28 98       	cbi	0x05, 0	; 5
	
	//Send command to read RX payload
	SPI_Write_Byte(NRF24L01_CMD_R_RX_PAYLOAD);
 31c:	81 e6       	ldi	r24, 0x61	; 97
 31e:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
	uint8_t RX_pld_cnt = 0;
	
	for(RX_pld_cnt = 0; RX_pld_cnt < NRF24L01_PAYLOAD_CNT; RX_pld_cnt++)
	{
		//Send NOP byte to read data from register
		RX_pld_data[RX_pld_cnt] = SPI_Write_Byte(NRF24L01_CMD_NOP);
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Write_Byte>
 328:	88 83       	st	Y, r24
		//Send the received payload data via UART
		UART_Tx(RX_pld_data[RX_pld_cnt]);
 32a:	0e 94 82 01 	call	0x304	; 0x304 <UART_Tx>
	}
	
	//Pull CSN high to stop SPI communication
	CSN_HIGH();	
 32e:	28 9a       	sbi	0x05, 0	; 5
	
	//Reset the status register
	nRF24L01_Write_Reg(NRF24L01_REG_STATUS, _BV(NRF24L01_REG_RX_DR));
 330:	60 e4       	ldi	r22, 0x40	; 64
 332:	87 e0       	ldi	r24, 0x07	; 7
 334:	0e 94 a5 00 	call	0x14a	; 0x14a <nRF24L01_Write_Reg>
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33e:	2f ef       	ldi	r18, 0xFF	; 255
 340:	89 e6       	ldi	r24, 0x69	; 105
 342:	98 e1       	ldi	r25, 0x18	; 24
 344:	21 50       	subi	r18, 0x01	; 1
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <main+0x6>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0x10>
 34e:	00 00       	nop
//Main function
int main(void)
{
	//Initialize the AVR and peripherals
	AVR_Init();
	SPI_Init();
 350:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_Init>
	UART_Init();
 354:	0e 94 75 00 	call	0xea	; 0xea <UART_Init>
	
	//Initialize and configure the nRF module
	nRF24L01_Init();
 358:	0e 94 95 00 	call	0x12a	; 0x12a <nRF24L01_Init>
	nRF24L01_Config();
 35c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <nRF24L01_Config>
	
	//Loop forever
	while(1) 
	{
		if(nRF24L01_RX_DR_Flag())
 360:	0e 94 1c 01 	call	0x238	; 0x238 <nRF24L01_RX_DR_Flag>
 364:	88 23       	and	r24, r24
 366:	e1 f3       	breq	.-8      	; 0x360 <main+0x22>
		{
			nRF24L01_Payload_RX(RX_payload);
 368:	8a e0       	ldi	r24, 0x0A	; 10
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_Payload_RX>
 370:	f7 cf       	rjmp	.-18     	; 0x360 <main+0x22>

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>

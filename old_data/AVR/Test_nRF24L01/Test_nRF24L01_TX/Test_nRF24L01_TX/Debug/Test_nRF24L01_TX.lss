
Test_nRF24L01_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000388  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080010a  0080010a  00000426  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c9  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c09  00000000  00000000  00001801  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068e  00000000  00000000  0000240a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ce  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e7  00000000  00000000  000032ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000038d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e8       	ldi	r30, 0x88	; 136
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	aa e0       	ldi	r26, 0x0A	; 10
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ab 32       	cpi	r26, 0x2B	; 43
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  e2:	0c 94 c2 01 	jmp	0x384	; 0x384 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <ADC_Init>:
		data[rByte_cnt] = SPI_Write_Byte(NRF24L01_CMD_NOP);
	}
	
	//Pull CSN high to stop SPI communication
	CSN_HIGH();
}
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
  f4:	ac e7       	ldi	r26, 0x7C	; 124
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	8c 91       	ld	r24, X
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	8c 93       	st	X, r24
  fe:	8c 91       	ld	r24, X
 100:	80 62       	ori	r24, 0x20	; 32
 102:	8c 93       	st	X, r24
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <SPI_Init>:
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	84 b9       	out	0x04, r24	; 4
 112:	23 98       	cbi	0x04, 3	; 4
 114:	8c b5       	in	r24, 0x2c	; 44
 116:	80 65       	ori	r24, 0x50	; 80
 118:	8c bd       	out	0x2c, r24	; 44
 11a:	08 95       	ret

0000011c <nRF24L01_Init>:
 11c:	84 b1       	in	r24, 0x04	; 4
 11e:	81 61       	ori	r24, 0x11	; 17
 120:	84 b9       	out	0x04, r24	; 4
 122:	2c 98       	cbi	0x05, 4	; 5
 124:	28 9a       	sbi	0x05, 0	; 5
 126:	85 e3       	ldi	r24, 0x35	; 53
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <nRF24L01_Init+0xc>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <SPI_Write_Byte>:
 130:	8e bd       	out	0x2e, r24	; 46
 132:	0d b4       	in	r0, 0x2d	; 45
 134:	07 fe       	sbrs	r0, 7
 136:	fd cf       	rjmp	.-6      	; 0x132 <SPI_Write_Byte+0x2>
 138:	8e b5       	in	r24, 0x2e	; 46
 13a:	08 95       	ret

0000013c <nRF24L01_Write_Reg>:
 13c:	cf 93       	push	r28
 13e:	c6 2f       	mov	r28, r22
 140:	28 98       	cbi	0x05, 0	; 5
 142:	8f 71       	andi	r24, 0x1F	; 31
 144:	80 62       	ori	r24, 0x20	; 32
 146:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
 14a:	8c 2f       	mov	r24, r28
 14c:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
 150:	28 9a       	sbi	0x05, 0	; 5
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <nRF24L01_Write_Regs>:
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	7b 01       	movw	r14, r22
 162:	04 2f       	mov	r16, r20
 164:	28 98       	cbi	0x05, 0	; 5
 166:	8f 71       	andi	r24, 0x1F	; 31
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	10 16       	cp	r1, r16
 172:	11 06       	cpc	r1, r17
 174:	8c f4       	brge	.+34     	; 0x198 <nRF24L01_Write_Regs+0x42>
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	f7 01       	movw	r30, r14
 17a:	ec 0f       	add	r30, r28
 17c:	f1 1d       	adc	r31, r1
 17e:	c7 fd       	sbrc	r28, 7
 180:	fa 95       	dec	r31
 182:	80 81       	ld	r24, Z
 184:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
 188:	cf 5f       	subi	r28, 0xFF	; 255
 18a:	8c 2f       	mov	r24, r28
 18c:	0c 2e       	mov	r0, r28
 18e:	00 0c       	add	r0, r0
 190:	99 0b       	sbc	r25, r25
 192:	80 17       	cp	r24, r16
 194:	91 07       	cpc	r25, r17
 196:	84 f3       	brlt	.-32     	; 0x178 <nRF24L01_Write_Regs+0x22>
 198:	28 9a       	sbi	0x05, 0	; 5
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	08 95       	ret

000001a6 <nRF24L01_Read_Reg>:
 1a6:	28 98       	cbi	0x05, 0	; 5
 1a8:	8f 71       	andi	r24, 0x1F	; 31
 1aa:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
 1b4:	28 9a       	sbi	0x05, 0	; 5
 1b6:	08 95       	ret

000001b8 <nRF24L01_DR_Setup>:
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <nRF24L01_Read_Reg>
 1c2:	c1 30       	cpi	r28, 0x01	; 1
 1c4:	39 f0       	breq	.+14     	; 0x1d4 <nRF24L01_DR_Setup+0x1c>
 1c6:	18 f0       	brcs	.+6      	; 0x1ce <nRF24L01_DR_Setup+0x16>
 1c8:	c2 30       	cpi	r28, 0x02	; 2
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <nRF24L01_DR_Setup+0x20>
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <nRF24L01_DR_Setup+0x24>
 1ce:	87 7f       	andi	r24, 0xF7	; 247
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <nRF24L01_DR_Setup+0x24>
 1d4:	87 7d       	andi	r24, 0xD7	; 215
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <nRF24L01_DR_Setup+0x24>
 1d8:	8f 7d       	andi	r24, 0xDF	; 223
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	68 2f       	mov	r22, r24
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <nRF24L01_OP_Power>:
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <nRF24L01_Read_Reg>
 1f2:	c1 30       	cpi	r28, 0x01	; 1
 1f4:	41 f0       	breq	.+16     	; 0x206 <nRF24L01_OP_Power+0x1e>
 1f6:	28 f0       	brcs	.+10     	; 0x202 <nRF24L01_OP_Power+0x1a>
 1f8:	c2 30       	cpi	r28, 0x02	; 2
 1fa:	41 f0       	breq	.+16     	; 0x20c <nRF24L01_OP_Power+0x24>
 1fc:	c3 30       	cpi	r28, 0x03	; 3
 1fe:	49 f0       	breq	.+18     	; 0x212 <nRF24L01_OP_Power+0x2a>
 200:	09 c0       	rjmp	.+18     	; 0x214 <nRF24L01_OP_Power+0x2c>
 202:	89 7f       	andi	r24, 0xF9	; 249
 204:	07 c0       	rjmp	.+14     	; 0x214 <nRF24L01_OP_Power+0x2c>
 206:	8b 7f       	andi	r24, 0xFB	; 251
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	04 c0       	rjmp	.+8      	; 0x214 <nRF24L01_OP_Power+0x2c>
 20c:	8d 7f       	andi	r24, 0xFD	; 253
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	01 c0       	rjmp	.+2      	; 0x214 <nRF24L01_OP_Power+0x2c>
 212:	86 60       	ori	r24, 0x06	; 6
 214:	68 2f       	mov	r22, r24
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <nRF24L01_TX_DS_Flag>:

//Checks the status of the transmitter data
uint8_t nRF24L01_TX_DS_Flag()
{
	//Get the current value from the status register
	uint8_t nRF_status_value = nRF24L01_Read_Reg(NRF24L01_REG_STATUS);
 220:	87 e0       	ldi	r24, 0x07	; 7
 222:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <nRF24L01_Read_Reg>
 226:	98 2f       	mov	r25, r24
 228:	90 73       	andi	r25, 0x30	; 48
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	09 f0       	breq	.+2      	; 0x230 <nRF24L01_TX_DS_Flag+0x10>
 22e:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;
	}
	
	return 1;	 	
}
 230:	08 95       	ret

00000232 <nRF24L01_Mode>:

//Selects the operation mode of the nRF module
void nRF24L01_Mode(uint8_t nRF_mode)
{
	switch(nRF_mode)
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	51 f0       	breq	.+20     	; 0x24a <nRF24L01_Mode+0x18>
 236:	18 f0       	brcs	.+6      	; 0x23e <nRF24L01_Mode+0xc>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	81 f0       	breq	.+32     	; 0x25c <nRF24L01_Mode+0x2a>
 23c:	08 95       	ret
	{
		//Power down mode
		case NRF24L01_POWER_DOWN:
			CE_LOW();
 23e:	2c 98       	cbi	0x05, 4	; 5
			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG);
 240:	68 e0       	ldi	r22, 0x08	; 8
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
			break;
 248:	08 95       	ret
		
		//TX mode
		case NRF24L01_TX_MODE:
			nRF24L01_Write_Reg(NRF24L01_REG_STATUS, (_BV(NRF24L01_REG_RX_DR))   | 
 24a:	60 e7       	ldi	r22, 0x70	; 112
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_TX_DS))   |
								(_BV(NRF24L01_REG_MAX_RT)));
								
			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG     |
 252:	6a e0       	ldi	r22, 0x0A	; 10
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_PWR_UP)   |
								_NBV(NRF24L01_REG_PRIM_RX)));
			break;
 25a:	08 95       	ret
		
		//RX mode
		case NRF24L01_RX_MODE:
			CSN_LOW();
 25c:	28 98       	cbi	0x05, 0	; 5
			SPI_Write_Byte(NRF24L01_CMD_FLUSH_RX);
 25e:	82 ee       	ldi	r24, 0xE2	; 226
 260:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
			CSN_HIGH();
 264:	28 9a       	sbi	0x05, 0	; 5

			nRF24L01_Write_Reg(NRF24L01_REG_STATUS, (_BV(NRF24L01_REG_RX_DR))   |
 266:	60 e7       	ldi	r22, 0x70	; 112
 268:	87 e0       	ldi	r24, 0x07	; 7
 26a:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_TX_DS))   |
								(_BV(NRF24L01_REG_MAX_RT)));

			CE_LOW();
 26e:	2c 98       	cbi	0x05, 4	; 5
			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG     |
 270:	6b e0       	ldi	r22, 0x0B	; 11
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_PWR_UP)   |
								_BV(NRF24L01_REG_PRIM_RX)));
			CE_HIGH();
 278:	2c 9a       	sbi	0x05, 4	; 5
 27a:	08 95       	ret

0000027c <nRF24L01_Config>:
	/************************************************************************/
	/*                             RF Setup                                 */
	/************************************************************************/
	
	//Set the RF channel to 105 i.e. @2.505 GHz
	nRF24L01_Write_Reg(NRF24L01_REG_RF_CH, NRF24L01_CHANNEL);
 27c:	69 e6       	ldi	r22, 0x69	; 105
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
	
	//Set the data rate to 2 MBPS
	nRF24L01_DR_Setup(NRF24L01_DR_2_MBPS);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <nRF24L01_DR_Setup>
	
	//Set the output power to 0dBM
	nRF24L01_OP_Power(NRF24L01_OP_POWER_POS_0dBM);
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <nRF24L01_OP_Power>
	/************************************************************************/
	/*                          Payload config                              */
	/************************************************************************/
	
	//Enable data-pipe 0 with a payload length of 1 byte
	nRF24L01_Write_Reg(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD_LEN);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	81 e1       	ldi	r24, 0x11	; 17
 294:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
	
	//Disable dynamic payload
	nRF24L01_Write_Reg(NRF24L01_REG_DYNPD, 0x00);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	8c e1       	ldi	r24, 0x1C	; 28
 29c:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
	/************************************************************************/
	/*                          Address config                              */
	/************************************************************************/
	
	//Address width set to 5 bytes
	nRF24L01_Write_Reg(NRF24L01_REG_SETUP_AW, NRF24L01_ADDRESS_WIDTH);
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
	
	//Set the 5-byte receiver address from RX_address array
	nRF24L01_Write_Regs(NRF24L01_REG_RX_ADDR_P0, RX_address, 5);
 2a8:	45 e0       	ldi	r20, 0x05	; 5
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	71 e0       	ldi	r23, 0x01	; 1
 2ae:	8a e0       	ldi	r24, 0x0A	; 10
 2b0:	0e 94 ab 00 	call	0x156	; 0x156 <nRF24L01_Write_Regs>
	
	//Set the 5-byte transmitter address from TX_address array
	nRF24L01_Write_Regs(NRF24L01_REG_TX_ADDR, TX_address, 5);
 2b4:	45 e0       	ldi	r20, 0x05	; 5
 2b6:	65 e0       	ldi	r22, 0x05	; 5
 2b8:	71 e0       	ldi	r23, 0x01	; 1
 2ba:	80 e1       	ldi	r24, 0x10	; 16
 2bc:	0e 94 ab 00 	call	0x156	; 0x156 <nRF24L01_Write_Regs>
	/************************************************************************/
	/*			   Data verification                            */
	/************************************************************************/
	
	//Enable auto-acknowledgment for the data-pipe in use(data-pipe 0)
	nRF24L01_Write_Reg(NRF24L01_REG_EN_AA, _BV(NRF24L01_REG_ENAA_P0));
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
	
	//Disable auto-retry
	nRF24L01_Write_Reg(NRF24L01_REG_SETUP_RETR, NRF24L01_RETRY_COUNT);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
	
	//Enable CRC and set the length to 1 byte
	nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG);
 2d0:	68 e0       	ldi	r22, 0x08	; 8
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 9e 00 	call	0x13c	; 0x13c <nRF24L01_Write_Reg>
	/************************************************************************/
	/*			   Transceiver mode                             */
	/************************************************************************/
	
	//Set the nRF in transmitter mode
	nRF24L01_Mode(NRF24L01_TX_MODE);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 19 01 	call	0x232	; 0x232 <nRF24L01_Mode>
 2de:	08 95       	ret

000002e0 <nRF24L01_Payload_TX>:
	CSN_HIGH();
}

//Send the TX payload
void nRF24L01_Payload_TX(uint8_t *TX_pld_data)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	//Go to standby
	CE_LOW();
 2e6:	2c 98       	cbi	0x05, 4	; 5
	
	//Set the nRF module in transmitter mode
	nRF24L01_Mode(NRF24L01_TX_MODE);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 19 01 	call	0x232	; 0x232 <nRF24L01_Mode>
	
	//Pull CSN low to start SPI communication
	CSN_LOW();
 2ee:	28 98       	cbi	0x05, 0	; 5
	
	//Flush TX FIFO
	SPI_Write_Byte(NRF24L01_CMD_FLUSH_TX);
 2f0:	81 ee       	ldi	r24, 0xE1	; 225
 2f2:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
	
	//Pull CSN high to stop SPI communication
	CSN_HIGH();
 2f6:	28 9a       	sbi	0x05, 0	; 5

	//Pull CSN low to start SPI communication
	CSN_LOW();
 2f8:	28 98       	cbi	0x05, 0	; 5
			
	//Send command to read RX payload
	SPI_Write_Byte(NRF24L01_CMD_W_TX_PAYLOAD);
 2fa:	80 ea       	ldi	r24, 0xA0	; 160
 2fc:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
	uint8_t TX_pld_cnt = 0;
	
	for(TX_pld_cnt = 0; TX_pld_cnt < NRF24L01_PAYLOAD_CNT; TX_pld_cnt++)
	{
		//Send NOP byte to read data from register
		TX_pld_data[TX_pld_cnt] = SPI_Write_Byte(NRF24L01_CMD_NOP);
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	0e 94 98 00 	call	0x130	; 0x130 <SPI_Write_Byte>
 306:	88 83       	st	Y, r24
	}
	
	//Pull CSN high to stop SPI communication
	CSN_HIGH();	
 308:	28 9a       	sbi	0x05, 0	; 5
	
	//Start transmission
	CE_HIGH();
 30a:	2c 9a       	sbi	0x05, 4	; 5
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <ADC_Pot>:
*************************************************************************************/
unsigned char ADC_Pot(void)
{
	//Reset ADC Multiplexer
	//Select ADC_1
	ADMUX &= 0b111000001;
 312:	ec e7       	ldi	r30, 0x7C	; 124
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	81 7c       	andi	r24, 0xC1	; 193
 31a:	80 83       	st	Z, r24

	ADCSRA |= _BV(ADSC);			//Start ADC conversion
 31c:	ea e7       	ldi	r30, 0x7A	; 122
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	80 64       	ori	r24, 0x40	; 64
 324:	80 83       	st	Z, r24
	loop_until_bit_is_set(ADCSRA, ADIF);	//Wait until conversion is complete
 326:	80 81       	ld	r24, Z
 328:	84 ff       	sbrs	r24, 4
 32a:	fd cf       	rjmp	.-6      	; 0x326 <ADC_Pot+0x14>
	ADCSRA |= _BV(ADIF);			//Set ADC interrupt flag again
 32c:	ea e7       	ldi	r30, 0x7A	; 122
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	80 61       	ori	r24, 0x10	; 16
 334:	80 83       	st	Z, r24
	return(ADCH);				//Return the 8-bit converted value
 336:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 33a:	08 95       	ret

0000033c <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	89 e6       	ldi	r24, 0x69	; 105
 340:	98 e1       	ldi	r25, 0x18	; 24
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x6>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x10>
 34c:	00 00       	nop
//Main function
int main(void)
{
	//Initialize the AVR and peripherals
	AVR_Init();
	SPI_Init();
 34e:	0e 94 86 00 	call	0x10c	; 0x10c <SPI_Init>
	ADC_Init();
 352:	0e 94 75 00 	call	0xea	; 0xea <ADC_Init>
	
	//Initialize and configure the nRF module
	nRF24L01_Init();
 356:	0e 94 8e 00 	call	0x11c	; 0x11c <nRF24L01_Init>
	nRF24L01_Config();
 35a:	0e 94 3e 01 	call	0x27c	; 0x27c <nRF24L01_Config>
	
	//Loop forever
	while(1) 
	{
		//Fetch ADC data
		TX_payload[0] = ADC_Pot();
 35e:	cb e0       	ldi	r28, 0x0B	; 11
 360:	d1 e0       	ldi	r29, 0x01	; 1
 362:	0e 94 89 01 	call	0x312	; 0x312 <ADC_Pot>
 366:	88 83       	st	Y, r24
		
	        //Transmit the payload data
	        nRF24L01_Payload_TX(TX_payload);        
 368:	ce 01       	movw	r24, r28
 36a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <nRF24L01_Payload_TX>
        
	        //Wait for transmission to end
	        while(nRF24L01_TX_DS_Flag());
 36e:	0e 94 10 01 	call	0x220	; 0x220 <nRF24L01_TX_DS_Flag>
 372:	81 11       	cpse	r24, r1
 374:	fc cf       	rjmp	.-8      	; 0x36e <main+0x32>
 376:	8f e3       	ldi	r24, 0x3F	; 63
 378:	9c e9       	ldi	r25, 0x9C	; 156
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x3e>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x44>
 380:	00 00       	nop
 382:	ef cf       	rjmp	.-34     	; 0x362 <main+0x26>

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>

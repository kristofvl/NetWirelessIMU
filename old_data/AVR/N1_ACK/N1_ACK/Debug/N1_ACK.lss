
N1_ACK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000706  0000079a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000706  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800150  00800150  000007ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002037  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d15  00000000  00000000  00002983  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa9  00000000  00000000  00003698  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00004144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b5  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001267  00000000  00000000  00004b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005dac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 e0       	ldi	r30, 0x06	; 6
  c0:	f7 e0       	ldi	r31, 0x07	; 7
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 35       	cpi	r26, 0x50	; 80
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e5       	ldi	r26, 0x50	; 80
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 35       	cpi	r26, 0x59	; 89
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <main>
  e2:	0c 94 81 03 	jmp	0x702	; 0x702 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  fa:	0f be       	out	0x3f, r0	; 63
void AVR_Init(void)
{
	//Set the Clock Prescaler division factor to 1(F_CPU = 8MHz)
	clock_prescale_set (clock_div_1);

	DDRD |= _BV(1);			//Set TX as output
  fc:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));		//Set RX as input
  fe:	50 98       	cbi	0x0a, 0	; 10

	//Make LED pins as output
	DDRC |= _BV(6);			//Makes PORTC, bit 6 as Output
 100:	3e 9a       	sbi	0x07, 6	; 7
	DDRC |= _BV(7);			//Makes PORTC, bit 7 as Output
 102:	3f 9a       	sbi	0x07, 7	; 7
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	90 e0       	ldi	r25, 0x00	; 0

	//Start-up LED sequence loop
	for (int i = 5; i != 0; i--)
	{
		PORTC &= ~(_BV(6));	//Turns OFF LED in Port C pin 6
 108:	46 98       	cbi	0x08, 6	; 8
		PORTC |= _BV(7);	//Turns ON LED in Port C pin 7
 10a:	47 9a       	sbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	30 e7       	ldi	r19, 0x70	; 112
 110:	42 e0       	ldi	r20, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <AVR_Init+0x28>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <AVR_Init+0x32>
 11c:	00 00       	nop
		_delay_ms(100);		//0.1 second delay

		PORTC |= _BV(6);	//Turns ON LED in Port C pin 6
 11e:	46 9a       	sbi	0x08, 6	; 8
		PORTC &= ~(_BV(7));	//Turns OFF LED in Port C pin 7
 120:	47 98       	cbi	0x08, 7	; 8
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	30 e7       	ldi	r19, 0x70	; 112
 126:	42 e0       	ldi	r20, 0x02	; 2
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <AVR_Init+0x3e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <AVR_Init+0x48>
 132:	00 00       	nop
 134:	01 97       	sbiw	r24, 0x01	; 1
	//Make LED pins as output
	DDRC |= _BV(6);			//Makes PORTC, bit 6 as Output
	DDRC |= _BV(7);			//Makes PORTC, bit 7 as Output

	//Start-up LED sequence loop
	for (int i = 5; i != 0; i--)
 136:	41 f7       	brne	.-48     	; 0x108 <AVR_Init+0x1e>
		PORTC |= _BV(6);	//Turns ON LED in Port C pin 6
		PORTC &= ~(_BV(7));	//Turns OFF LED in Port C pin 7
		_delay_ms(100);		//0.1 second delay
	}

	PORTC &= ~(_BV(6));		//Turns OFF LED in Port C pin 6
 138:	46 98       	cbi	0x08, 6	; 8
	PORTC &= ~(_BV(7));		//Turns OFF LED in Port C pin 7
 13a:	47 98       	cbi	0x08, 7	; 8
 13c:	8f e7       	ldi	r24, 0x7F	; 127
 13e:	9f e4       	ldi	r25, 0x4F	; 79
 140:	22 e1       	ldi	r18, 0x12	; 18
 142:	81 50       	subi	r24, 0x01	; 1
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <AVR_Init+0x58>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <AVR_Init+0x62>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <UART_Init>:
*************************************************************************************/
void UART_Init(void)
{
	//Set the BAUD rate(Ref. ATmega32U4 Datasheet Pg.189, Table 18-1)
	//To hard-code the Baud rate, Ref. Tables 18-9 to 18-12 in Pages 210 - 213
	UBRR1 = ((F_CPU / (16UL * BAUD)) - 1);
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 158:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

	//Disables 2x speed
	UCSR1A &= ~(_BV(U2X1));
 15c:	e8 ec       	ldi	r30, 0xC8	; 200
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 83       	st	Z, r24

	//Enable 8-bit character size, one stop-bit, no parity & asynchronous mode
	UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
 166:	ea ec       	ldi	r30, 0xCA	; 202
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	86 60       	ori	r24, 0x06	; 6
 16e:	80 83       	st	Z, r24

	//Enable Transmitter & Receiver
	UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
 170:	e9 ec       	ldi	r30, 0xC9	; 201
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 61       	ori	r24, 0x18	; 24
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <UART_Tx>:
** - Transmits the TWI data via the USB Serial
** - The data is received & displayed in a Hyperterminal
*************************************************************************************/
void UART_Tx(unsigned char data)
{
	loop_until_bit_is_set(UCSR1A, UDRE1);		//Wait until buffer is empty
 17c:	e8 ec       	ldi	r30, 0xC8	; 200
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	95 ff       	sbrs	r25, 5
 184:	fd cf       	rjmp	.-6      	; 0x180 <UART_Tx+0x4>
	UDR1 = data;					//Send TWI data via UART
 186:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 18a:	08 95       	ret

0000018c <UART_Put_String>:
}

void UART_Put_String(char *s)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
	//Loop through entire string
	while(*s)
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	31 f0       	breq	.+12     	; 0x1a4 <UART_Put_String+0x18>
 198:	21 96       	adiw	r28, 0x01	; 1
	{
	    UART_Tx(*s);
 19a:	0e 94 be 00 	call	0x17c	; 0x17c <UART_Tx>
}

void UART_Put_String(char *s)
{
	//Loop through entire string
	while(*s)
 19e:	89 91       	ld	r24, Y+
 1a0:	81 11       	cpse	r24, r1
 1a2:	fb cf       	rjmp	.-10     	; 0x19a <UART_Put_String+0xe>
	{
	    UART_Tx(*s);
	    s++;
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <SPI_Init>:

void SPI_Init()
{
	//Set the output pin(s) for SPI
	DDRB |= _BV(CE);	//CE
 1aa:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(CSN);	//CSN
 1ac:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(MOSI);  	//MOSI
 1ae:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= _BV(SCLK);  	//SCLK
 1b0:	21 9a       	sbi	0x04, 1	; 4

	//Set the input pin(s) for SPI
	DDRB &= ~_BV(MISO); 	//MISO
 1b2:	23 98       	cbi	0x04, 3	; 4

//	SPCR |= ((1 << SPE) | (1 << MSTR) | (1 << SPR0));	//Enable SPI as master
//	SPCR &= (~_BV(SPI2X) & ~_BV(SPR1)); 		   	//Set clock rate but not too important

	//Enable SPI as master
	SPCR |= ((1 << SPE) | (1 << MSTR));
 1b4:	8c b5       	in	r24, 0x2c	; 44
 1b6:	80 65       	ori	r24, 0x50	; 80
 1b8:	8c bd       	out	0x2c, r24	; 44
	//F_CPU/2
//	SPCR &= (~_BV(SPR1) & ~_BV(SPR0));
//	SPSR |= (1 << SPI2X);

	//F_CPU/8
	SPCR |= (1 << SPR0);
 1ba:	8c b5       	in	r24, 0x2c	; 44
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR1);
 1c0:	8c b5       	in	r24, 0x2c	; 44
 1c2:	8d 7f       	andi	r24, 0xFD	; 253
 1c4:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
 1c6:	8d b5       	in	r24, 0x2d	; 45
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	8d bd       	out	0x2d, r24	; 45

	//F_CPU/64
//	SPCR |= ((1 << SPR1) | (1 << SPR0));
//	SPSR |= (1 << SPI2X);

	PORTB |= _BV(CSN);	//CSN high
 1cc:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~_BV(CE);	//CE low
 1ce:	2d 98       	cbi	0x05, 5	; 5
 1d0:	8f e1       	ldi	r24, 0x1F	; 31
 1d2:	9e e4       	ldi	r25, 0x4E	; 78
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <SPI_Init+0x2a>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <SPI_Init+0x30>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <SPI_Tranceiver>:
}

unsigned char SPI_Tranceiver(unsigned char data)
{
	//Load data into the buffer
	SPDR = data;
 1de:	8e bd       	out	0x2e, r24	; 46

	//Wait until transmission complete
	while(!(SPSR & (1 << SPIF)));
 1e0:	0d b4       	in	r0, 0x2d	; 45
 1e2:	07 fe       	sbrs	r0, 7
 1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <SPI_Tranceiver+0x2>

	//Return received data
	return(SPDR);
 1e6:	8e b5       	in	r24, 0x2e	; 46
}
 1e8:	08 95       	ret

000001ea <SPI_Read_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	9a e1       	ldi	r25, 0x1A	; 26
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <SPI_Read_Byte+0x2>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <SPI_Read_Byte+0x8>

unsigned char SPI_Read_Byte(unsigned char reg)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 1f2:	28 98       	cbi	0x05, 0	; 5
 1f4:	9a e1       	ldi	r25, 0x1A	; 26
 1f6:	9a 95       	dec	r25
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <SPI_Read_Byte+0xc>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <SPI_Read_Byte+0x12>
	_delay_us(10);
	SPI_Tranceiver(R_REGISTER + reg);
 1fc:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 200:	8a e1       	ldi	r24, 0x1A	; 26
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <SPI_Read_Byte+0x18>
 206:	00 c0       	rjmp	.+0      	; 0x208 <SPI_Read_Byte+0x1e>
	_delay_us(10);
	reg = SPI_Tranceiver(NOP);
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 20e:	9a e1       	ldi	r25, 0x1A	; 26
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <SPI_Read_Byte+0x26>
 214:	00 c0       	rjmp	.+0      	; 0x216 <SPI_Read_Byte+0x2c>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 216:	28 9a       	sbi	0x05, 0	; 5
	return reg;
}
 218:	08 95       	ret

0000021a <SPI_Write_Byte>:

void SPI_Write_Byte(unsigned char reg, unsigned char data)
{
 21a:	cf 93       	push	r28
 21c:	c6 2f       	mov	r28, r22
 21e:	9a e1       	ldi	r25, 0x1A	; 26
 220:	9a 95       	dec	r25
 222:	f1 f7       	brne	.-4      	; 0x220 <SPI_Write_Byte+0x6>
 224:	00 c0       	rjmp	.+0      	; 0x226 <SPI_Write_Byte+0xc>
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 226:	28 98       	cbi	0x05, 0	; 5
 228:	9a e1       	ldi	r25, 0x1A	; 26
 22a:	9a 95       	dec	r25
 22c:	f1 f7       	brne	.-4      	; 0x22a <SPI_Write_Byte+0x10>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <SPI_Write_Byte+0x16>
	_delay_us(10);
	SPI_Tranceiver(W_REGISTER + reg);
 230:	80 5e       	subi	r24, 0xE0	; 224
 232:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 236:	8a e1       	ldi	r24, 0x1A	; 26
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <SPI_Write_Byte+0x1e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <SPI_Write_Byte+0x24>
	_delay_us(10);
	SPI_Tranceiver(data);
 23e:	8c 2f       	mov	r24, r28
 240:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 244:	9a e1       	ldi	r25, 0x1A	; 26
 246:	9a 95       	dec	r25
 248:	f1 f7       	brne	.-4      	; 0x246 <SPI_Write_Byte+0x2c>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <SPI_Write_Byte+0x32>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 24c:	28 9a       	sbi	0x05, 0	; 5
}
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <nRF_Set_Addr_RX>:

	_delay_ms(10);		//10ms delay after power-up
}

void nRF_Set_Addr_RX(uint8_t *addrData, uint8_t addrLen)
{
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	06 2f       	mov	r16, r22
 25c:	8a e1       	ldi	r24, 0x1A	; 26
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <nRF_Set_Addr_RX+0xc>
 262:	00 c0       	rjmp	.+0      	; 0x264 <nRF_Set_Addr_RX+0x12>
	uint8_t i;

	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 264:	28 98       	cbi	0x05, 0	; 5
 266:	8a e1       	ldi	r24, 0x1A	; 26
 268:	8a 95       	dec	r24
 26a:	f1 f7       	brne	.-4      	; 0x268 <nRF_Set_Addr_RX+0x16>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <nRF_Set_Addr_RX+0x1c>
	_delay_us(10);
	//Setup p0 pipe address for receiving
	SPI_Tranceiver(W_REGISTER + RX_ADDR_P0);
 26e:	8a e2       	ldi	r24, 0x2A	; 42
 270:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>

	for(i = 0; i < addrLen; i++)
 274:	00 23       	and	r16, r16
 276:	81 f0       	breq	.+32     	; 0x298 <nRF_Set_Addr_RX+0x46>
 278:	cd e0       	ldi	r28, 0x0D	; 13
 27a:	d1 e0       	ldi	r29, 0x01	; 1
 27c:	01 50       	subi	r16, 0x01	; 1
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	02 5f       	subi	r16, 0xF2	; 242
 282:	1e 4f       	sbci	r17, 0xFE	; 254
 284:	8a e1       	ldi	r24, 0x1A	; 26
 286:	8a 95       	dec	r24
 288:	f1 f7       	brne	.-4      	; 0x286 <nRF_Set_Addr_RX+0x34>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <nRF_Set_Addr_RX+0x3a>
	{
		_delay_us(10);
		SPI_Tranceiver(N1_address[i]);
 28c:	89 91       	ld	r24, Y+
 28e:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
	PORTB &= ~_BV(CSN);	//CSN low
	_delay_us(10);
	//Setup p0 pipe address for receiving
	SPI_Tranceiver(W_REGISTER + RX_ADDR_P0);

	for(i = 0; i < addrLen; i++)
 292:	c0 17       	cp	r28, r16
 294:	d1 07       	cpc	r29, r17
 296:	b1 f7       	brne	.-20     	; 0x284 <nRF_Set_Addr_RX+0x32>
 298:	8a e1       	ldi	r24, 0x1A	; 26
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <nRF_Set_Addr_RX+0x48>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <nRF_Set_Addr_RX+0x4e>
	{
		_delay_us(10);
		SPI_Tranceiver(N1_address[i]);
	}
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2a0:	28 9a       	sbi	0x05, 0	; 5
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <nRF_Set_Addr_TX>:

void nRF_Set_Addr_TX(uint8_t *addrData, uint8_t addrLen)
{
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	06 2f       	mov	r16, r22
 2b6:	8a e1       	ldi	r24, 0x1A	; 26
 2b8:	8a 95       	dec	r24
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <nRF_Set_Addr_TX+0xc>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <nRF_Set_Addr_TX+0x12>
	uint8_t i;

	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 2be:	28 98       	cbi	0x05, 0	; 5
 2c0:	8a e1       	ldi	r24, 0x1A	; 26
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <nRF_Set_Addr_TX+0x16>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <nRF_Set_Addr_TX+0x1c>
	_delay_us(10);
	//Setup p0 pipe address for receiving
	SPI_Tranceiver(W_REGISTER + TX_ADDR);
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>

	for(i = 0; i < addrLen; i++)
 2ce:	00 23       	and	r16, r16
 2d0:	81 f0       	breq	.+32     	; 0x2f2 <nRF_Set_Addr_TX+0x46>
 2d2:	c8 e0       	ldi	r28, 0x08	; 8
 2d4:	d1 e0       	ldi	r29, 0x01	; 1
 2d6:	01 50       	subi	r16, 0x01	; 1
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	07 5f       	subi	r16, 0xF7	; 247
 2dc:	1e 4f       	sbci	r17, 0xFE	; 254
 2de:	8a e1       	ldi	r24, 0x1A	; 26
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <nRF_Set_Addr_TX+0x34>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <nRF_Set_Addr_TX+0x3a>
	{
		_delay_us(10);
		SPI_Tranceiver(BS_address[i]);
 2e6:	89 91       	ld	r24, Y+
 2e8:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
	PORTB &= ~_BV(CSN);	//CSN low
	_delay_us(10);
	//Setup p0 pipe address for receiving
	SPI_Tranceiver(W_REGISTER + TX_ADDR);

	for(i = 0; i < addrLen; i++)
 2ec:	c0 17       	cp	r28, r16
 2ee:	d1 07       	cpc	r29, r17
 2f0:	b1 f7       	brne	.-20     	; 0x2de <nRF_Set_Addr_TX+0x32>
 2f2:	8a e1       	ldi	r24, 0x1A	; 26
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <nRF_Set_Addr_TX+0x48>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <nRF_Set_Addr_TX+0x4e>
	{
		_delay_us(10);
		SPI_Tranceiver(BS_address[i]);
	}
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2fa:	28 9a       	sbi	0x05, 0	; 5
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <nRF_Flush_TX>:
 306:	8a e1       	ldi	r24, 0x1A	; 26
 308:	8a 95       	dec	r24
 30a:	f1 f7       	brne	.-4      	; 0x308 <nRF_Flush_TX+0x2>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <nRF_Flush_TX+0x8>
}

void nRF_Flush_TX(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 30e:	28 98       	cbi	0x05, 0	; 5
 310:	8a e1       	ldi	r24, 0x1A	; 26
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <nRF_Flush_TX+0xc>
 316:	00 c0       	rjmp	.+0      	; 0x318 <nRF_Flush_TX+0x12>
	_delay_us(10);
	SPI_Tranceiver(FLUSH_TX);
 318:	81 ee       	ldi	r24, 0xE1	; 225
 31a:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 31e:	8a e1       	ldi	r24, 0x1A	; 26
 320:	8a 95       	dec	r24
 322:	f1 f7       	brne	.-4      	; 0x320 <nRF_Flush_TX+0x1a>
 324:	00 c0       	rjmp	.+0      	; 0x326 <nRF_Flush_TX+0x20>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 326:	28 9a       	sbi	0x05, 0	; 5
 328:	8a e1       	ldi	r24, 0x1A	; 26
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <nRF_Flush_TX+0x24>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <nRF_Flush_TX+0x2a>
 330:	08 95       	ret

00000332 <nRF_TX_Mode>:
	PORTB |= _BV(CSN);	//CSN high
}

void nRF_TX_Mode(void)
{
	PORTB &= ~_BV(CE);						 //CE low - Standby-I
 332:	2d 98       	cbi	0x05, 5	; 5
	//Power-up and set as TX
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) & ~(1 << PRIM_RX));
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 33a:	68 2f       	mov	r22, r24
 33c:	6e 7f       	andi	r22, 0xFE	; 254
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << PWR_UP));
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 34a:	68 2f       	mov	r22, r24
 34c:	62 60       	ori	r22, 0x02	; 2
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	nRF_Flush_TX();							 //Flush TX FIFO
 354:	0e 94 83 01 	call	0x306	; 0x306 <nRF_Flush_TX>
	SPI_Write_Byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 358:	60 e7       	ldi	r22, 0x70	; 112
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	//Mask TX_DR and MAX_RT interrupts
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 366:	68 2f       	mov	r22, r24
 368:	60 63       	ori	r22, 0x30	; 48
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
 370:	8b e2       	ldi	r24, 0x2B	; 43
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <nRF_TX_Mode+0x42>
 378:	00 c0       	rjmp	.+0      	; 0x37a <nRF_TX_Mode+0x48>
 37a:	00 00       	nop
 37c:	08 95       	ret

0000037e <nRF_Flush_RX>:
 37e:	8a e1       	ldi	r24, 0x1A	; 26
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <nRF_Flush_RX+0x2>
 384:	00 c0       	rjmp	.+0      	; 0x386 <nRF_Flush_RX+0x8>
}

void nRF_Flush_RX(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 386:	28 98       	cbi	0x05, 0	; 5
 388:	8a e1       	ldi	r24, 0x1A	; 26
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <nRF_Flush_RX+0xc>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <nRF_Flush_RX+0x12>
	_delay_us(10);
	SPI_Tranceiver(FLUSH_RX);
 390:	82 ee       	ldi	r24, 0xE2	; 226
 392:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 396:	8a e1       	ldi	r24, 0x1A	; 26
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <nRF_Flush_RX+0x1a>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <nRF_Flush_RX+0x20>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 39e:	28 9a       	sbi	0x05, 0	; 5
 3a0:	8a e1       	ldi	r24, 0x1A	; 26
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <nRF_Flush_RX+0x24>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <nRF_Flush_RX+0x2a>
 3a8:	08 95       	ret

000003aa <nRF_RX_Mode>:
	_delay_us(150);
}

void nRF_RX_Mode(void)
{
	PORTB &= ~_BV(CE); 						 //CE low - Standby-I
 3aa:	2d 98       	cbi	0x05, 5	; 5
	//Power-up as set as RX
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << PWR_UP) | (1 << PRIM_RX));
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 3b2:	68 2f       	mov	r22, r24
 3b4:	63 60       	ori	r22, 0x03	; 3
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	nRF_Flush_RX();							 //Flush RX FIFO
 3bc:	0e 94 bf 01 	call	0x37e	; 0x37e <nRF_Flush_RX>
	SPI_Write_Byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 3c0:	60 e7       	ldi	r22, 0x70	; 112
 3c2:	87 e0       	ldi	r24, 0x07	; 7
 3c4:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	//Mask TX_DR and MAX_RT interrupts
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 3ce:	68 2f       	mov	r22, r24
 3d0:	60 63       	ori	r22, 0x30	; 48
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	PORTB |= _BV(CE);  						 //CE high
 3d8:	2d 9a       	sbi	0x05, 5	; 5
 3da:	8b e2       	ldi	r24, 0x2B	; 43
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <nRF_RX_Mode+0x34>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <nRF_RX_Mode+0x3a>
 3e4:	00 00       	nop
 3e6:	08 95       	ret

000003e8 <nRF_Init>:
}

void nRF_Init(void)
{
	//Enable auto-acknowledgment for data pipe 0
	SPI_Write_Byte(EN_AA, 0x01);
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>

	//Enable data pipe 0
	SPI_Write_Byte(EN_RXADDR, 0x01);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>

	//Set address width to 5 bytes
	SPI_Write_Byte(SETUP_AW, 0x03);
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>

	//Set channel frequency to 2.505GHz
	SPI_Write_Byte(RF_CH, 0x69);
 400:	69 e6       	ldi	r22, 0x69	; 105
 402:	85 e0       	ldi	r24, 0x05	; 5
 404:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>

	//Set data rate to 2Mbps and 0dB gain
//	SPI_Write_Byte(RF_SETUP, 0x0E);

	//Set data rate to 250kbps and 0dB gain
	SPI_Write_Byte(RF_SETUP, 0x26);
 408:	66 e2       	ldi	r22, 0x26	; 38
 40a:	86 e0       	ldi	r24, 0x06	; 6
 40c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>

	//Enable W_TX_PAYLOAD_NOACK command
//	SPI_Write_Byte(FEATURE, 0x01);

	//Set the 5-bytes receiver address as 0x11 0x12 0x13 0x14 0x15
	nRF_Set_Addr_RX(N1_address, NRF_ADDR_LEN);
 410:	65 e0       	ldi	r22, 0x05	; 5
 412:	8d e0       	ldi	r24, 0x0D	; 13
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 29 01 	call	0x252	; 0x252 <nRF_Set_Addr_RX>

	//Set the 5-bytes transmitter address as 0xAA 0xBB 0xCC 0xDD 0xEE
	nRF_Set_Addr_TX(BS_address, NRF_ADDR_LEN);
 41a:	65 e0       	ldi	r22, 0x05	; 5
 41c:	88 e0       	ldi	r24, 0x08	; 8
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 56 01 	call	0x2ac	; 0x2ac <nRF_Set_Addr_TX>

	//Set the payload width as 8-bytes
	SPI_Write_Byte(RX_PW_P0, 0x08);
 424:	68 e0       	ldi	r22, 0x08	; 8
 426:	81 e1       	ldi	r24, 0x11	; 17
 428:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>

	//Set the retransmission delay to 750us with 15 retries
	SPI_Write_Byte(SETUP_RETR, 0xFF);
 42c:	6f ef       	ldi	r22, 0xFF	; 255
 42e:	84 e0       	ldi	r24, 0x04	; 4
 430:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>

	//Boot the nRF as RX and mask the maximum retransmission interrupt(disable)
	//Enable CRC and set the length to 2-bytes
	nRF_RX_Mode();
 434:	0e 94 d5 01 	call	0x3aa	; 0x3aa <nRF_RX_Mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	8f e1       	ldi	r24, 0x1F	; 31
 43a:	9e e4       	ldi	r25, 0x4E	; 78
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
 444:	08 95       	ret

00000446 <nRF_send_Payload>:
	PORTB |= _BV(CSN);	//CSN high
	_delay_us(10);
}

void nRF_send_Payload(uint8_t *data, uint8_t len)
{
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
	uint8_t i;

	for(i = 0; i < len; i++)
 44e:	66 23       	and	r22, r22
 450:	69 f0       	breq	.+26     	; 0x46c <nRF_send_Payload+0x26>
 452:	c0 e0       	ldi	r28, 0x00	; 0
 454:	d1 e0       	ldi	r29, 0x01	; 1
 456:	61 50       	subi	r22, 0x01	; 1
 458:	06 2f       	mov	r16, r22
 45a:	10 e0       	ldi	r17, 0x00	; 0
 45c:	0f 5f       	subi	r16, 0xFF	; 255
 45e:	1e 4f       	sbci	r17, 0xFE	; 254
	{
		SPI_Tranceiver(N1_payload_TX[i]);
 460:	89 91       	ld	r24, Y+
 462:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>

void nRF_send_Payload(uint8_t *data, uint8_t len)
{
	uint8_t i;

	for(i = 0; i < len; i++)
 466:	c0 17       	cp	r28, r16
 468:	d1 07       	cpc	r29, r17
 46a:	d1 f7       	brne	.-12     	; 0x460 <nRF_send_Payload+0x1a>
	{
		SPI_Tranceiver(N1_payload_TX[i]);
	}
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <nRF_TX_Data>:

void nRF_TX_Data(unsigned char *tdata)
{
	nRF_Flush_TX();
 476:	0e 94 83 01 	call	0x306	; 0x306 <nRF_Flush_TX>
	PORTB &= ~_BV(CSN); //CSN low
 47a:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	8a e1       	ldi	r24, 0x1A	; 26
 47e:	8a 95       	dec	r24
 480:	f1 f7       	brne	.-4      	; 0x47e <nRF_TX_Data+0x8>
 482:	00 c0       	rjmp	.+0      	; 0x484 <nRF_TX_Data+0xe>
	_delay_us(10);
	//Transmit payload with ACK enabled
	SPI_Tranceiver(W_TX_PAYLOAD);
 484:	80 ea       	ldi	r24, 0xA0	; 160
 486:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 48a:	8a e1       	ldi	r24, 0x1A	; 26
 48c:	8a 95       	dec	r24
 48e:	f1 f7       	brne	.-4      	; 0x48c <nRF_TX_Data+0x16>
 490:	00 c0       	rjmp	.+0      	; 0x492 <nRF_TX_Data+0x1c>
	_delay_us(10);
	nRF_send_Payload(N1_payload_TX, PAYLOAD_LEN);
 492:	68 e0       	ldi	r22, 0x08	; 8
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 23 02 	call	0x446	; 0x446 <nRF_send_Payload>
 49c:	8a e1       	ldi	r24, 0x1A	; 26
 49e:	8a 95       	dec	r24
 4a0:	f1 f7       	brne	.-4      	; 0x49e <nRF_TX_Data+0x28>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <nRF_TX_Data+0x2e>
	_delay_us(10);
	PORTB |= _BV(CSN);  //CSN high
 4a4:	28 9a       	sbi	0x05, 0	; 5
 4a6:	8a e1       	ldi	r24, 0x1A	; 26
 4a8:	8a 95       	dec	r24
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <nRF_TX_Data+0x32>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <nRF_TX_Data+0x38>
	_delay_us(10);      //Need at least 10us before sending
	PORTB |= _BV(CE);   //CE high
 4ae:	2d 9a       	sbi	0x05, 5	; 5
 4b0:	8a e1       	ldi	r24, 0x1A	; 26
 4b2:	8a 95       	dec	r24
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <nRF_TX_Data+0x3c>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <nRF_TX_Data+0x42>
	_delay_us(10);      //Hold CE high for at least 10us and not longer than 4ms
	PORTB &= ~_BV(CE);  //CE low
 4b8:	2d 98       	cbi	0x05, 5	; 5
 4ba:	08 95       	ret

000004bc <nRF_get_Status>:
}

uint8_t nRF_get_Status()
{
	uint8_t rv;
	PORTB &= ~_BV(CSN); //CSN low
 4bc:	28 98       	cbi	0x05, 0	; 5
	rv = SPI_Tranceiver(NOP);
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
	PORTB |= _BV(CSN);  //CSN high
 4c4:	28 9a       	sbi	0x05, 0	; 5
	return rv;
}
 4c6:	08 95       	ret

000004c8 <nRF_is_Sending>:
uint8_t nRF_is_Sending()
{
	uint8_t status;

	/* read the current status */
	status = nRF_get_Status();
 4c8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <nRF_get_Status>
 4cc:	98 2f       	mov	r25, r24
 4ce:	90 73       	andi	r25, 0x30	; 48
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <nRF_is_Sending+0xe>
 4d4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0; /* false */
	}

	return 1; /* true */
}
 4d6:	08 95       	ret

000004d8 <nRF_send_Status>:

uint8_t nRF_send_Status()
{
	uint8_t rv;

	rv = nRF_get_Status();
 4d8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <nRF_get_Status>

	/* Transmission went OK */
	if((rv & ((1 << TX_DS))))
 4dc:	85 fd       	sbrc	r24, 5
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <nRF_send_Status+0x10>
		return TRANSMISSON_OK;
	}

	/* Maximum retransmission count is reached */
	/* Last message probably went missing ... */
	else if((rv & ((1 << MAX_RT))))
 4e0:	84 fd       	sbrc	r24, 4
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <nRF_send_Status+0x14>
	}

	/* Probably still sending ... */
	else
	{
		return 0xFF;
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	08 95       	ret
	rv = nRF_get_Status();

	/* Transmission went OK */
	if((rv & ((1 << TX_DS))))
	{
		return TRANSMISSON_OK;
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	08 95       	ret

	/* Maximum retransmission count is reached */
	/* Last message probably went missing ... */
	else if((rv & ((1 << MAX_RT))))
	{
		return MESSAGE_LOST;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
	/* Probably still sending ... */
	else
	{
		return 0xFF;
	}
}
 4ee:	08 95       	ret

000004f0 <nRF_RT_Count>:

/* Returns the number of retransmissions occurred for the last message */
uint8_t nRF_RT_Count(void)
{
	uint8_t rv;
	rv = SPI_Read_Byte(OBSERVE_TX);
 4f0:	88 e0       	ldi	r24, 0x08	; 8
 4f2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
	rv = rv & 0x0F;
	return rv;
}
 4f6:	8f 70       	andi	r24, 0x0F	; 15
 4f8:	08 95       	ret

000004fa <nRF_get_Payload>:
	SPI_Write_Byte(STATUS, (1 << RX_DR));
}

/* send and receive multiple bytes over SPI */
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
	uint8_t i;

	for(i=0; i<len; i++)
 50a:	44 23       	and	r20, r20
 50c:	01 f1       	breq	.+64     	; 0x54e <nRF_get_Payload+0x54>
 50e:	08 2f       	mov	r16, r24
 510:	19 2f       	mov	r17, r25
 512:	eb 01       	movw	r28, r22
 514:	41 50       	subi	r20, 0x01	; 1
 516:	e4 2e       	mov	r14, r20
 518:	f1 2c       	mov	r15, r1
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	e8 1a       	sub	r14, r24
 51e:	f8 0a       	sbc	r15, r24
 520:	e6 0e       	add	r14, r22
 522:	f7 1e       	adc	r15, r23
	{
		data_in[i] = SPI_Tranceiver(data_out[i]);
 524:	f8 01       	movw	r30, r16
 526:	81 91       	ld	r24, Z+
 528:	8f 01       	movw	r16, r30
 52a:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 52e:	6e 01       	movw	r12, r28
 530:	89 93       	st	Y+, r24
		UART_Tx(data_in[i]);
 532:	0e 94 be 00 	call	0x17c	; 0x17c <UART_Tx>
		if (data_in[i] == 0xAA)
 536:	f6 01       	movw	r30, r12
 538:	80 81       	ld	r24, Z
 53a:	8a 3a       	cpi	r24, 0xAA	; 170
 53c:	29 f4       	brne	.+10     	; 0x548 <nRF_get_Payload+0x4e>
		{
			RX_Payload_cnt++;
 53e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <RX_Payload_cnt>
 542:	8f 5f       	subi	r24, 0xFF	; 255
 544:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <RX_Payload_cnt>
/* send and receive multiple bytes over SPI */
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
	uint8_t i;

	for(i=0; i<len; i++)
 548:	ce 15       	cp	r28, r14
 54a:	df 05       	cpc	r29, r15
 54c:	59 f7       	brne	.-42     	; 0x524 <nRF_get_Payload+0x2a>
		if (data_in[i] == 0xAA)
		{
			RX_Payload_cnt++;
		}
	}
}
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	cf 90       	pop	r12
 55e:	08 95       	ret

00000560 <nRF_RX_Data>:
	return rv;
}

void nRF_RX_Data(void)
{
	PORTB &= ~_BV(CE); 			//Stop listening
 560:	2d 98       	cbi	0x05, 5	; 5
	// Pull down chip select
	PORTB &= ~_BV(CSN); //CSN low
 562:	28 98       	cbi	0x05, 0	; 5
 564:	8a e1       	ldi	r24, 0x1A	; 26
 566:	8a 95       	dec	r24
 568:	f1 f7       	brne	.-4      	; 0x566 <nRF_RX_Data+0x6>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <nRF_RX_Data+0xc>
	_delay_us(10);
	// Send command to read RX payload
	SPI_Tranceiver(R_RX_PAYLOAD);
 56c:	81 e6       	ldi	r24, 0x61	; 97
 56e:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 572:	8a e1       	ldi	r24, 0x1A	; 26
 574:	8a 95       	dec	r24
 576:	f1 f7       	brne	.-4      	; 0x574 <nRF_RX_Data+0x14>
 578:	00 c0       	rjmp	.+0      	; 0x57a <nRF_RX_Data+0x1a>
	_delay_us(10);
	// Read payload
	nRF_get_Payload(N1_payload_RX, N1_payload_RX, PAYLOAD_LEN);
 57a:	48 e0       	ldi	r20, 0x08	; 8
 57c:	60 e5       	ldi	r22, 0x50	; 80
 57e:	71 e0       	ldi	r23, 0x01	; 1
 580:	cb 01       	movw	r24, r22
 582:	0e 94 7d 02 	call	0x4fa	; 0x4fa <nRF_get_Payload>
 586:	8a e1       	ldi	r24, 0x1A	; 26
 588:	8a 95       	dec	r24
 58a:	f1 f7       	brne	.-4      	; 0x588 <nRF_RX_Data+0x28>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <nRF_RX_Data+0x2e>
	_delay_us(10);
	// Pull up chip select
	PORTB |= _BV(CSN);  //CSN high
 58e:	28 9a       	sbi	0x05, 0	; 5
 590:	8a e1       	ldi	r24, 0x1A	; 26
 592:	8a 95       	dec	r24
 594:	f1 f7       	brne	.-4      	; 0x592 <nRF_RX_Data+0x32>
 596:	00 c0       	rjmp	.+0      	; 0x598 <nRF_RX_Data+0x38>
	_delay_us(10);
	// Reset status register
	SPI_Write_Byte(STATUS, (1 << RX_DR));
 598:	60 e4       	ldi	r22, 0x40	; 64
 59a:	87 e0       	ldi	r24, 0x07	; 7
 59c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
 5a0:	08 95       	ret

000005a2 <nRF_RX_FIFO_Empty>:
/* Checks if receive FIFO is empty or not */
uint8_t nRF_RX_FIFO_Empty()
{
	uint8_t FIFO_Status;

	FIFO_Status = SPI_Read_Byte(FIFO_STATUS);
 5a2:	87 e1       	ldi	r24, 0x17	; 23
 5a4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>

	return (FIFO_Status & (1 << RX_EMPTY));
}
 5a8:	81 70       	andi	r24, 0x01	; 1
 5aa:	08 95       	ret

000005ac <nRF_data_Ready>:
/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nRF_data_Ready()
{
	// See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = nRF_get_Status();
 5ac:	0e 94 5e 02 	call	0x4bc	; 0x4bc <nRF_get_Status>

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if (status & (1 << RX_DR))
 5b0:	86 fd       	sbrc	r24, 6
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <nRF_data_Ready+0x16>
	{
		return 1;
	}

	return !nRF_RX_FIFO_Empty();;
 5b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <nRF_RX_FIFO_Empty>
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	88 23       	and	r24, r24
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <nRF_data_Ready+0x18>
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <nRF_data_Ready+0x18>

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if (status & (1 << RX_DR))
	{
		return 1;
 5c2:	91 e0       	ldi	r25, 0x01	; 1
	}

	return !nRF_RX_FIFO_Empty();;
}
 5c4:	89 2f       	mov	r24, r25
 5c6:	08 95       	ret

000005c8 <nRF_Reset>:
 5c8:	8a e1       	ldi	r24, 0x1A	; 26
 5ca:	8a 95       	dec	r24
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <nRF_Reset+0x2>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <nRF_Reset+0x8>

void nRF_Reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
	SPI_Write_Byte(STATUS, 0x70);
 5d0:	60 e7       	ldi	r22, 0x70	; 112
 5d2:	87 e0       	ldi	r24, 0x07	; 7
 5d4:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
 5d8:	8a e1       	ldi	r24, 0x1A	; 26
 5da:	8a 95       	dec	r24
 5dc:	f1 f7       	brne	.-4      	; 0x5da <nRF_Reset+0x12>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <nRF_Reset+0x18>
 5e0:	08 95       	ret

000005e2 <main>:
** Main function:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
 5ea:	60 97       	sbiw	r28, 0x10	; 16
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
	AVR_Init();
 5f6:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	UART_Init();
 5fa:	0e 94 a8 00 	call	0x150	; 0x150 <UART_Init>
	SPI_Init();
 5fe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <SPI_Init>
	nRF_Init();
 602:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <nRF_Init>

	//Initialize the received payload count
	RX_Payload_cnt = 0;
 606:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <RX_Payload_cnt>

	char String_Data[16];

	nRF_Flush_RX();
 60a:	0e 94 bf 01 	call	0x37e	; 0x37e <nRF_Flush_RX>
	nRF_Reset();
 60e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <nRF_Reset>
	PORTB |= _BV(CE);			//Start listening
 612:	2d 9a       	sbi	0x05, 5	; 5

	//Endless Loop
	while(1)
	{
		if(nRF_data_Ready())
 614:	0e 94 d6 02 	call	0x5ac	; 0x5ac <nRF_data_Ready>
 618:	88 23       	and	r24, r24
 61a:	e1 f3       	breq	.-8      	; 0x614 <main+0x32>
		{
			nRF_RX_Data();
 61c:	0e 94 b0 02 	call	0x560	; 0x560 <nRF_RX_Data>
			
			if (RX_Payload_cnt == PAYLOAD_LEN)
 620:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <RX_Payload_cnt>
 624:	88 30       	cpi	r24, 0x08	; 8
 626:	b1 f7       	brne	.-20     	; 0x614 <main+0x32>
			{
				RX_Payload_cnt = 0;
 628:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <RX_Payload_cnt>

				//Configure as Transmitter
				nRF_TX_Mode();
 62c:	0e 94 99 01 	call	0x332	; 0x332 <nRF_TX_Mode>

//				_delay_ms(1);

				nRF_TX_Data(N1_payload_TX);
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	0e 94 3b 02 	call	0x476	; 0x476 <nRF_TX_Data>
				while(nRF_is_Sending());
 638:	0e 94 64 02 	call	0x4c8	; 0x4c8 <nRF_is_Sending>
 63c:	81 11       	cpse	r24, r1
 63e:	fc cf       	rjmp	.-8      	; 0x638 <main+0x56>

				/* Make analysis on last transmission attempt */
				uint8_t TX_Status = nRF_send_Status();
 640:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <nRF_send_Status>

				if(TX_Status == TRANSMISSON_OK)
 644:	81 11       	cpse	r24, r1
 646:	05 c0       	rjmp	.+10     	; 0x652 <main+0x70>
				{
					UART_Put_String("Transmission went OK\n");
 648:	82 e1       	ldi	r24, 0x12	; 18
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
 650:	06 c0       	rjmp	.+12     	; 0x65e <main+0x7c>
				}

				else if(TX_Status == MESSAGE_LOST)
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	21 f4       	brne	.+8      	; 0x65e <main+0x7c>
				{
					UART_Put_String("Message is lost!\n");
 656:	88 e2       	ldi	r24, 0x28	; 40
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
				}

				/* Retransmission count indicates the transmission quality */
				TX_Status = nRF_RT_Count();
 65e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <nRF_RT_Count>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 662:	4a e0       	ldi	r20, 0x0A	; 10
 664:	be 01       	movw	r22, r28
 666:	6f 5f       	subi	r22, 0xFF	; 255
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 4c 03 	call	0x698	; 0x698 <__itoa_ncheck>
				itoa(TX_Status, String_Data, 10);			//Convert integer to string, radix=10

				UART_Put_String("Retransmission count:");
 670:	8a e3       	ldi	r24, 0x3A	; 58
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
				UART_Put_String(String_Data);
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
				UART_Put_String("\n");
 680:	88 e3       	ldi	r24, 0x38	; 56
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>

//				nRF_Reset();

				//Configure as Receiver
				nRF_RX_Mode();
 688:	0e 94 d5 01 	call	0x3aa	; 0x3aa <nRF_RX_Mode>
				nRF_Flush_RX();
 68c:	0e 94 bf 01 	call	0x37e	; 0x37e <nRF_Flush_RX>
				nRF_Reset();
 690:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <nRF_Reset>
				PORTB |= _BV(CE);	//Start listening again
 694:	2d 9a       	sbi	0x05, 5	; 5
 696:	be cf       	rjmp	.-132    	; 0x614 <main+0x32>

00000698 <__itoa_ncheck>:
 698:	bb 27       	eor	r27, r27
 69a:	4a 30       	cpi	r20, 0x0A	; 10
 69c:	31 f4       	brne	.+12     	; 0x6aa <__itoa_ncheck+0x12>
 69e:	99 23       	and	r25, r25
 6a0:	22 f4       	brpl	.+8      	; 0x6aa <__itoa_ncheck+0x12>
 6a2:	bd e2       	ldi	r27, 0x2D	; 45
 6a4:	90 95       	com	r25
 6a6:	81 95       	neg	r24
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__utoa_common>

000006ae <__utoa_ncheck>:
 6ae:	bb 27       	eor	r27, r27

000006b0 <__utoa_common>:
 6b0:	fb 01       	movw	r30, r22
 6b2:	55 27       	eor	r21, r21
 6b4:	aa 27       	eor	r26, r26
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	aa 1f       	adc	r26, r26
 6bc:	a4 17       	cp	r26, r20
 6be:	10 f0       	brcs	.+4      	; 0x6c4 <__utoa_common+0x14>
 6c0:	a4 1b       	sub	r26, r20
 6c2:	83 95       	inc	r24
 6c4:	50 51       	subi	r21, 0x10	; 16
 6c6:	b9 f7       	brne	.-18     	; 0x6b6 <__utoa_common+0x6>
 6c8:	a0 5d       	subi	r26, 0xD0	; 208
 6ca:	aa 33       	cpi	r26, 0x3A	; 58
 6cc:	08 f0       	brcs	.+2      	; 0x6d0 <__utoa_common+0x20>
 6ce:	a9 5d       	subi	r26, 0xD9	; 217
 6d0:	a1 93       	st	Z+, r26
 6d2:	00 97       	sbiw	r24, 0x00	; 0
 6d4:	79 f7       	brne	.-34     	; 0x6b4 <__utoa_common+0x4>
 6d6:	b1 11       	cpse	r27, r1
 6d8:	b1 93       	st	Z+, r27
 6da:	11 92       	st	Z+, r1
 6dc:	cb 01       	movw	r24, r22
 6de:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <strrev>

000006e2 <strrev>:
 6e2:	dc 01       	movw	r26, r24
 6e4:	fc 01       	movw	r30, r24
 6e6:	67 2f       	mov	r22, r23
 6e8:	71 91       	ld	r23, Z+
 6ea:	77 23       	and	r23, r23
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <strrev+0x4>
 6ee:	32 97       	sbiw	r30, 0x02	; 2
 6f0:	04 c0       	rjmp	.+8      	; 0x6fa <strrev+0x18>
 6f2:	7c 91       	ld	r23, X
 6f4:	6d 93       	st	X+, r22
 6f6:	70 83       	st	Z, r23
 6f8:	62 91       	ld	r22, -Z
 6fa:	ae 17       	cp	r26, r30
 6fc:	bf 07       	cpc	r27, r31
 6fe:	c8 f3       	brcs	.-14     	; 0x6f2 <strrev+0x10>
 700:	08 95       	ret

00000702 <_exit>:
 702:	f8 94       	cli

00000704 <__stop_program>:
 704:	ff cf       	rjmp	.-2      	; 0x704 <__stop_program>

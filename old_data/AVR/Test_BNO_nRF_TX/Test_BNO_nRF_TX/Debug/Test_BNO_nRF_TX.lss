
Test_BNO_nRF_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000008e6  0000097a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  0000098a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000225d  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d64  00000000  00000000  00002d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca5  00000000  00000000  00003a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000473c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000723  00000000  00000000  000048ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d11  00000000  00000000  0000500f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 ee       	ldi	r30, 0xE6	; 230
  c0:	f8 e0       	ldi	r31, 0x08	; 8
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 31       	cpi	r26, 0x10	; 16
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e1       	ldi	r26, 0x10	; 16
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 31       	cpi	r26, 0x11	; 17
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  e2:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ee       	ldi	r18, 0xEF	; 239
  ec:	89 e4       	ldi	r24, 0x49	; 73
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <AVR_Init+0x6>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <AVR_Init+0x10>
  fa:	00 00       	nop
  fc:	51 9a       	sbi	0x0a, 1	; 10
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	3e 9a       	sbi	0x07, 6	; 7
 102:	3f 9a       	sbi	0x07, 7	; 7
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	46 98       	cbi	0x08, 6	; 8
 10a:	47 9a       	sbi	0x08, 7	; 8
 10c:	e7 ea       	ldi	r30, 0xA7	; 167
 10e:	f1 e6       	ldi	r31, 0x61	; 97
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <AVR_Init+0x26>
 114:	00 c0       	rjmp	.+0      	; 0x116 <AVR_Init+0x2c>
 116:	00 00       	nop
 118:	46 9a       	sbi	0x08, 6	; 8
 11a:	47 98       	cbi	0x08, 7	; 8
 11c:	e7 ea       	ldi	r30, 0xA7	; 167
 11e:	f1 e6       	ldi	r31, 0x61	; 97
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <AVR_Init+0x36>
 124:	00 c0       	rjmp	.+0      	; 0x126 <AVR_Init+0x3c>
 126:	00 00       	nop
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	71 f7       	brne	.-36     	; 0x108 <AVR_Init+0x1e>
 12c:	46 98       	cbi	0x08, 6	; 8
 12e:	47 98       	cbi	0x08, 7	; 8
 130:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 134:	08 95       	ret

00000136 <Init_SPI>:
 136:	24 9a       	sbi	0x04, 4	; 4
 138:	20 9a       	sbi	0x04, 0	; 4
 13a:	22 9a       	sbi	0x04, 2	; 4
 13c:	21 9a       	sbi	0x04, 1	; 4
 13e:	23 98       	cbi	0x04, 3	; 4
 140:	8c b5       	in	r24, 0x2c	; 44
 142:	81 65       	ori	r24, 0x51	; 81
 144:	8c bd       	out	0x2c, r24	; 44
 146:	8c b5       	in	r24, 0x2c	; 44
 148:	8c 7f       	andi	r24, 0xFC	; 252
 14a:	8c bd       	out	0x2c, r24	; 44
 14c:	28 9a       	sbi	0x05, 0	; 5
 14e:	2c 98       	cbi	0x05, 4	; 5
 150:	08 95       	ret

00000152 <spi_tranceiver>:
 152:	8e bd       	out	0x2e, r24	; 46
 154:	0d b4       	in	r0, 0x2d	; 45
 156:	07 fe       	sbrs	r0, 7
 158:	fd cf       	rjmp	.-6      	; 0x154 <spi_tranceiver+0x2>
 15a:	8e b5       	in	r24, 0x2e	; 46
 15c:	08 95       	ret

0000015e <Write_byte>:
 15e:	cf 93       	push	r28
 160:	c6 2f       	mov	r28, r22
 162:	93 e0       	ldi	r25, 0x03	; 3
 164:	9a 95       	dec	r25
 166:	f1 f7       	brne	.-4      	; 0x164 <Write_byte+0x6>
 168:	00 00       	nop
 16a:	28 98       	cbi	0x05, 0	; 5
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	9a 95       	dec	r25
 170:	f1 f7       	brne	.-4      	; 0x16e <Write_byte+0x10>
 172:	00 00       	nop
 174:	80 5e       	subi	r24, 0xE0	; 224
 176:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <Write_byte+0x1e>
 180:	00 00       	nop
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 188:	93 e0       	ldi	r25, 0x03	; 3
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <Write_byte+0x2c>
 18e:	00 00       	nop
 190:	28 9a       	sbi	0x05, 0	; 5
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <Init_nrf>:
 196:	87 ea       	ldi	r24, 0xA7	; 167
 198:	91 e6       	ldi	r25, 0x61	; 97
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <Init_nrf+0x4>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <Init_nrf+0xa>
 1a0:	00 00       	nop
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 af 00 	call	0x15e	; 0x15e <Write_byte>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 af 00 	call	0x15e	; 0x15e <Write_byte>
 1b2:	63 e0       	ldi	r22, 0x03	; 3
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0e 94 af 00 	call	0x15e	; 0x15e <Write_byte>
 1ba:	69 e6       	ldi	r22, 0x69	; 105
 1bc:	85 e0       	ldi	r24, 0x05	; 5
 1be:	0e 94 af 00 	call	0x15e	; 0x15e <Write_byte>
 1c2:	6e e0       	ldi	r22, 0x0E	; 14
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 af 00 	call	0x15e	; 0x15e <Write_byte>
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	9a 95       	dec	r25
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <Init_nrf+0x36>
 1d0:	00 00       	nop
 1d2:	28 98       	cbi	0x05, 0	; 5
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Init_nrf+0x40>
 1da:	00 00       	nop
 1dc:	8a e2       	ldi	r24, 0x2A	; 42
 1de:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 1e2:	93 e0       	ldi	r25, 0x03	; 3
 1e4:	9a 95       	dec	r25
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <Init_nrf+0x4e>
 1e8:	00 00       	nop
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Init_nrf+0x5c>
 1f6:	00 00       	nop
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 1fe:	93 e0       	ldi	r25, 0x03	; 3
 200:	9a 95       	dec	r25
 202:	f1 f7       	brne	.-4      	; 0x200 <Init_nrf+0x6a>
 204:	00 00       	nop
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <Init_nrf+0x78>
 212:	00 00       	nop
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 21a:	93 e0       	ldi	r25, 0x03	; 3
 21c:	9a 95       	dec	r25
 21e:	f1 f7       	brne	.-4      	; 0x21c <Init_nrf+0x86>
 220:	00 00       	nop
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <Init_nrf+0x94>
 22e:	00 00       	nop
 230:	28 9a       	sbi	0x05, 0	; 5
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <Init_nrf+0x9e>
 238:	00 00       	nop
 23a:	28 98       	cbi	0x05, 0	; 5
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <Init_nrf+0xa8>
 242:	00 00       	nop
 244:	80 e3       	ldi	r24, 0x30	; 48
 246:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	9a 95       	dec	r25
 24e:	f1 f7       	brne	.-4      	; 0x24c <Init_nrf+0xb6>
 250:	00 00       	nop
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <Init_nrf+0xc4>
 25e:	00 00       	nop
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 266:	93 e0       	ldi	r25, 0x03	; 3
 268:	9a 95       	dec	r25
 26a:	f1 f7       	brne	.-4      	; 0x268 <Init_nrf+0xd2>
 26c:	00 00       	nop
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <Init_nrf+0xe0>
 27a:	00 00       	nop
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 282:	93 e0       	ldi	r25, 0x03	; 3
 284:	9a 95       	dec	r25
 286:	f1 f7       	brne	.-4      	; 0x284 <Init_nrf+0xee>
 288:	00 00       	nop
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <Init_nrf+0xfc>
 296:	00 00       	nop
 298:	28 9a       	sbi	0x05, 0	; 5
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	81 e1       	ldi	r24, 0x11	; 17
 29e:	0e 94 af 00 	call	0x15e	; 0x15e <Write_byte>
 2a2:	6f e2       	ldi	r22, 0x2F	; 47
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	0e 94 af 00 	call	0x15e	; 0x15e <Write_byte>
 2aa:	6e e1       	ldi	r22, 0x1E	; 30
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 af 00 	call	0x15e	; 0x15e <Write_byte>
 2b2:	87 ea       	ldi	r24, 0xA7	; 167
 2b4:	91 e6       	ldi	r25, 0x61	; 97
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Init_nrf+0x120>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <Init_nrf+0x126>
 2bc:	00 00       	nop
 2be:	08 95       	ret

000002c0 <Flush_tx>:
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <Flush_tx+0x2>
 2c6:	00 00       	nop
 2c8:	28 98       	cbi	0x05, 0	; 5
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <Flush_tx+0xc>
 2d0:	00 00       	nop
 2d2:	81 ee       	ldi	r24, 0xE1	; 225
 2d4:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	8a 95       	dec	r24
 2dc:	f1 f7       	brne	.-4      	; 0x2da <Flush_tx+0x1a>
 2de:	00 00       	nop
 2e0:	28 9a       	sbi	0x05, 0	; 5
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	8a 95       	dec	r24
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <Flush_tx+0x24>
 2e8:	00 00       	nop
 2ea:	08 95       	ret

000002ec <transmit_data>:
 2ec:	cf 93       	push	r28
 2ee:	c8 2f       	mov	r28, r24
 2f0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Flush_tx>
 2f4:	28 98       	cbi	0x05, 0	; 5
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	8a 95       	dec	r24
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <transmit_data+0xc>
 2fc:	00 00       	nop
 2fe:	80 ea       	ldi	r24, 0xA0	; 160
 300:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 304:	93 e0       	ldi	r25, 0x03	; 3
 306:	9a 95       	dec	r25
 308:	f1 f7       	brne	.-4      	; 0x306 <transmit_data+0x1a>
 30a:	00 00       	nop
 30c:	8c 2f       	mov	r24, r28
 30e:	0e 94 a9 00 	call	0x152	; 0x152 <spi_tranceiver>
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	8a 95       	dec	r24
 316:	f1 f7       	brne	.-4      	; 0x314 <transmit_data+0x28>
 318:	00 00       	nop
 31a:	28 9a       	sbi	0x05, 0	; 5
 31c:	95 e0       	ldi	r25, 0x05	; 5
 31e:	9a 95       	dec	r25
 320:	f1 f7       	brne	.-4      	; 0x31e <transmit_data+0x32>
 322:	2c 9a       	sbi	0x05, 4	; 5
 324:	86 e0       	ldi	r24, 0x06	; 6
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <transmit_data+0x3a>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <transmit_data+0x40>
 32c:	2c 98       	cbi	0x05, 4	; 5
 32e:	89 ef       	ldi	r24, 0xF9	; 249
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <transmit_data+0x46>
 336:	00 c0       	rjmp	.+0      	; 0x338 <transmit_data+0x4c>
 338:	00 00       	nop
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <nRF_Put_String>:
	Write_byte(STATUS, 0x70);
	_delay_us(10);
}

void nRF_Put_String(char *s)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	ec 01       	movw	r28, r24
	//Loop through entire string
	while(*s)
 344:	88 81       	ld	r24, Y
 346:	88 23       	and	r24, r24
 348:	31 f0       	breq	.+12     	; 0x356 <nRF_Put_String+0x18>
 34a:	21 96       	adiw	r28, 0x01	; 1
	{
		transmit_data(*s);
 34c:	0e 94 76 01 	call	0x2ec	; 0x2ec <transmit_data>
}

void nRF_Put_String(char *s)
{
	//Loop through entire string
	while(*s)
 350:	89 91       	ld	r24, Y+
 352:	81 11       	cpse	r24, r1
 354:	fb cf       	rjmp	.-10     	; 0x34c <nRF_Put_String+0xe>
	{
		transmit_data(*s);
		s++;
	}
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <main>:
** Main function:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	60 97       	sbiw	r28, 0x10	; 16
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
	AVR_Init();
 370:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	i2c_init();
 374:	0e 94 8d 02 	call	0x51a	; 0x51a <i2c_init>
	
	Init_SPI();
 378:	0e 94 9b 00 	call	0x136	; 0x136 <Init_SPI>
	Init_nrf();
 37c:	0e 94 cb 00 	call	0x196	; 0x196 <Init_nrf>

	char String_Data[16];

	float angle_scale = 1.0f/16.0f;

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 380:	80 e5       	ldi	r24, 0x50	; 80
 382:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_start_wait>
	i2c_write(BNO055_OPR_MODE_ADDR);
 386:	8d e3       	ldi	r24, 0x3D	; 61
 388:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_write>
	i2c_write(OPERATION_MODE_NDOF);		//Set operation mode to IMU
 38c:	8c e0       	ldi	r24, 0x0C	; 12
 38e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_write>
	i2c_stop();
 392:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 396:	83 ec       	ldi	r24, 0xC3	; 195
 398:	99 e0       	ldi	r25, 0x09	; 9
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x3e>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x44>
 3a0:	00 00       	nop
	//Endless Loop
	while(1)
	{


		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 3a2:	80 e5       	ldi	r24, 0x50	; 80
 3a4:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_start_wait>
		i2c_write(BNO055_EULER_H_LSB_ADDR);		//Access LSB of Heading Euler angle
 3a8:	8a e1       	ldi	r24, 0x1A	; 26
 3aa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 3ae:	81 e5       	ldi	r24, 0x51	; 81
 3b0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_rep_start>
		Euler_Raw_LSB = i2c_readNak();
 3b4:	0e 94 00 03 	call	0x600	; 0x600 <i2c_readNak>
 3b8:	18 2f       	mov	r17, r24
		i2c_stop();
 3ba:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_stop>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 3be:	80 e5       	ldi	r24, 0x50	; 80
 3c0:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_start_wait>
		i2c_write(BNO055_EULER_H_MSB_ADDR);		//Access LSB of Heading Euler angle
 3c4:	8b e1       	ldi	r24, 0x1B	; 27
 3c6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 3ca:	81 e5       	ldi	r24, 0x51	; 81
 3cc:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_rep_start>
		Euler_Raw_MSB = i2c_readNak();
 3d0:	0e 94 00 03 	call	0x600	; 0x600 <i2c_readNak>
 3d4:	08 2f       	mov	r16, r24
		i2c_stop();
 3d6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_stop>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3da:	61 2f       	mov	r22, r17
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	70 2b       	or	r23, r16
 3e0:	07 2e       	mov	r0, r23
 3e2:	00 0c       	add	r0, r0
 3e4:	88 0b       	sbc	r24, r24
 3e6:	99 0b       	sbc	r25, r25
 3e8:	0e 94 43 03 	call	0x686	; 0x686 <__floatsisf>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e8       	ldi	r20, 0x80	; 128
 3f2:	5d e3       	ldi	r21, 0x3D	; 61
 3f4:	0e 94 a7 03 	call	0x74e	; 0x74e <__mulsf3>
 3f8:	0e 94 0b 03 	call	0x616	; 0x616 <__fixsfsi>
 3fc:	dc 01       	movw	r26, r24
 3fe:	cb 01       	movw	r24, r22
 400:	4a e0       	ldi	r20, 0x0A	; 10
 402:	be 01       	movw	r22, r28
 404:	6f 5f       	subi	r22, 0xFF	; 255
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	0e 94 3c 04 	call	0x878	; 0x878 <__itoa_ncheck>

		float Euler_H = (float)(Euler_H_Raw) * angle_scale;

		itoa(Euler_H, String_Data, 10);			//Convert integer to string, radix=10

		nRF_Put_String("Y: ");
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF_Put_String>
		nRF_Put_String(String_Data);
 414:	ce 01       	movw	r24, r28
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF_Put_String>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 41c:	80 e5       	ldi	r24, 0x50	; 80
 41e:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_start_wait>
		i2c_write(BNO055_EULER_R_LSB_ADDR);		//Access LSB of Roll Euler angle
 422:	8c e1       	ldi	r24, 0x1C	; 28
 424:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 428:	81 e5       	ldi	r24, 0x51	; 81
 42a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_rep_start>
		Euler_Raw_LSB = i2c_readNak();
 42e:	0e 94 00 03 	call	0x600	; 0x600 <i2c_readNak>
 432:	18 2f       	mov	r17, r24
		i2c_stop();
 434:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_stop>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 438:	80 e5       	ldi	r24, 0x50	; 80
 43a:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_start_wait>
		i2c_write(BNO055_EULER_R_MSB_ADDR);		//Access MSB of Roll Euler angle
 43e:	8d e1       	ldi	r24, 0x1D	; 29
 440:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 444:	81 e5       	ldi	r24, 0x51	; 81
 446:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_rep_start>
		Euler_Raw_MSB = i2c_readNak();
 44a:	0e 94 00 03 	call	0x600	; 0x600 <i2c_readNak>
 44e:	08 2f       	mov	r16, r24
		i2c_stop();
 450:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_stop>
 454:	61 2f       	mov	r22, r17
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	70 2b       	or	r23, r16
 45a:	07 2e       	mov	r0, r23
 45c:	00 0c       	add	r0, r0
 45e:	88 0b       	sbc	r24, r24
 460:	99 0b       	sbc	r25, r25
 462:	0e 94 43 03 	call	0x686	; 0x686 <__floatsisf>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	40 e8       	ldi	r20, 0x80	; 128
 46c:	5d e3       	ldi	r21, 0x3D	; 61
 46e:	0e 94 a7 03 	call	0x74e	; 0x74e <__mulsf3>
 472:	0e 94 0b 03 	call	0x616	; 0x616 <__fixsfsi>
 476:	dc 01       	movw	r26, r24
 478:	cb 01       	movw	r24, r22
 47a:	4a e0       	ldi	r20, 0x0A	; 10
 47c:	be 01       	movw	r22, r28
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	0e 94 3c 04 	call	0x878	; 0x878 <__itoa_ncheck>

		float Euler_R = (float)(Euler_R_Raw) * angle_scale;

		itoa(Euler_R, String_Data, 10);  //convert integer to string, radix=10

		nRF_Put_String(" R: ");
 486:	84 e0       	ldi	r24, 0x04	; 4
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF_Put_String>
		nRF_Put_String(String_Data);
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF_Put_String>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 496:	80 e5       	ldi	r24, 0x50	; 80
 498:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_start_wait>
		i2c_write(BNO055_EULER_P_LSB_ADDR);		//Access LSB of Pitch Euler angle
 49c:	8e e1       	ldi	r24, 0x1E	; 30
 49e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 4a2:	81 e5       	ldi	r24, 0x51	; 81
 4a4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_rep_start>
		Euler_Raw_LSB = i2c_readNak();
 4a8:	0e 94 00 03 	call	0x600	; 0x600 <i2c_readNak>
 4ac:	18 2f       	mov	r17, r24
		i2c_stop();
 4ae:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_stop>

		i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 4b2:	80 e5       	ldi	r24, 0x50	; 80
 4b4:	0e 94 ba 02 	call	0x574	; 0x574 <i2c_start_wait>
		i2c_write(BNO055_EULER_P_MSB_ADDR);		//Access LSB of Pitch Euler angle
 4b8:	8f e1       	ldi	r24, 0x1F	; 31
 4ba:	0e 94 ee 02 	call	0x5dc	; 0x5dc <i2c_write>
		i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 4be:	81 e5       	ldi	r24, 0x51	; 81
 4c0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_rep_start>
		Euler_Raw_MSB = i2c_readNak();
 4c4:	0e 94 00 03 	call	0x600	; 0x600 <i2c_readNak>
 4c8:	08 2f       	mov	r16, r24
		i2c_stop();
 4ca:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_stop>
 4ce:	61 2f       	mov	r22, r17
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	70 2b       	or	r23, r16
 4d4:	07 2e       	mov	r0, r23
 4d6:	00 0c       	add	r0, r0
 4d8:	88 0b       	sbc	r24, r24
 4da:	99 0b       	sbc	r25, r25
 4dc:	0e 94 43 03 	call	0x686	; 0x686 <__floatsisf>
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	40 e8       	ldi	r20, 0x80	; 128
 4e6:	5d e3       	ldi	r21, 0x3D	; 61
 4e8:	0e 94 a7 03 	call	0x74e	; 0x74e <__mulsf3>
 4ec:	0e 94 0b 03 	call	0x616	; 0x616 <__fixsfsi>
 4f0:	dc 01       	movw	r26, r24
 4f2:	cb 01       	movw	r24, r22
 4f4:	4a e0       	ldi	r20, 0x0A	; 10
 4f6:	be 01       	movw	r22, r28
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	0e 94 3c 04 	call	0x878	; 0x878 <__itoa_ncheck>

		float Euler_P = (float)(Euler_P_Raw) * angle_scale;

		itoa(Euler_P, String_Data, 10);  //convert integer to string, radix=10

		nRF_Put_String(" P: ");
 500:	89 e0       	ldi	r24, 0x09	; 9
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF_Put_String>
		nRF_Put_String(String_Data);
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF_Put_String>
		nRF_Put_String("\n");
 510:	8e e0       	ldi	r24, 0x0E	; 14
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 9f 01 	call	0x33e	; 0x33e <nRF_Put_String>
 518:	44 cf       	rjmp	.-376    	; 0x3a2 <main+0x46>

0000051a <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 51a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 51e:	8c e0       	ldi	r24, 0x0C	; 12
 520:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 524:	08 95       	ret

00000526 <i2c_start>:
 526:	94 ea       	ldi	r25, 0xA4	; 164
 528:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 52c:	ec eb       	ldi	r30, 0xBC	; 188
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	90 81       	ld	r25, Z
 532:	99 23       	and	r25, r25
 534:	ec f7       	brge	.-6      	; 0x530 <i2c_start+0xa>
 536:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 53a:	98 7f       	andi	r25, 0xF8	; 248
 53c:	98 30       	cpi	r25, 0x08	; 8
 53e:	11 f0       	breq	.+4      	; 0x544 <i2c_start+0x1e>
 540:	90 31       	cpi	r25, 0x10	; 16
 542:	a1 f4       	brne	.+40     	; 0x56c <i2c_start+0x46>
 544:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 548:	84 e8       	ldi	r24, 0x84	; 132
 54a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 54e:	ec eb       	ldi	r30, 0xBC	; 188
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	88 23       	and	r24, r24
 556:	ec f7       	brge	.-6      	; 0x552 <i2c_start+0x2c>
 558:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 55c:	98 7f       	andi	r25, 0xF8	; 248
 55e:	98 31       	cpi	r25, 0x18	; 24
 560:	39 f0       	breq	.+14     	; 0x570 <i2c_start+0x4a>
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 34       	cpi	r25, 0x40	; 64
 566:	29 f4       	brne	.+10     	; 0x572 <i2c_start+0x4c>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	08 95       	ret
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	08 95       	ret

00000574 <i2c_start_wait>:
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	ec eb       	ldi	r30, 0xBC	; 188
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	24 ea       	ldi	r18, 0xA4	; 164
 57e:	a9 eb       	ldi	r26, 0xB9	; 185
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	cb eb       	ldi	r28, 0xBB	; 187
 584:	d0 e0       	ldi	r29, 0x00	; 0
 586:	34 e8       	ldi	r19, 0x84	; 132
 588:	44 e9       	ldi	r20, 0x94	; 148
 58a:	20 83       	st	Z, r18
 58c:	90 81       	ld	r25, Z
 58e:	99 23       	and	r25, r25
 590:	ec f7       	brge	.-6      	; 0x58c <i2c_start_wait+0x18>
 592:	9c 91       	ld	r25, X
 594:	98 7f       	andi	r25, 0xF8	; 248
 596:	98 30       	cpi	r25, 0x08	; 8
 598:	11 f0       	breq	.+4      	; 0x59e <i2c_start_wait+0x2a>
 59a:	90 31       	cpi	r25, 0x10	; 16
 59c:	b1 f7       	brne	.-20     	; 0x58a <i2c_start_wait+0x16>
 59e:	88 83       	st	Y, r24
 5a0:	30 83       	st	Z, r19
 5a2:	90 81       	ld	r25, Z
 5a4:	99 23       	and	r25, r25
 5a6:	ec f7       	brge	.-6      	; 0x5a2 <i2c_start_wait+0x2e>
 5a8:	9c 91       	ld	r25, X
 5aa:	98 7f       	andi	r25, 0xF8	; 248
 5ac:	90 32       	cpi	r25, 0x20	; 32
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <i2c_start_wait+0x40>
 5b0:	98 35       	cpi	r25, 0x58	; 88
 5b2:	29 f4       	brne	.+10     	; 0x5be <i2c_start_wait+0x4a>
 5b4:	40 83       	st	Z, r20
 5b6:	90 81       	ld	r25, Z
 5b8:	94 fd       	sbrc	r25, 4
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <i2c_start_wait+0x42>
 5bc:	e6 cf       	rjmp	.-52     	; 0x58a <i2c_start_wait+0x16>
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <i2c_rep_start>:
 5c4:	0e 94 93 02 	call	0x526	; 0x526 <i2c_start>
 5c8:	08 95       	ret

000005ca <i2c_stop>:
 5ca:	84 e9       	ldi	r24, 0x94	; 148
 5cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5d0:	ec eb       	ldi	r30, 0xBC	; 188
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	84 fd       	sbrc	r24, 4
 5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <i2c_stop+0xa>
 5da:	08 95       	ret

000005dc <i2c_write>:
 5dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 5e0:	84 e8       	ldi	r24, 0x84	; 132
 5e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5e6:	ec eb       	ldi	r30, 0xBC	; 188
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	88 23       	and	r24, r24
 5ee:	ec f7       	brge	.-6      	; 0x5ea <i2c_write+0xe>
 5f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5f4:	98 7f       	andi	r25, 0xF8	; 248
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	98 32       	cpi	r25, 0x28	; 40
 5fa:	09 f4       	brne	.+2      	; 0x5fe <i2c_write+0x22>
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	08 95       	ret

00000600 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 600:	84 e8       	ldi	r24, 0x84	; 132
 602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 606:	ec eb       	ldi	r30, 0xBC	; 188
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	88 23       	and	r24, r24
 60e:	ec f7       	brge	.-6      	; 0x60a <i2c_readNak+0xa>
	
    return TWDR;
 610:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 614:	08 95       	ret

00000616 <__fixsfsi>:
 616:	0e 94 12 03 	call	0x624	; 0x624 <__fixunssfsi>
 61a:	68 94       	set
 61c:	b1 11       	cpse	r27, r1
 61e:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_szero>
 622:	08 95       	ret

00000624 <__fixunssfsi>:
 624:	0e 94 86 03 	call	0x70c	; 0x70c <__fp_splitA>
 628:	88 f0       	brcs	.+34     	; 0x64c <__fixunssfsi+0x28>
 62a:	9f 57       	subi	r25, 0x7F	; 127
 62c:	98 f0       	brcs	.+38     	; 0x654 <__fixunssfsi+0x30>
 62e:	b9 2f       	mov	r27, r25
 630:	99 27       	eor	r25, r25
 632:	b7 51       	subi	r27, 0x17	; 23
 634:	b0 f0       	brcs	.+44     	; 0x662 <__fixunssfsi+0x3e>
 636:	e1 f0       	breq	.+56     	; 0x670 <__fixunssfsi+0x4c>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	1a f0       	brmi	.+6      	; 0x648 <__fixunssfsi+0x24>
 642:	ba 95       	dec	r27
 644:	c9 f7       	brne	.-14     	; 0x638 <__fixunssfsi+0x14>
 646:	14 c0       	rjmp	.+40     	; 0x670 <__fixunssfsi+0x4c>
 648:	b1 30       	cpi	r27, 0x01	; 1
 64a:	91 f0       	breq	.+36     	; 0x670 <__fixunssfsi+0x4c>
 64c:	0e 94 a0 03 	call	0x740	; 0x740 <__fp_zero>
 650:	b1 e0       	ldi	r27, 0x01	; 1
 652:	08 95       	ret
 654:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_zero>
 658:	67 2f       	mov	r22, r23
 65a:	78 2f       	mov	r23, r24
 65c:	88 27       	eor	r24, r24
 65e:	b8 5f       	subi	r27, 0xF8	; 248
 660:	39 f0       	breq	.+14     	; 0x670 <__fixunssfsi+0x4c>
 662:	b9 3f       	cpi	r27, 0xF9	; 249
 664:	cc f3       	brlt	.-14     	; 0x658 <__fixunssfsi+0x34>
 666:	86 95       	lsr	r24
 668:	77 95       	ror	r23
 66a:	67 95       	ror	r22
 66c:	b3 95       	inc	r27
 66e:	d9 f7       	brne	.-10     	; 0x666 <__fixunssfsi+0x42>
 670:	3e f4       	brtc	.+14     	; 0x680 <__fixunssfsi+0x5c>
 672:	90 95       	com	r25
 674:	80 95       	com	r24
 676:	70 95       	com	r23
 678:	61 95       	neg	r22
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	8f 4f       	sbci	r24, 0xFF	; 255
 67e:	9f 4f       	sbci	r25, 0xFF	; 255
 680:	08 95       	ret

00000682 <__floatunsisf>:
 682:	e8 94       	clt
 684:	09 c0       	rjmp	.+18     	; 0x698 <__floatsisf+0x12>

00000686 <__floatsisf>:
 686:	97 fb       	bst	r25, 7
 688:	3e f4       	brtc	.+14     	; 0x698 <__floatsisf+0x12>
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	99 23       	and	r25, r25
 69a:	a9 f0       	breq	.+42     	; 0x6c6 <__floatsisf+0x40>
 69c:	f9 2f       	mov	r31, r25
 69e:	96 e9       	ldi	r25, 0x96	; 150
 6a0:	bb 27       	eor	r27, r27
 6a2:	93 95       	inc	r25
 6a4:	f6 95       	lsr	r31
 6a6:	87 95       	ror	r24
 6a8:	77 95       	ror	r23
 6aa:	67 95       	ror	r22
 6ac:	b7 95       	ror	r27
 6ae:	f1 11       	cpse	r31, r1
 6b0:	f8 cf       	rjmp	.-16     	; 0x6a2 <__floatsisf+0x1c>
 6b2:	fa f4       	brpl	.+62     	; 0x6f2 <__floatsisf+0x6c>
 6b4:	bb 0f       	add	r27, r27
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__floatsisf+0x36>
 6b8:	60 ff       	sbrs	r22, 0
 6ba:	1b c0       	rjmp	.+54     	; 0x6f2 <__floatsisf+0x6c>
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <__floatsisf+0x6c>
 6c6:	88 23       	and	r24, r24
 6c8:	11 f0       	breq	.+4      	; 0x6ce <__floatsisf+0x48>
 6ca:	96 e9       	ldi	r25, 0x96	; 150
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <__floatsisf+0x6a>
 6ce:	77 23       	and	r23, r23
 6d0:	21 f0       	breq	.+8      	; 0x6da <__floatsisf+0x54>
 6d2:	9e e8       	ldi	r25, 0x8E	; 142
 6d4:	87 2f       	mov	r24, r23
 6d6:	76 2f       	mov	r23, r22
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <__floatsisf+0x5e>
 6da:	66 23       	and	r22, r22
 6dc:	71 f0       	breq	.+28     	; 0x6fa <__floatsisf+0x74>
 6de:	96 e8       	ldi	r25, 0x86	; 134
 6e0:	86 2f       	mov	r24, r22
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	2a f0       	brmi	.+10     	; 0x6f2 <__floatsisf+0x6c>
 6e8:	9a 95       	dec	r25
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	da f7       	brpl	.-10     	; 0x6e8 <__floatsisf+0x62>
 6f2:	88 0f       	add	r24, r24
 6f4:	96 95       	lsr	r25
 6f6:	87 95       	ror	r24
 6f8:	97 f9       	bld	r25, 7
 6fa:	08 95       	ret

000006fc <__fp_split3>:
 6fc:	57 fd       	sbrc	r21, 7
 6fe:	90 58       	subi	r25, 0x80	; 128
 700:	44 0f       	add	r20, r20
 702:	55 1f       	adc	r21, r21
 704:	59 f0       	breq	.+22     	; 0x71c <__fp_splitA+0x10>
 706:	5f 3f       	cpi	r21, 0xFF	; 255
 708:	71 f0       	breq	.+28     	; 0x726 <__fp_splitA+0x1a>
 70a:	47 95       	ror	r20

0000070c <__fp_splitA>:
 70c:	88 0f       	add	r24, r24
 70e:	97 fb       	bst	r25, 7
 710:	99 1f       	adc	r25, r25
 712:	61 f0       	breq	.+24     	; 0x72c <__fp_splitA+0x20>
 714:	9f 3f       	cpi	r25, 0xFF	; 255
 716:	79 f0       	breq	.+30     	; 0x736 <__fp_splitA+0x2a>
 718:	87 95       	ror	r24
 71a:	08 95       	ret
 71c:	12 16       	cp	r1, r18
 71e:	13 06       	cpc	r1, r19
 720:	14 06       	cpc	r1, r20
 722:	55 1f       	adc	r21, r21
 724:	f2 cf       	rjmp	.-28     	; 0x70a <__fp_split3+0xe>
 726:	46 95       	lsr	r20
 728:	f1 df       	rcall	.-30     	; 0x70c <__fp_splitA>
 72a:	08 c0       	rjmp	.+16     	; 0x73c <__fp_splitA+0x30>
 72c:	16 16       	cp	r1, r22
 72e:	17 06       	cpc	r1, r23
 730:	18 06       	cpc	r1, r24
 732:	99 1f       	adc	r25, r25
 734:	f1 cf       	rjmp	.-30     	; 0x718 <__fp_splitA+0xc>
 736:	86 95       	lsr	r24
 738:	71 05       	cpc	r23, r1
 73a:	61 05       	cpc	r22, r1
 73c:	08 94       	sec
 73e:	08 95       	ret

00000740 <__fp_zero>:
 740:	e8 94       	clt

00000742 <__fp_szero>:
 742:	bb 27       	eor	r27, r27
 744:	66 27       	eor	r22, r22
 746:	77 27       	eor	r23, r23
 748:	cb 01       	movw	r24, r22
 74a:	97 f9       	bld	r25, 7
 74c:	08 95       	ret

0000074e <__mulsf3>:
 74e:	0e 94 ba 03 	call	0x774	; 0x774 <__mulsf3x>
 752:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_round>
 756:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_pscA>
 75a:	38 f0       	brcs	.+14     	; 0x76a <__mulsf3+0x1c>
 75c:	0e 94 24 04 	call	0x848	; 0x848 <__fp_pscB>
 760:	20 f0       	brcs	.+8      	; 0x76a <__mulsf3+0x1c>
 762:	95 23       	and	r25, r21
 764:	11 f0       	breq	.+4      	; 0x76a <__mulsf3+0x1c>
 766:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_inf>
 76a:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_nan>
 76e:	11 24       	eor	r1, r1
 770:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_szero>

00000774 <__mulsf3x>:
 774:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__fp_split3>
 778:	70 f3       	brcs	.-36     	; 0x756 <__mulsf3+0x8>

0000077a <__mulsf3_pse>:
 77a:	95 9f       	mul	r25, r21
 77c:	c1 f3       	breq	.-16     	; 0x76e <__mulsf3+0x20>
 77e:	95 0f       	add	r25, r21
 780:	50 e0       	ldi	r21, 0x00	; 0
 782:	55 1f       	adc	r21, r21
 784:	62 9f       	mul	r22, r18
 786:	f0 01       	movw	r30, r0
 788:	72 9f       	mul	r23, r18
 78a:	bb 27       	eor	r27, r27
 78c:	f0 0d       	add	r31, r0
 78e:	b1 1d       	adc	r27, r1
 790:	63 9f       	mul	r22, r19
 792:	aa 27       	eor	r26, r26
 794:	f0 0d       	add	r31, r0
 796:	b1 1d       	adc	r27, r1
 798:	aa 1f       	adc	r26, r26
 79a:	64 9f       	mul	r22, r20
 79c:	66 27       	eor	r22, r22
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	66 1f       	adc	r22, r22
 7a4:	82 9f       	mul	r24, r18
 7a6:	22 27       	eor	r18, r18
 7a8:	b0 0d       	add	r27, r0
 7aa:	a1 1d       	adc	r26, r1
 7ac:	62 1f       	adc	r22, r18
 7ae:	73 9f       	mul	r23, r19
 7b0:	b0 0d       	add	r27, r0
 7b2:	a1 1d       	adc	r26, r1
 7b4:	62 1f       	adc	r22, r18
 7b6:	83 9f       	mul	r24, r19
 7b8:	a0 0d       	add	r26, r0
 7ba:	61 1d       	adc	r22, r1
 7bc:	22 1f       	adc	r18, r18
 7be:	74 9f       	mul	r23, r20
 7c0:	33 27       	eor	r19, r19
 7c2:	a0 0d       	add	r26, r0
 7c4:	61 1d       	adc	r22, r1
 7c6:	23 1f       	adc	r18, r19
 7c8:	84 9f       	mul	r24, r20
 7ca:	60 0d       	add	r22, r0
 7cc:	21 1d       	adc	r18, r1
 7ce:	82 2f       	mov	r24, r18
 7d0:	76 2f       	mov	r23, r22
 7d2:	6a 2f       	mov	r22, r26
 7d4:	11 24       	eor	r1, r1
 7d6:	9f 57       	subi	r25, 0x7F	; 127
 7d8:	50 40       	sbci	r21, 0x00	; 0
 7da:	9a f0       	brmi	.+38     	; 0x802 <__mulsf3_pse+0x88>
 7dc:	f1 f0       	breq	.+60     	; 0x81a <__mulsf3_pse+0xa0>
 7de:	88 23       	and	r24, r24
 7e0:	4a f0       	brmi	.+18     	; 0x7f4 <__mulsf3_pse+0x7a>
 7e2:	ee 0f       	add	r30, r30
 7e4:	ff 1f       	adc	r31, r31
 7e6:	bb 1f       	adc	r27, r27
 7e8:	66 1f       	adc	r22, r22
 7ea:	77 1f       	adc	r23, r23
 7ec:	88 1f       	adc	r24, r24
 7ee:	91 50       	subi	r25, 0x01	; 1
 7f0:	50 40       	sbci	r21, 0x00	; 0
 7f2:	a9 f7       	brne	.-22     	; 0x7de <__mulsf3_pse+0x64>
 7f4:	9e 3f       	cpi	r25, 0xFE	; 254
 7f6:	51 05       	cpc	r21, r1
 7f8:	80 f0       	brcs	.+32     	; 0x81a <__mulsf3_pse+0xa0>
 7fa:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_inf>
 7fe:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_szero>
 802:	5f 3f       	cpi	r21, 0xFF	; 255
 804:	e4 f3       	brlt	.-8      	; 0x7fe <__mulsf3_pse+0x84>
 806:	98 3e       	cpi	r25, 0xE8	; 232
 808:	d4 f3       	brlt	.-12     	; 0x7fe <__mulsf3_pse+0x84>
 80a:	86 95       	lsr	r24
 80c:	77 95       	ror	r23
 80e:	67 95       	ror	r22
 810:	b7 95       	ror	r27
 812:	f7 95       	ror	r31
 814:	e7 95       	ror	r30
 816:	9f 5f       	subi	r25, 0xFF	; 255
 818:	c1 f7       	brne	.-16     	; 0x80a <__mulsf3_pse+0x90>
 81a:	fe 2b       	or	r31, r30
 81c:	88 0f       	add	r24, r24
 81e:	91 1d       	adc	r25, r1
 820:	96 95       	lsr	r25
 822:	87 95       	ror	r24
 824:	97 f9       	bld	r25, 7
 826:	08 95       	ret

00000828 <__fp_inf>:
 828:	97 f9       	bld	r25, 7
 82a:	9f 67       	ori	r25, 0x7F	; 127
 82c:	80 e8       	ldi	r24, 0x80	; 128
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	08 95       	ret

00000834 <__fp_nan>:
 834:	9f ef       	ldi	r25, 0xFF	; 255
 836:	80 ec       	ldi	r24, 0xC0	; 192
 838:	08 95       	ret

0000083a <__fp_pscA>:
 83a:	00 24       	eor	r0, r0
 83c:	0a 94       	dec	r0
 83e:	16 16       	cp	r1, r22
 840:	17 06       	cpc	r1, r23
 842:	18 06       	cpc	r1, r24
 844:	09 06       	cpc	r0, r25
 846:	08 95       	ret

00000848 <__fp_pscB>:
 848:	00 24       	eor	r0, r0
 84a:	0a 94       	dec	r0
 84c:	12 16       	cp	r1, r18
 84e:	13 06       	cpc	r1, r19
 850:	14 06       	cpc	r1, r20
 852:	05 06       	cpc	r0, r21
 854:	08 95       	ret

00000856 <__fp_round>:
 856:	09 2e       	mov	r0, r25
 858:	03 94       	inc	r0
 85a:	00 0c       	add	r0, r0
 85c:	11 f4       	brne	.+4      	; 0x862 <__fp_round+0xc>
 85e:	88 23       	and	r24, r24
 860:	52 f0       	brmi	.+20     	; 0x876 <__fp_round+0x20>
 862:	bb 0f       	add	r27, r27
 864:	40 f4       	brcc	.+16     	; 0x876 <__fp_round+0x20>
 866:	bf 2b       	or	r27, r31
 868:	11 f4       	brne	.+4      	; 0x86e <__fp_round+0x18>
 86a:	60 ff       	sbrs	r22, 0
 86c:	04 c0       	rjmp	.+8      	; 0x876 <__fp_round+0x20>
 86e:	6f 5f       	subi	r22, 0xFF	; 255
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	8f 4f       	sbci	r24, 0xFF	; 255
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	08 95       	ret

00000878 <__itoa_ncheck>:
 878:	bb 27       	eor	r27, r27
 87a:	4a 30       	cpi	r20, 0x0A	; 10
 87c:	31 f4       	brne	.+12     	; 0x88a <__itoa_ncheck+0x12>
 87e:	99 23       	and	r25, r25
 880:	22 f4       	brpl	.+8      	; 0x88a <__itoa_ncheck+0x12>
 882:	bd e2       	ldi	r27, 0x2D	; 45
 884:	90 95       	com	r25
 886:	81 95       	neg	r24
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	0c 94 48 04 	jmp	0x890	; 0x890 <__utoa_common>

0000088e <__utoa_ncheck>:
 88e:	bb 27       	eor	r27, r27

00000890 <__utoa_common>:
 890:	fb 01       	movw	r30, r22
 892:	55 27       	eor	r21, r21
 894:	aa 27       	eor	r26, r26
 896:	88 0f       	add	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	aa 1f       	adc	r26, r26
 89c:	a4 17       	cp	r26, r20
 89e:	10 f0       	brcs	.+4      	; 0x8a4 <__utoa_common+0x14>
 8a0:	a4 1b       	sub	r26, r20
 8a2:	83 95       	inc	r24
 8a4:	50 51       	subi	r21, 0x10	; 16
 8a6:	b9 f7       	brne	.-18     	; 0x896 <__utoa_common+0x6>
 8a8:	a0 5d       	subi	r26, 0xD0	; 208
 8aa:	aa 33       	cpi	r26, 0x3A	; 58
 8ac:	08 f0       	brcs	.+2      	; 0x8b0 <__utoa_common+0x20>
 8ae:	a9 5d       	subi	r26, 0xD9	; 217
 8b0:	a1 93       	st	Z+, r26
 8b2:	00 97       	sbiw	r24, 0x00	; 0
 8b4:	79 f7       	brne	.-34     	; 0x894 <__utoa_common+0x4>
 8b6:	b1 11       	cpse	r27, r1
 8b8:	b1 93       	st	Z+, r27
 8ba:	11 92       	st	Z+, r1
 8bc:	cb 01       	movw	r24, r22
 8be:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <strrev>

000008c2 <strrev>:
 8c2:	dc 01       	movw	r26, r24
 8c4:	fc 01       	movw	r30, r24
 8c6:	67 2f       	mov	r22, r23
 8c8:	71 91       	ld	r23, Z+
 8ca:	77 23       	and	r23, r23
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <strrev+0x4>
 8ce:	32 97       	sbiw	r30, 0x02	; 2
 8d0:	04 c0       	rjmp	.+8      	; 0x8da <strrev+0x18>
 8d2:	7c 91       	ld	r23, X
 8d4:	6d 93       	st	X+, r22
 8d6:	70 83       	st	Z, r23
 8d8:	62 91       	ld	r22, -Z
 8da:	ae 17       	cp	r26, r30
 8dc:	bf 07       	cpc	r27, r31
 8de:	c8 f3       	brcs	.-14     	; 0x8d2 <strrev+0x10>
 8e0:	08 95       	ret

000008e2 <_exit>:
 8e2:	f8 94       	cli

000008e4 <__stop_program>:
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <__stop_program>

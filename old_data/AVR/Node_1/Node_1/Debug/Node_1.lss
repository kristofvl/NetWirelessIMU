
Node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000822  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000896  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002397  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d21  00000000  00000000  00002dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d92  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00004874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d0  00000000  00000000  00004b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001294  00000000  00000000  000051f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_7>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a2 31       	cpi	r26, 0x12	; 18
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 43 03 	call	0x686	; 0x686 <main>
  cc:	0c 94 0f 04 	jmp	0x81e	; 0x81e <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <AVR_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	8e e9       	ldi	r24, 0x9E	; 158
  d8:	94 e2       	ldi	r25, 0x24	; 36
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <AVR_Init+0x6>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <AVR_Init+0x10>
  e4:	00 00       	nop
** - Initializes the I/O peripherals
*************************************************************************************/
void AVR_Init(void)
{
	_delay_ms(750);		//Short pause after BNO055 Power-On Reset(Mandatory)
	DDRD |= _BV(1);		//Set TX as output
  e6:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));	//Set RX as input
  e8:	50 98       	cbi	0x0a, 0	; 10

	//Initialize TWI data
	TWI_data = 0;
  ea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TWI_data>
  ee:	08 95       	ret

000000f0 <UART_Init>:
** - Set the USART mode(Synchronous/Asynchronous/Asynchronous 2x)
** - Enable Receiver & Transmitter(Set RXEN & TXEN bits in UCSRB register)
*************************************************************************************/
void UART_Init(void)
{
	DDRD |= _BV(1);		//Set TX as output
  f0:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));	//Set RX as input
  f2:	50 98       	cbi	0x0a, 0	; 10

	//Set the BAUD rate(Ref. ATmega32U4 Datasheet Pg.189, Table 18-1)
	//To hard-code the Baud rate, Ref. Tables 18-9 to 18-12 in Pgs. 210 - 213
	UBRR1 = ((F_CPU / (16UL * BAUD)) - 1);
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  fc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	//Disables 2x speed
	UCSR1A &= ~(_BV(U2X1));
 100:	e8 ec       	ldi	r30, 0xC8	; 200
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	80 83       	st	Z, r24
	
	//Enable 8-bit character size, one stop-bit, no parity & asynchronous mode
	UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
 10a:	ea ec       	ldi	r30, 0xCA	; 202
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	86 60       	ori	r24, 0x06	; 6
 112:	80 83       	st	Z, r24
	
	//Enable Transmitter & Receiver
	UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
 114:	e9 ec       	ldi	r30, 0xC9	; 201
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 61       	ori	r24, 0x18	; 24
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <UART_Tx>:
** - Transmits the ADC data via the USB Serial
** - The data is received & displayed in a Hyperterminal
*************************************************************************************/
void UART_Tx(unsigned char data)
{
	loop_until_bit_is_set(UCSR1A, UDRE1);	//Wait until buffer is empty
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <UART_Tx+0x4>
	UDR1 = data;				//Send data
 12a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 12e:	08 95       	ret

00000130 <BNO_Read_Quaternions>:
}

void BNO_Read_Quaternions(void)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 134:	80 e5       	ldi	r24, 0x50	; 80
 136:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_W_LSB_ADDR);	//Access LSB of Quaternion_W value
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 140:	81 e5       	ldi	r24, 0x51	; 81
 142:	0e 94 e6 03 	call	0x7cc	; 0x7cc <i2c_rep_start>
	N1_payload_TX[0] = i2c_readNak();
 146:	0e 94 04 04 	call	0x808	; 0x808 <i2c_readNak>
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	d1 e0       	ldi	r29, 0x01	; 1
 14e:	88 83       	st	Y, r24
	UART_Tx(N1_payload_TX[0]);
 150:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 154:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 158:	80 e5       	ldi	r24, 0x50	; 80
 15a:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_W_MSB_ADDR);	//Access MSB of Quaternion_W value
 15e:	81 e2       	ldi	r24, 0x21	; 33
 160:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 164:	81 e5       	ldi	r24, 0x51	; 81
 166:	0e 94 e6 03 	call	0x7cc	; 0x7cc <i2c_rep_start>
	N1_payload_TX[1] = i2c_readNak();
 16a:	0e 94 04 04 	call	0x808	; 0x808 <i2c_readNak>
 16e:	89 83       	std	Y+1, r24	; 0x01
	UART_Tx(N1_payload_TX[1]);
 170:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 174:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 178:	80 e5       	ldi	r24, 0x50	; 80
 17a:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_X_LSB_ADDR);	//Access LSB of Quaternion_X value
 17e:	82 e2       	ldi	r24, 0x22	; 34
 180:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 184:	81 e5       	ldi	r24, 0x51	; 81
 186:	0e 94 e6 03 	call	0x7cc	; 0x7cc <i2c_rep_start>
	N1_payload_TX[2] = i2c_readNak();
 18a:	0e 94 04 04 	call	0x808	; 0x808 <i2c_readNak>
 18e:	8a 83       	std	Y+2, r24	; 0x02
	UART_Tx(N1_payload_TX[2]);
 190:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 194:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 198:	80 e5       	ldi	r24, 0x50	; 80
 19a:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_X_MSB_ADDR);	//Access MSB of Quaternion_X value
 19e:	83 e2       	ldi	r24, 0x23	; 35
 1a0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 1a4:	81 e5       	ldi	r24, 0x51	; 81
 1a6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <i2c_rep_start>
	N1_payload_TX[3] = i2c_readNak();
 1aa:	0e 94 04 04 	call	0x808	; 0x808 <i2c_readNak>
 1ae:	8b 83       	std	Y+3, r24	; 0x03
	UART_Tx(N1_payload_TX[3]);
 1b0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 1b4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>
		
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 1b8:	80 e5       	ldi	r24, 0x50	; 80
 1ba:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_Y_LSB_ADDR);	//Access LSB of Quaternion_Y value
 1be:	84 e2       	ldi	r24, 0x24	; 36
 1c0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 1c4:	81 e5       	ldi	r24, 0x51	; 81
 1c6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <i2c_rep_start>
	N1_payload_TX[4] = i2c_readNak();
 1ca:	0e 94 04 04 	call	0x808	; 0x808 <i2c_readNak>
 1ce:	8c 83       	std	Y+4, r24	; 0x04
	UART_Tx(N1_payload_TX[4]);
 1d0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 1d4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>
		
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 1d8:	80 e5       	ldi	r24, 0x50	; 80
 1da:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_Y_MSB_ADDR);	//Access MSB of Quaternion_Y value
 1de:	85 e2       	ldi	r24, 0x25	; 37
 1e0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 1e4:	81 e5       	ldi	r24, 0x51	; 81
 1e6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <i2c_rep_start>
	N1_payload_TX[5] = i2c_readNak();
 1ea:	0e 94 04 04 	call	0x808	; 0x808 <i2c_readNak>
 1ee:	8d 83       	std	Y+5, r24	; 0x05
	UART_Tx(N1_payload_TX[5]);
 1f0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 1f4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>
		
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 1f8:	80 e5       	ldi	r24, 0x50	; 80
 1fa:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_Z_LSB_ADDR);	//Access LSB of Quaternion_Z value
 1fe:	86 e2       	ldi	r24, 0x26	; 38
 200:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 204:	81 e5       	ldi	r24, 0x51	; 81
 206:	0e 94 e6 03 	call	0x7cc	; 0x7cc <i2c_rep_start>
	N1_payload_TX[6] = i2c_readNak();
 20a:	0e 94 04 04 	call	0x808	; 0x808 <i2c_readNak>
 20e:	8e 83       	std	Y+6, r24	; 0x06
	UART_Tx(N1_payload_TX[6]);
 210:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 214:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>
		
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 218:	80 e5       	ldi	r24, 0x50	; 80
 21a:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_Z_MSB_ADDR);	//Access MSB of Quaternion_Z value
 21e:	87 e2       	ldi	r24, 0x27	; 39
 220:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 224:	81 e5       	ldi	r24, 0x51	; 81
 226:	0e 94 e6 03 	call	0x7cc	; 0x7cc <i2c_rep_start>
	N1_payload_TX[7] = i2c_readNak();
 22a:	0e 94 04 04 	call	0x808	; 0x808 <i2c_readNak>
 22e:	8f 83       	std	Y+7, r24	; 0x07
	UART_Tx(N1_payload_TX[7]);
 230:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();	
 234:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <Init_SPI>:

void Init_SPI()
{
	//Set the output pin(s) for SPI
	DDRB |= _BV(CE);	//CE
 23e:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(CSN);	//CSN
 240:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(MOSI);  	//MOSI
 242:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= _BV(SCLK);  	//SCLK
 244:	21 9a       	sbi	0x04, 1	; 4

	//Set the input pin(s) for SPI
	DDRB &= ~_BV(MISO); 	//MISO
 246:	23 98       	cbi	0x04, 3	; 4

	
	SPCR |= ((1 << SPE) | (1 << MSTR) | (1 << SPR0));	//Enable SPI as master
 248:	8c b5       	in	r24, 0x2c	; 44
 24a:	81 65       	ori	r24, 0x51	; 81
 24c:	8c bd       	out	0x2c, r24	; 44
	SPCR &= (~_BV(SPI2X) & ~_BV(SPR1)); 		   	//Set clock rate but not too important
 24e:	8c b5       	in	r24, 0x2c	; 44
 250:	8c 7f       	andi	r24, 0xFC	; 252
 252:	8c bd       	out	0x2c, r24	; 44
	
	PORTB |= _BV(CSN);	//CSN high
 254:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~_BV(CE);	//CE low
 256:	2c 98       	cbi	0x05, 4	; 5
 258:	8f e3       	ldi	r24, 0x3F	; 63
 25a:	9c e9       	ldi	r25, 0x9C	; 156
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <Init_SPI+0x1e>
 260:	00 c0       	rjmp	.+0      	; 0x262 <Init_SPI+0x24>
 262:	00 00       	nop
 264:	08 95       	ret

00000266 <spi_tranceiver>:
}

unsigned char spi_tranceiver(unsigned char data)
{
	//Load data into the buffer
	SPDR = data;
 266:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1 << SPIF)));
 268:	0d b4       	in	r0, 0x2d	; 45
 26a:	07 fe       	sbrs	r0, 7
 26c:	fd cf       	rjmp	.-6      	; 0x268 <spi_tranceiver+0x2>

	//Return received data
	return(SPDR);
 26e:	8e b5       	in	r24, 0x2e	; 46
}
 270:	08 95       	ret

00000272 <Read_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	95 e3       	ldi	r25, 0x35	; 53
 274:	9a 95       	dec	r25
 276:	f1 f7       	brne	.-4      	; 0x274 <Read_Byte+0x2>
 278:	00 00       	nop

unsigned char Read_Byte(unsigned char reg)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 27a:	28 98       	cbi	0x05, 0	; 5
 27c:	95 e3       	ldi	r25, 0x35	; 53
 27e:	9a 95       	dec	r25
 280:	f1 f7       	brne	.-4      	; 0x27e <Read_Byte+0xc>
 282:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(R_REGISTER + reg);
 284:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 288:	85 e3       	ldi	r24, 0x35	; 53
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <Read_Byte+0x18>
 28e:	00 00       	nop
	_delay_us(10);
	reg = spi_tranceiver(NOP);
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 296:	95 e3       	ldi	r25, 0x35	; 53
 298:	9a 95       	dec	r25
 29a:	f1 f7       	brne	.-4      	; 0x298 <Read_Byte+0x26>
 29c:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 29e:	28 9a       	sbi	0x05, 0	; 5
	return reg;
}
 2a0:	08 95       	ret

000002a2 <Write_byte>:

void Write_byte(unsigned char reg, unsigned char data)
{
 2a2:	cf 93       	push	r28
 2a4:	c6 2f       	mov	r28, r22
 2a6:	95 e3       	ldi	r25, 0x35	; 53
 2a8:	9a 95       	dec	r25
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Write_byte+0x6>
 2ac:	00 00       	nop
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 2ae:	28 98       	cbi	0x05, 0	; 5
 2b0:	95 e3       	ldi	r25, 0x35	; 53
 2b2:	9a 95       	dec	r25
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <Write_byte+0x10>
 2b6:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(W_REGISTER + reg);
 2b8:	80 5e       	subi	r24, 0xE0	; 224
 2ba:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 2be:	85 e3       	ldi	r24, 0x35	; 53
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <Write_byte+0x1e>
 2c4:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(data);
 2c6:	8c 2f       	mov	r24, r28
 2c8:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 2cc:	95 e3       	ldi	r25, 0x35	; 53
 2ce:	9a 95       	dec	r25
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <Write_byte+0x2c>
 2d2:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2d4:	28 9a       	sbi	0x05, 0	; 5
}
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <Flush_tx>:
 2da:	85 e3       	ldi	r24, 0x35	; 53
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <Flush_tx+0x2>
 2e0:	00 00       	nop
}

void Flush_tx(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 2e2:	28 98       	cbi	0x05, 0	; 5
 2e4:	85 e3       	ldi	r24, 0x35	; 53
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <Flush_tx+0xc>
 2ea:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(FLUSH_TX);
 2ec:	81 ee       	ldi	r24, 0xE1	; 225
 2ee:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 2f2:	85 e3       	ldi	r24, 0x35	; 53
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Flush_tx+0x1a>
 2f8:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2fa:	28 9a       	sbi	0x05, 0	; 5
 2fc:	85 e3       	ldi	r24, 0x35	; 53
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <Flush_tx+0x24>
 302:	00 00       	nop
 304:	08 95       	ret

00000306 <nRF_TX_mode>:
}
*/

void nRF_TX_mode(void)
{
	PORTB &= ~_BV(CE);						 //CE low - Standby-I
 306:	2c 98       	cbi	0x05, 4	; 5
//	Write_byte(CONFIG, Read_Byte(CONFIG) & ~(1 << PWR_UP));		 //Power-down mode
//	_delay_ms(1);							 
	//Power-up and set as TX
	Write_byte(CONFIG, Read_Byte(CONFIG) & ~(1 << PRIM_RX));
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 39 01 	call	0x272	; 0x272 <Read_Byte>
 30e:	68 2f       	mov	r22, r24
 310:	6e 7f       	andi	r22, 0xFE	; 254
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	Write_byte(CONFIG, Read_Byte(CONFIG) | (1 << PWR_UP));
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 39 01 	call	0x272	; 0x272 <Read_Byte>
 31e:	68 2f       	mov	r22, r24
 320:	62 60       	ori	r22, 0x02	; 2
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
//	_delay_ms(1);
	Flush_tx();							 //Flush TX FIFO
 328:	0e 94 6d 01 	call	0x2da	; 0x2da <Flush_tx>
	Write_byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 32c:	60 e7       	ldi	r22, 0x70	; 112
 32e:	87 e0       	ldi	r24, 0x07	; 7
 330:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	//Mask TX_DR and MAX_RT interrupts
	Write_byte(CONFIG, Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 39 01 	call	0x272	; 0x272 <Read_Byte>
 33a:	68 2f       	mov	r22, r24
 33c:	60 63       	ori	r22, 0x30	; 48
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
 344:	87 e5       	ldi	r24, 0x57	; 87
 346:	92 e0       	ldi	r25, 0x02	; 2
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <nRF_TX_mode+0x42>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <nRF_TX_mode+0x48>
 34e:	00 00       	nop
 350:	08 95       	ret

00000352 <Flush_rx>:
 352:	85 e3       	ldi	r24, 0x35	; 53
 354:	8a 95       	dec	r24
 356:	f1 f7       	brne	.-4      	; 0x354 <Flush_rx+0x2>
 358:	00 00       	nop
}

void Flush_rx(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 35a:	28 98       	cbi	0x05, 0	; 5
 35c:	85 e3       	ldi	r24, 0x35	; 53
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <Flush_rx+0xc>
 362:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(FLUSH_RX);
 364:	82 ee       	ldi	r24, 0xE2	; 226
 366:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 36a:	85 e3       	ldi	r24, 0x35	; 53
 36c:	8a 95       	dec	r24
 36e:	f1 f7       	brne	.-4      	; 0x36c <Flush_rx+0x1a>
 370:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 372:	28 9a       	sbi	0x05, 0	; 5
 374:	85 e3       	ldi	r24, 0x35	; 53
 376:	8a 95       	dec	r24
 378:	f1 f7       	brne	.-4      	; 0x376 <Flush_rx+0x24>
 37a:	00 00       	nop
 37c:	08 95       	ret

0000037e <nRF_RX_mode>:
	_delay_us(150);
}

void nRF_RX_mode(void)
{
	PORTB &= ~_BV(CE); 						 //CE low - Standby-I
 37e:	2c 98       	cbi	0x05, 4	; 5
//	Write_byte(CONFIG, Read_Byte(CONFIG) & ~(1 << PWR_UP));		 //Power-down mode
//	_delay_ms(1);	
	//Power-up as set as RX
	Write_byte(CONFIG, Read_Byte(CONFIG) | (1 << PWR_UP) | (1 << PRIM_RX));
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 39 01 	call	0x272	; 0x272 <Read_Byte>
 386:	68 2f       	mov	r22, r24
 388:	63 60       	ori	r22, 0x03	; 3
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
//	_delay_ms(1);
	Flush_rx();							 //Flush RX FIFO
 390:	0e 94 a9 01 	call	0x352	; 0x352 <Flush_rx>
	Write_byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 394:	60 e7       	ldi	r22, 0x70	; 112
 396:	87 e0       	ldi	r24, 0x07	; 7
 398:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	//Mask TX_DR and MAX_RT interrupts
	//Mask TX_DR and MAX_RT interrupts
	Write_byte(CONFIG, Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 39 01 	call	0x272	; 0x272 <Read_Byte>
 3a2:	68 2f       	mov	r22, r24
 3a4:	60 63       	ori	r22, 0x30	; 48
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	PORTB |= _BV(CE);  						 //CE high
 3ac:	2c 9a       	sbi	0x05, 4	; 5
 3ae:	87 e5       	ldi	r24, 0x57	; 87
 3b0:	92 e0       	ldi	r25, 0x02	; 2
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <nRF_RX_mode+0x34>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <nRF_RX_mode+0x3a>
 3b8:	00 00       	nop
 3ba:	08 95       	ret

000003bc <Init_nrf>:
}

void Init_nrf(void)
{	
	//Enable auto-acknowledgment for data pipe 0
	Write_byte(EN_AA, 0x01);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	
	//Enable data pipe 0
	Write_byte(EN_RXADDR, 0x01);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>

	//Set address width to 5 bytes
	Write_byte(SETUP_AW, 0x03);
 3cc:	63 e0       	ldi	r22, 0x03	; 3
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	
	//Set channel frequency to 2.505GHz
	Write_byte(RF_CH, 0x69);
 3d4:	69 e6       	ldi	r22, 0x69	; 105
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	
	//Set data rate to 2Mbps and 0dB gain
	Write_byte(RF_SETUP, 0x0E);
 3dc:	6e e0       	ldi	r22, 0x0E	; 14
 3de:	86 e0       	ldi	r24, 0x06	; 6
 3e0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
 3e4:	85 e3       	ldi	r24, 0x35	; 53
 3e6:	8a 95       	dec	r24
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <Init_nrf+0x2a>
 3ea:	00 00       	nop
	//Enable W_TX_PAYLOAD_NOACK command
//	Write_byte(FEATURE, 0x01);
	
	//Set the 5-bytes receiver address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 3ec:	28 98       	cbi	0x05, 0	; 5
 3ee:	95 e3       	ldi	r25, 0x35	; 53
 3f0:	9a 95       	dec	r25
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <Init_nrf+0x34>
 3f4:	00 00       	nop
	_delay_us(10);
	//Setup p0 pipe address for receiving
	spi_tranceiver(W_REGISTER + RX_ADDR_P0);
 3f6:	8a e2       	ldi	r24, 0x2A	; 42
 3f8:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 3fc:	85 e3       	ldi	r24, 0x35	; 53
 3fe:	8a 95       	dec	r24
 400:	f1 f7       	brne	.-4      	; 0x3fe <Init_nrf+0x42>
 402:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xAA);
 404:	8a ea       	ldi	r24, 0xAA	; 170
 406:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 40a:	95 e3       	ldi	r25, 0x35	; 53
 40c:	9a 95       	dec	r25
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xBB);
 412:	8b eb       	ldi	r24, 0xBB	; 187
 414:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 418:	85 e3       	ldi	r24, 0x35	; 53
 41a:	8a 95       	dec	r24
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xCC);
 420:	8c ec       	ldi	r24, 0xCC	; 204
 422:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 426:	95 e3       	ldi	r25, 0x35	; 53
 428:	9a 95       	dec	r25
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xDD);
 42e:	8d ed       	ldi	r24, 0xDD	; 221
 430:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 434:	85 e3       	ldi	r24, 0x35	; 53
 436:	8a 95       	dec	r24
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xEE);
 43c:	8e ee       	ldi	r24, 0xEE	; 238
 43e:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 442:	95 e3       	ldi	r25, 0x35	; 53
 444:	9a 95       	dec	r25
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 44a:	28 9a       	sbi	0x05, 0	; 5
 44c:	85 e3       	ldi	r24, 0x35	; 53
 44e:	8a 95       	dec	r24
 450:	f1 f7       	brne	.-4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 452:	00 00       	nop
	
	//Set the 5-bytes transmitter address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 454:	28 98       	cbi	0x05, 0	; 5
 456:	95 e3       	ldi	r25, 0x35	; 53
 458:	9a 95       	dec	r25
 45a:	f1 f7       	brne	.-4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 45c:	00 00       	nop
	_delay_us(10);
	//Setup the transmitter address
	spi_tranceiver(W_REGISTER + TX_ADDR);
 45e:	80 e3       	ldi	r24, 0x30	; 48
 460:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 464:	85 e3       	ldi	r24, 0x35	; 53
 466:	8a 95       	dec	r24
 468:	f1 f7       	brne	.-4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46a:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x11);
 46c:	81 e1       	ldi	r24, 0x11	; 17
 46e:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 472:	95 e3       	ldi	r25, 0x35	; 53
 474:	9a 95       	dec	r25
 476:	f1 f7       	brne	.-4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 478:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x12);
 47a:	82 e1       	ldi	r24, 0x12	; 18
 47c:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 480:	85 e3       	ldi	r24, 0x35	; 53
 482:	8a 95       	dec	r24
 484:	f1 f7       	brne	.-4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 486:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x13);
 488:	83 e1       	ldi	r24, 0x13	; 19
 48a:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 48e:	95 e3       	ldi	r25, 0x35	; 53
 490:	9a 95       	dec	r25
 492:	f1 f7       	brne	.-4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 494:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x14);
 496:	84 e1       	ldi	r24, 0x14	; 20
 498:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 49c:	85 e3       	ldi	r24, 0x35	; 53
 49e:	8a 95       	dec	r24
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a2:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x15);
 4a4:	85 e1       	ldi	r24, 0x15	; 21
 4a6:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 4aa:	95 e3       	ldi	r25, 0x35	; 53
 4ac:	9a 95       	dec	r25
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b0:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 4b2:	28 9a       	sbi	0x05, 0	; 5
	
	//Set the payload width as 8-bytes
	Write_byte(RX_PW_P0, 0x08);
 4b4:	68 e0       	ldi	r22, 0x08	; 8
 4b6:	81 e1       	ldi	r24, 0x11	; 17
 4b8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	
	//Set the retransmission delay to 750us with 15 retries
	Write_byte(SETUP_RETR, 0x2F);
 4bc:	6f e2       	ldi	r22, 0x2F	; 47
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
	
	//Boot the nrf as RX and mask the maximum retransmission interrupt(disable)
	//Enable CRC and set the length to 2-bytes
	nRF_RX_mode();
 4c4:	0e 94 bf 01 	call	0x37e	; 0x37e <nRF_RX_mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	8f e3       	ldi	r24, 0x3F	; 63
 4ca:	9c e9       	ldi	r25, 0x9C	; 156
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d2:	00 00       	nop
 4d4:	08 95       	ret

000004d6 <Payload_TX>:
	PORTB |= _BV(CSN);	//CSN high
	_delay_us(10);
}

void Payload_TX(uint8_t* data, uint8_t len)
{
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
	uint8_t i;
	
	for(i = 0; i < len; i++)
 4de:	66 23       	and	r22, r22
 4e0:	69 f0       	breq	.+26     	; 0x4fc <Payload_TX+0x26>
 4e2:	c0 e0       	ldi	r28, 0x00	; 0
 4e4:	d1 e0       	ldi	r29, 0x01	; 1
 4e6:	61 50       	subi	r22, 0x01	; 1
 4e8:	06 2f       	mov	r16, r22
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	0f 5f       	subi	r16, 0xFF	; 255
 4ee:	1e 4f       	sbci	r17, 0xFE	; 254
	{
		spi_tranceiver(N1_payload_TX[i]);
 4f0:	89 91       	ld	r24, Y+
 4f2:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>

void Payload_TX(uint8_t* data, uint8_t len)
{
	uint8_t i;
	
	for(i = 0; i < len; i++)
 4f6:	c0 17       	cp	r28, r16
 4f8:	d1 07       	cpc	r29, r17
 4fa:	d1 f7       	brne	.-12     	; 0x4f0 <Payload_TX+0x1a>
	{
		spi_tranceiver(N1_payload_TX[i]);
	}
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <transmit_data>:

void transmit_data(unsigned char *tdata)
{
	Flush_tx();
 506:	0e 94 6d 01 	call	0x2da	; 0x2da <Flush_tx>
	PORTB &= ~_BV(CSN); //CSN low
 50a:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50c:	85 e3       	ldi	r24, 0x35	; 53
 50e:	8a 95       	dec	r24
 510:	f1 f7       	brne	.-4      	; 0x50e <transmit_data+0x8>
 512:	00 00       	nop
	_delay_us(10);
	//Transmit payload with ACK enabled
	spi_tranceiver(W_TX_PAYLOAD);
 514:	80 ea       	ldi	r24, 0xA0	; 160
 516:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 51a:	85 e3       	ldi	r24, 0x35	; 53
 51c:	8a 95       	dec	r24
 51e:	f1 f7       	brne	.-4      	; 0x51c <transmit_data+0x16>
 520:	00 00       	nop
	_delay_us(10);
	Payload_TX(N1_payload_TX, PAYLOAD_LEN);
 522:	68 e0       	ldi	r22, 0x08	; 8
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <Payload_TX>
 52c:	85 e3       	ldi	r24, 0x35	; 53
 52e:	8a 95       	dec	r24
 530:	f1 f7       	brne	.-4      	; 0x52e <transmit_data+0x28>
 532:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);  //CSN high
 534:	28 9a       	sbi	0x05, 0	; 5
 536:	85 e3       	ldi	r24, 0x35	; 53
 538:	8a 95       	dec	r24
 53a:	f1 f7       	brne	.-4      	; 0x538 <transmit_data+0x32>
 53c:	00 00       	nop
	_delay_us(10);      //Need at least 10us before sending
	PORTB |= _BV(CE);   //CE high
 53e:	2c 9a       	sbi	0x05, 4	; 5
 540:	85 e3       	ldi	r24, 0x35	; 53
 542:	8a 95       	dec	r24
 544:	f1 f7       	brne	.-4      	; 0x542 <transmit_data+0x3c>
 546:	00 00       	nop
	_delay_us(10);      //Hold CE high for at least 10us and not longer than 4ms
	PORTB &= ~_BV(CE);  //CE low
 548:	2c 98       	cbi	0x05, 4	; 5
 54a:	08 95       	ret

0000054c <nrf24_getStatus>:
}

uint8_t nrf24_getStatus()
{
	uint8_t rv;
	PORTB &= ~_BV(CSN); //CSN low
 54c:	28 98       	cbi	0x05, 0	; 5
	rv = spi_tranceiver(NOP);
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
	PORTB |= _BV(CSN);  //CSN high
 554:	28 9a       	sbi	0x05, 0	; 5
	return rv;
}
 556:	08 95       	ret

00000558 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
 558:	0e 94 a6 02 	call	0x54c	; 0x54c <nrf24_getStatus>
 55c:	98 2f       	mov	r25, r24
 55e:	90 73       	andi	r25, 0x30	; 48
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	09 f0       	breq	.+2      	; 0x566 <nrf24_isSending+0xe>
 564:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0; /* false */
	}

	return 1; /* true */
}
 566:	08 95       	ret

00000568 <Init_INT6>:

void Init_INT6(void)
{
	EICRB &= ~(1 << ISC60) | (1 << ISC61);	//INT6 active when low
 568:	ea e6       	ldi	r30, 0x6A	; 106
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	8f 7e       	andi	r24, 0xEF	; 239
 570:	80 83       	st	Z, r24
	EIMSK |= (1 << INT6);			//Enable INT6
 572:	ee 9a       	sbi	0x1d, 6	; 29
	sei();					//Enable global interrupts
 574:	78 94       	sei
 576:	08 95       	ret

00000578 <Payload_RX>:
	Write_byte(STATUS, (1 << RX_DR));
}

/* send and receive multiple bytes over SPI */
void Payload_RX(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
 578:	cf 92       	push	r12
 57a:	df 92       	push	r13
 57c:	ef 92       	push	r14
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
	uint8_t i;

	for(i=0; i<len; i++)
 588:	44 23       	and	r20, r20
 58a:	21 f1       	breq	.+72     	; 0x5d4 <Payload_RX+0x5c>
 58c:	08 2f       	mov	r16, r24
 58e:	19 2f       	mov	r17, r25
 590:	eb 01       	movw	r28, r22
 592:	41 50       	subi	r20, 0x01	; 1
 594:	e4 2e       	mov	r14, r20
 596:	f1 2c       	mov	r15, r1
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	e8 1a       	sub	r14, r24
 59c:	f8 0a       	sbc	r15, r24
 59e:	e6 0e       	add	r14, r22
 5a0:	f7 1e       	adc	r15, r23
	{
		data_in[i] = spi_tranceiver(data_out[i]);
 5a2:	f8 01       	movw	r30, r16
 5a4:	81 91       	ld	r24, Z+
 5a6:	8f 01       	movw	r16, r30
 5a8:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 5ac:	6e 01       	movw	r12, r28
 5ae:	89 93       	st	Y+, r24
		UART_Tx(data_in[i]);		   //Send the received data to UART
 5b0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
		if (data_in[i] == 0xAA)
 5b4:	f6 01       	movw	r30, r12
 5b6:	80 81       	ld	r24, Z
 5b8:	8a 3a       	cpi	r24, 0xAA	; 170
 5ba:	49 f4       	brne	.+18     	; 0x5ce <Payload_RX+0x56>
		{
			RX_Payload_cnt++;
 5bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <RX_Payload_cnt>
 5c0:	8f 5f       	subi	r24, 0xFF	; 255
 5c2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <RX_Payload_cnt>
			UART_Tx(RX_Payload_cnt);   //Send RX_Payload count to UART
 5c6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <RX_Payload_cnt>
 5ca:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
/* send and receive multiple bytes over SPI */
void Payload_RX(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
	uint8_t i;

	for(i=0; i<len; i++)
 5ce:	ce 15       	cp	r28, r14
 5d0:	df 05       	cpc	r29, r15
 5d2:	39 f7       	brne	.-50     	; 0x5a2 <Payload_RX+0x2a>
		{
			RX_Payload_cnt++;
			UART_Tx(RX_Payload_cnt);   //Send RX_Payload count to UART
		}
	}
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	ff 90       	pop	r15
 5de:	ef 90       	pop	r14
 5e0:	df 90       	pop	r13
 5e2:	cf 90       	pop	r12
 5e4:	08 95       	ret

000005e6 <__vector_7>:
	EIMSK |= (1 << INT6);			//Enable INT6
	sei();					//Enable global interrupts
}

ISR(INT6_vect)
{
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	cli();					//Disable global interrupt
 608:	f8 94       	cli
	
	PORTB &= ~_BV(CE); 			//Stop listening
 60a:	2c 98       	cbi	0x05, 4	; 5
	// Pull down chip select 
	PORTB &= ~_BV(CSN); //CSN low
 60c:	28 98       	cbi	0x05, 0	; 5
 60e:	85 e3       	ldi	r24, 0x35	; 53
 610:	8a 95       	dec	r24
 612:	f1 f7       	brne	.-4      	; 0x610 <__vector_7+0x2a>
 614:	00 00       	nop
	_delay_us(10);
	// Send command to read RX payload 
	spi_tranceiver(R_RX_PAYLOAD);
 616:	81 e6       	ldi	r24, 0x61	; 97
 618:	0e 94 33 01 	call	0x266	; 0x266 <spi_tranceiver>
 61c:	85 e3       	ldi	r24, 0x35	; 53
 61e:	8a 95       	dec	r24
 620:	f1 f7       	brne	.-4      	; 0x61e <__vector_7+0x38>
 622:	00 00       	nop
	_delay_us(10);
	// Read payload 
	Payload_RX(N1_payload_RX, N1_payload_RX, PAYLOAD_LEN);
 624:	48 e0       	ldi	r20, 0x08	; 8
 626:	69 e0       	ldi	r22, 0x09	; 9
 628:	71 e0       	ldi	r23, 0x01	; 1
 62a:	cb 01       	movw	r24, r22
 62c:	0e 94 bc 02 	call	0x578	; 0x578 <Payload_RX>
 630:	85 e3       	ldi	r24, 0x35	; 53
 632:	8a 95       	dec	r24
 634:	f1 f7       	brne	.-4      	; 0x632 <__vector_7+0x4c>
 636:	00 00       	nop
	_delay_us(10);
	// Pull up chip select
	PORTB |= _BV(CSN);  //CSN high
 638:	28 9a       	sbi	0x05, 0	; 5
 63a:	85 e3       	ldi	r24, 0x35	; 53
 63c:	8a 95       	dec	r24
 63e:	f1 f7       	brne	.-4      	; 0x63c <__vector_7+0x56>
 640:	00 00       	nop
	_delay_us(10);
	// Reset status register 
	Write_byte(STATUS, (1 << RX_DR));
 642:	60 e4       	ldi	r22, 0x40	; 64
 644:	87 e0       	ldi	r24, 0x07	; 7
 646:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
}
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	bf 91       	pop	r27
 650:	af 91       	pop	r26
 652:	9f 91       	pop	r25
 654:	8f 91       	pop	r24
 656:	7f 91       	pop	r23
 658:	6f 91       	pop	r22
 65a:	5f 91       	pop	r21
 65c:	4f 91       	pop	r20
 65e:	3f 91       	pop	r19
 660:	2f 91       	pop	r18
 662:	0f 90       	pop	r0
 664:	0f be       	out	0x3f, r0	; 63
 666:	0f 90       	pop	r0
 668:	1f 90       	pop	r1
 66a:	18 95       	reti

0000066c <reset>:
 66c:	85 e3       	ldi	r24, 0x35	; 53
 66e:	8a 95       	dec	r24
 670:	f1 f7       	brne	.-4      	; 0x66e <reset+0x2>
 672:	00 00       	nop

void reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
	Write_byte(STATUS, 0x70);
 674:	60 e7       	ldi	r22, 0x70	; 112
 676:	87 e0       	ldi	r24, 0x07	; 7
 678:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Write_byte>
 67c:	85 e3       	ldi	r24, 0x35	; 53
 67e:	8a 95       	dec	r24
 680:	f1 f7       	brne	.-4      	; 0x67e <reset+0x12>
 682:	00 00       	nop
 684:	08 95       	ret

00000686 <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 686:	0e 94 6a 00 	call	0xd4	; 0xd4 <AVR_Init>
	i2c_init();
 68a:	0e 94 91 03 	call	0x722	; 0x722 <i2c_init>
	
	Init_SPI();
 68e:	0e 94 1f 01 	call	0x23e	; 0x23e <Init_SPI>
	Init_nrf();
 692:	0e 94 de 01 	call	0x3bc	; 0x3bc <Init_nrf>
	UART_Init();
 696:	0e 94 78 00 	call	0xf0	; 0xf0 <UART_Init>
	Init_INT6();
 69a:	0e 94 b4 02 	call	0x568	; 0x568 <Init_INT6>

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 69e:	80 e5       	ldi	r24, 0x50	; 80
 6a0:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_start_wait>
	i2c_write(BNO055_OPR_MODE_ADDR);
 6a4:	8d e3       	ldi	r24, 0x3D	; 61
 6a6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_write(OPERATION_MODE_NDOF);			//Set operation mode to NDOF
 6aa:	8c e0       	ldi	r24, 0x0C	; 12
 6ac:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <i2c_write>
	i2c_stop();
 6b0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b4:	8f e3       	ldi	r24, 0x3F	; 63
 6b6:	9c e9       	ldi	r25, 0x9C	; 156
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <main+0x32>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0x38>
 6be:	00 00       	nop
	_delay_ms(10);
	
	//Initialize the received payload count
	RX_Payload_cnt = 0;
 6c0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <RX_Payload_cnt>
	
	Flush_rx();
 6c4:	0e 94 a9 01 	call	0x352	; 0x352 <Flush_rx>
	reset();
 6c8:	0e 94 36 03 	call	0x66c	; 0x66c <reset>
	PORTB |= _BV(CE);			//Start listening
 6cc:	2c 9a       	sbi	0x05, 4	; 5

	//Endless Loop
	while(1)
	{	
		if (RX_Payload_cnt == PAYLOAD_LEN)
 6ce:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <RX_Payload_cnt>
 6d2:	88 30       	cpi	r24, 0x08	; 8
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <main+0x48>
		{
			UART_Tx(0x55);   	//Send BP1 to UART
 6d6:	85 e5       	ldi	r24, 0x55	; 85
 6d8:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
			
			RX_Payload_cnt = 0;
 6dc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <RX_Payload_cnt>
			
			//Configure as Transmitter
			nRF_TX_mode();
 6e0:	0e 94 83 01 	call	0x306	; 0x306 <nRF_TX_mode>

			UART_Tx(0x66);   	//Send BP2 to UART
 6e4:	86 e6       	ldi	r24, 0x66	; 102
 6e6:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
			
			//Read the Quaternions data from the BNO055
			BNO_Read_Quaternions();
 6ea:	0e 94 98 00 	call	0x130	; 0x130 <BNO_Read_Quaternions>

			UART_Tx(0x77);   	//Send BP3 to UART
 6ee:	87 e7       	ldi	r24, 0x77	; 119
 6f0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
			
		
			transmit_data(N1_payload_TX);
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	0e 94 83 02 	call	0x506	; 0x506 <transmit_data>
			while(nrf24_isSending());
 6fc:	0e 94 ac 02 	call	0x558	; 0x558 <nrf24_isSending>
 700:	81 11       	cpse	r24, r1
 702:	fc cf       	rjmp	.-8      	; 0x6fc <main+0x76>
			reset();
 704:	0e 94 36 03 	call	0x66c	; 0x66c <reset>
				transmit_data(N1_payload_TX);
//				reset();
			}
			reset();
*/
			UART_Tx(0x88);   	//Send BP4 to UART
 708:	88 e8       	ldi	r24, 0x88	; 136
 70a:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
				
			//Configure as Receiver
			nRF_RX_mode();
 70e:	0e 94 bf 01 	call	0x37e	; 0x37e <nRF_RX_mode>
			Flush_rx();
 712:	0e 94 a9 01 	call	0x352	; 0x352 <Flush_rx>
//			reset();
			PORTB |= _BV(CE);	//Start listening again
 716:	2c 9a       	sbi	0x05, 4	; 5
			sei();
 718:	78 94       	sei

			UART_Tx(0x99);   	//Send BP5 to UART
 71a:	89 e9       	ldi	r24, 0x99	; 153
 71c:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
 720:	d6 cf       	rjmp	.-84     	; 0x6ce <main+0x48>

00000722 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 722:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 726:	8c e0       	ldi	r24, 0x0C	; 12
 728:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 72c:	08 95       	ret

0000072e <i2c_start>:
 72e:	94 ea       	ldi	r25, 0xA4	; 164
 730:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 734:	ec eb       	ldi	r30, 0xBC	; 188
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	90 81       	ld	r25, Z
 73a:	99 23       	and	r25, r25
 73c:	ec f7       	brge	.-6      	; 0x738 <i2c_start+0xa>
 73e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 742:	98 7f       	andi	r25, 0xF8	; 248
 744:	98 30       	cpi	r25, 0x08	; 8
 746:	11 f0       	breq	.+4      	; 0x74c <i2c_start+0x1e>
 748:	90 31       	cpi	r25, 0x10	; 16
 74a:	a1 f4       	brne	.+40     	; 0x774 <i2c_start+0x46>
 74c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 750:	84 e8       	ldi	r24, 0x84	; 132
 752:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 756:	ec eb       	ldi	r30, 0xBC	; 188
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	88 23       	and	r24, r24
 75e:	ec f7       	brge	.-6      	; 0x75a <i2c_start+0x2c>
 760:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 764:	98 7f       	andi	r25, 0xF8	; 248
 766:	98 31       	cpi	r25, 0x18	; 24
 768:	39 f0       	breq	.+14     	; 0x778 <i2c_start+0x4a>
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 34       	cpi	r25, 0x40	; 64
 76e:	29 f4       	brne	.+10     	; 0x77a <i2c_start+0x4c>
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	08 95       	ret
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	08 95       	ret
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	08 95       	ret

0000077c <i2c_start_wait>:
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec eb       	ldi	r30, 0xBC	; 188
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	24 ea       	ldi	r18, 0xA4	; 164
 786:	a9 eb       	ldi	r26, 0xB9	; 185
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	cb eb       	ldi	r28, 0xBB	; 187
 78c:	d0 e0       	ldi	r29, 0x00	; 0
 78e:	34 e8       	ldi	r19, 0x84	; 132
 790:	44 e9       	ldi	r20, 0x94	; 148
 792:	20 83       	st	Z, r18
 794:	90 81       	ld	r25, Z
 796:	99 23       	and	r25, r25
 798:	ec f7       	brge	.-6      	; 0x794 <i2c_start_wait+0x18>
 79a:	9c 91       	ld	r25, X
 79c:	98 7f       	andi	r25, 0xF8	; 248
 79e:	98 30       	cpi	r25, 0x08	; 8
 7a0:	11 f0       	breq	.+4      	; 0x7a6 <i2c_start_wait+0x2a>
 7a2:	90 31       	cpi	r25, 0x10	; 16
 7a4:	b1 f7       	brne	.-20     	; 0x792 <i2c_start_wait+0x16>
 7a6:	88 83       	st	Y, r24
 7a8:	30 83       	st	Z, r19
 7aa:	90 81       	ld	r25, Z
 7ac:	99 23       	and	r25, r25
 7ae:	ec f7       	brge	.-6      	; 0x7aa <i2c_start_wait+0x2e>
 7b0:	9c 91       	ld	r25, X
 7b2:	98 7f       	andi	r25, 0xF8	; 248
 7b4:	90 32       	cpi	r25, 0x20	; 32
 7b6:	11 f0       	breq	.+4      	; 0x7bc <i2c_start_wait+0x40>
 7b8:	98 35       	cpi	r25, 0x58	; 88
 7ba:	29 f4       	brne	.+10     	; 0x7c6 <i2c_start_wait+0x4a>
 7bc:	40 83       	st	Z, r20
 7be:	90 81       	ld	r25, Z
 7c0:	94 fd       	sbrc	r25, 4
 7c2:	fd cf       	rjmp	.-6      	; 0x7be <i2c_start_wait+0x42>
 7c4:	e6 cf       	rjmp	.-52     	; 0x792 <i2c_start_wait+0x16>
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <i2c_rep_start>:
 7cc:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_start>
 7d0:	08 95       	ret

000007d2 <i2c_stop>:
 7d2:	84 e9       	ldi	r24, 0x94	; 148
 7d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 7d8:	ec eb       	ldi	r30, 0xBC	; 188
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	84 fd       	sbrc	r24, 4
 7e0:	fd cf       	rjmp	.-6      	; 0x7dc <i2c_stop+0xa>
 7e2:	08 95       	ret

000007e4 <i2c_write>:
 7e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 7e8:	84 e8       	ldi	r24, 0x84	; 132
 7ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 7ee:	ec eb       	ldi	r30, 0xBC	; 188
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	88 23       	and	r24, r24
 7f6:	ec f7       	brge	.-6      	; 0x7f2 <i2c_write+0xe>
 7f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 7fc:	98 7f       	andi	r25, 0xF8	; 248
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	98 32       	cpi	r25, 0x28	; 40
 802:	09 f4       	brne	.+2      	; 0x806 <i2c_write+0x22>
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret

00000808 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 808:	84 e8       	ldi	r24, 0x84	; 132
 80a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 80e:	ec eb       	ldi	r30, 0xBC	; 188
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	88 23       	and	r24, r24
 816:	ec f7       	brge	.-6      	; 0x812 <i2c_readNak+0xa>
	
    return TWDR;
 818:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 81c:	08 95       	ret

0000081e <_exit>:
 81e:	f8 94       	cli

00000820 <__stop_program>:
 820:	ff cf       	rjmp	.-2      	; 0x820 <__stop_program>

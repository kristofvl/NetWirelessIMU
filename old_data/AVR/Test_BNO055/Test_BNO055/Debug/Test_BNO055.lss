
Test_BNO055.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dca  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b46  00000000  00000000  0000111e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bb  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00002120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f2  00000000  00000000  00002791  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a1 30       	cpi	r26, 0x01	; 1
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  cc:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <AVR_Init>:
	TWI_Start(devAddr + I2C_WRITE);
	TWI_Write(reg);
	TWI_Write(byte);
	
	TWI_Stop();	
}
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	8e e9       	ldi	r24, 0x9E	; 158
  d8:	94 e2       	ldi	r25, 0x24	; 36
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <AVR_Init+0x6>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <AVR_Init+0x10>
  e4:	00 00       	nop
  e6:	51 9a       	sbi	0x0a, 1	; 10
  e8:	50 98       	cbi	0x0a, 0	; 10
  ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  ee:	08 95       	ret

000000f0 <TWI_Init>:
  f0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f4:	8c e0       	ldi	r24, 0x0C	; 12
  f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  fa:	08 95       	ret

000000fc <UART_Init>:
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 104:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 108:	e8 ec       	ldi	r30, 0xC8	; 200
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8d 7f       	andi	r24, 0xFD	; 253
 110:	80 83       	st	Z, r24
 112:	ea ec       	ldi	r30, 0xCA	; 202
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	86 60       	ori	r24, 0x06	; 6
 11a:	80 83       	st	Z, r24
 11c:	e9 ec       	ldi	r30, 0xC9	; 201
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 61       	ori	r24, 0x18	; 24
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <UART_Tx>:
 128:	e8 ec       	ldi	r30, 0xC8	; 200
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <UART_Tx+0x4>
 132:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 136:	08 95       	ret

00000138 <TWI_Start>:
 138:	cf 93       	push	r28
 13a:	c8 2f       	mov	r28, r24
 13c:	84 ea       	ldi	r24, 0xA4	; 164
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 142:	ec eb       	ldi	r30, 0xBC	; 188
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <TWI_Start+0xe>
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 94 00 	call	0x128	; 0x128 <UART_Tx>
 152:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 156:	84 e8       	ldi	r24, 0x84	; 132
 158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 15c:	ec eb       	ldi	r30, 0xBC	; 188
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 23       	and	r24, r24
 164:	ec f7       	brge	.-6      	; 0x160 <TWI_Start+0x28>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <TWI_Write>:
 16a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	ec f7       	brge	.-6      	; 0x178 <TWI_Write+0xe>
 17e:	08 95       	ret

00000180 <TWI_Read>:
 180:	84 e8       	ldi	r24, 0x84	; 132
 182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 186:	ec eb       	ldi	r30, 0xBC	; 188
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 23       	and	r24, r24
 18e:	ec f7       	brge	.-6      	; 0x18a <TWI_Read+0xa>
 190:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 194:	08 95       	ret

00000196 <Receive_from_IMU>:
/************************************************************************************
** Receive_from_IMU function:
** Reads an 8-bit data from a specific address on the slave device
*************************************************************************************/
void Receive_from_IMU(uint8_t devAddr, uint8_t reg)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	c8 2f       	mov	r28, r24
 19c:	d6 2f       	mov	r29, r22
	TWI_Start(devAddr + I2C_WRITE);
 19e:	0e 94 9c 00 	call	0x138	; 0x138 <TWI_Start>
	TWI_Write(reg);
 1a2:	8d 2f       	mov	r24, r29
 1a4:	0e 94 b5 00 	call	0x16a	; 0x16a <TWI_Write>
	
	TWI_Start(devAddr + I2C_READ);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	8c 0f       	add	r24, r28
 1ac:	0e 94 9c 00 	call	0x138	; 0x138 <TWI_Start>
	TWI_data = TWI_Read();
 1b0:	0e 94 c0 00 	call	0x180	; 0x180 <TWI_Read>
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
** TWI_Stop function:
** Stops the TWI transmission
*************************************************************************************/
void TWI_Stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 1b8:	84 e9       	ldi	r24, 0x94	; 148
 1ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	TWI_Start(devAddr + I2C_READ);
	TWI_data = TWI_Read();
	
	TWI_Stop();
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 1c4:	0e 94 6a 00 	call	0xd4	; 0xd4 <AVR_Init>
	UART_Init();
 1c8:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_Init>
	TWI_Init();
 1cc:	0e 94 78 00 	call	0xf0	; 0xf0 <TWI_Init>
	

	//Endless Loop
	while(1)
	{
		Receive_from_IMU(BNO055_ADDRESS, BNO055_CHIP_ID_ADDR);	//Chip ID should read 0xA0
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	88 e2       	ldi	r24, 0x28	; 40
 1d4:	0e 94 cb 00 	call	0x196	; 0x196 <Receive_from_IMU>
		UART_Tx(TWI_data);
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1dc:	0e 94 94 00 	call	0x128	; 0x128 <UART_Tx>
		UART_Tx(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 94 00 	call	0x128	; 0x128 <UART_Tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	83 ed       	ldi	r24, 0xD3	; 211
 1ea:	90 e3       	ldi	r25, 0x30	; 48
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x28>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x32>
 1f6:	00 00       	nop
 1f8:	eb cf       	rjmp	.-42     	; 0x1d0 <main+0xc>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>

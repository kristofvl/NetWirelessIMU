
Base_Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d4f  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c28  00000000  00000000  000024c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000917  00000000  00000000  000030ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000636  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000108e  00000000  00000000  00004226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000052b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec ea       	ldi	r30, 0xAC	; 172
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 30       	cpi	r26, 0x08	; 8
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e0       	ldi	r26, 0x08	; 8
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 31       	cpi	r26, 0x11	; 17
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 af 02 	call	0x55e	; 0x55e <main>
  e2:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	8e e9       	ldi	r24, 0x9E	; 158
  ee:	94 e2       	ldi	r25, 0x24	; 36
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <AVR_Init+0x6>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <AVR_Init+0x10>
  fa:	00 00       	nop
** - Initializes the I/O peripherals
*************************************************************************************/
void AVR_Init(void)
{
	_delay_ms(750);		//Short pause after BNO055 Power-On Reset(Mandatory)
	DDRD |= _BV(1);		//Set TX as output
  fc:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));	//Set RX as input
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	08 95       	ret

00000102 <UART_Init>:
** - Set the USART mode(Synchronous/Asynchronous/Asynchronous 2x)
** - Enable Receiver & Transmitter(Set RXEN & TXEN bits in UCSRB register)
*************************************************************************************/
void UART_Init(void)
{
	DDRD |= _BV(1);		//Set TX as output
 102:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));	//Set RX as input
 104:	50 98       	cbi	0x0a, 0	; 10

	//Set the BAUD rate(Ref. ATmega32U4 Datasheet Pg.189, Table 18-1)
	//To hard-code the Baud rate, Ref. Tables 18-9 to 18-12 in Pgs. 210 - 213
	UBRR1 = ((F_CPU / (16UL * BAUD)) - 1);
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	//Disables 2x speed
	UCSR1A &= ~(_BV(U2X1));
 112:	e8 ec       	ldi	r30, 0xC8	; 200
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	80 83       	st	Z, r24
	
	//Enable 8-bit character size, one stop-bit, no parity & asynchronous mode
	UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
 11c:	ea ec       	ldi	r30, 0xCA	; 202
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	86 60       	ori	r24, 0x06	; 6
 124:	80 83       	st	Z, r24
	
	//Enable Transmitter & Receiver
	UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
 126:	e9 ec       	ldi	r30, 0xC9	; 201
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 61       	ori	r24, 0x18	; 24
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <UART_Tx>:
** - Transmits the ADC data via the USB Serial
** - The data is received & displayed in a Hyperterminal
*************************************************************************************/
void UART_Tx(unsigned char data)
{
	loop_until_bit_is_set(UCSR1A, UDRE1);	//Wait until buffer is empty
 132:	e8 ec       	ldi	r30, 0xC8	; 200
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	95 ff       	sbrs	r25, 5
 13a:	fd cf       	rjmp	.-6      	; 0x136 <UART_Tx+0x4>
	UDR1 = data;				//Send data	
 13c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 140:	08 95       	ret

00000142 <Init_SPI>:
}

void Init_SPI()
{
	//Set the output pin(s) for SPI
	DDRB |= _BV(CE);	//CE
 142:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(CSN);	//CSN
 144:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(MOSI);  	//MOSI
 146:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= _BV(SCLK);  	//SCLK
 148:	21 9a       	sbi	0x04, 1	; 4

	//Set the input pin(s) for SPI
	DDRB &= ~_BV(MISO); 	//MISO
 14a:	23 98       	cbi	0x04, 3	; 4

	
	SPCR |= ((1 << SPE) | (1 << MSTR) | (1 << SPR0));	//Enable SPI as master
 14c:	8c b5       	in	r24, 0x2c	; 44
 14e:	81 65       	ori	r24, 0x51	; 81
 150:	8c bd       	out	0x2c, r24	; 44
	SPCR &= (~_BV(SPI2X) & ~_BV(SPR1)); 		   	//Set clock rate but not too important
 152:	8c b5       	in	r24, 0x2c	; 44
 154:	8c 7f       	andi	r24, 0xFC	; 252
 156:	8c bd       	out	0x2c, r24	; 44
	
	PORTB |= _BV(CSN);	//CSN high
 158:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~_BV(CE);	//CE low
 15a:	2c 98       	cbi	0x05, 4	; 5
 15c:	08 95       	ret

0000015e <spi_tranceiver>:
}

unsigned char spi_tranceiver(unsigned char data)
{
	// Load data into the buffer
	SPDR = data;
 15e:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1 << SPIF)));   
 160:	0d b4       	in	r0, 0x2d	; 45
 162:	07 fe       	sbrs	r0, 7
 164:	fd cf       	rjmp	.-6      	; 0x160 <spi_tranceiver+0x2>

	//Return received data
	return(SPDR);
 166:	8e b5       	in	r24, 0x2e	; 46
}
 168:	08 95       	ret

0000016a <Read_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	95 e3       	ldi	r25, 0x35	; 53
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <Read_Byte+0x2>
 170:	00 00       	nop

unsigned char Read_Byte(unsigned char reg)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 172:	28 98       	cbi	0x05, 0	; 5
 174:	95 e3       	ldi	r25, 0x35	; 53
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <Read_Byte+0xc>
 17a:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(R_REGISTER + reg);
 17c:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 180:	85 e3       	ldi	r24, 0x35	; 53
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <Read_Byte+0x18>
 186:	00 00       	nop
	_delay_us(10);
	reg = spi_tranceiver(NOP);
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 18e:	95 e3       	ldi	r25, 0x35	; 53
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <Read_Byte+0x26>
 194:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 196:	28 9a       	sbi	0x05, 0	; 5
	return reg;
}
 198:	08 95       	ret

0000019a <Write_byte>:

void Write_byte(unsigned char reg, unsigned char data)
{
 19a:	cf 93       	push	r28
 19c:	c6 2f       	mov	r28, r22
 19e:	95 e3       	ldi	r25, 0x35	; 53
 1a0:	9a 95       	dec	r25
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <Write_byte+0x6>
 1a4:	00 00       	nop
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 1a6:	28 98       	cbi	0x05, 0	; 5
 1a8:	95 e3       	ldi	r25, 0x35	; 53
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <Write_byte+0x10>
 1ae:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(W_REGISTER + reg);
 1b0:	80 5e       	subi	r24, 0xE0	; 224
 1b2:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 1b6:	85 e3       	ldi	r24, 0x35	; 53
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Write_byte+0x1e>
 1bc:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(data);
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 1c4:	95 e3       	ldi	r25, 0x35	; 53
 1c6:	9a 95       	dec	r25
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Write_byte+0x2c>
 1ca:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 1cc:	28 9a       	sbi	0x05, 0	; 5
}
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <Flush_tx>:
 1d2:	85 e3       	ldi	r24, 0x35	; 53
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <Flush_tx+0x2>
 1d8:	00 00       	nop
}

void Flush_tx(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 1da:	28 98       	cbi	0x05, 0	; 5
 1dc:	85 e3       	ldi	r24, 0x35	; 53
 1de:	8a 95       	dec	r24
 1e0:	f1 f7       	brne	.-4      	; 0x1de <Flush_tx+0xc>
 1e2:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(FLUSH_TX);
 1e4:	81 ee       	ldi	r24, 0xE1	; 225
 1e6:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 1ea:	85 e3       	ldi	r24, 0x35	; 53
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <Flush_tx+0x1a>
 1f0:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 1f2:	28 9a       	sbi	0x05, 0	; 5
 1f4:	85 e3       	ldi	r24, 0x35	; 53
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Flush_tx+0x24>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <nRF_TX_mode>:
}
*/

void nRF_TX_mode(void)
{
	PORTB &= ~_BV(CE);						 //CE low - Standby-I
 1fe:	2c 98       	cbi	0x05, 4	; 5
//	Write_byte(CONFIG, Read_Byte(CONFIG) & ~(1 << PWR_UP));		 //Power-down mode
//	_delay_ms(1);							 
	//Power-up and set as TX
	Write_byte(CONFIG, Read_Byte(CONFIG) & ~(1 << PRIM_RX));
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 b5 00 	call	0x16a	; 0x16a <Read_Byte>
 206:	68 2f       	mov	r22, r24
 208:	6e 7f       	andi	r22, 0xFE	; 254
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	Write_byte(CONFIG, Read_Byte(CONFIG) | (1 << PWR_UP));
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 b5 00 	call	0x16a	; 0x16a <Read_Byte>
 216:	68 2f       	mov	r22, r24
 218:	62 60       	ori	r22, 0x02	; 2
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
//	_delay_ms(1);
	Flush_tx();							 //Flush TX FIFO
 220:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Flush_tx>
	Write_byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 224:	60 e7       	ldi	r22, 0x70	; 112
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	//Mask TX_DR and MAX_RT interrupts
	Write_byte(CONFIG, Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 b5 00 	call	0x16a	; 0x16a <Read_Byte>
 232:	68 2f       	mov	r22, r24
 234:	60 63       	ori	r22, 0x30	; 48
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
 23c:	87 e5       	ldi	r24, 0x57	; 87
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <nRF_TX_mode+0x42>
 244:	00 c0       	rjmp	.+0      	; 0x246 <nRF_TX_mode+0x48>
 246:	00 00       	nop
 248:	08 95       	ret

0000024a <Init_nrf>:
}

void Init_nrf(void)
{
	//Enable auto-acknowledgment for data pipe 0
	Write_byte(EN_AA, 0x01);
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	
	//Enable data pipe 0
	Write_byte(EN_RXADDR, 0x01);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>

	//Set address width to 5 bytes
	Write_byte(SETUP_AW, 0x03);
 25a:	63 e0       	ldi	r22, 0x03	; 3
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	
	//Set channel frequency to 2.505GHz
	Write_byte(RF_CH, 0x69);
 262:	69 e6       	ldi	r22, 0x69	; 105
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	
	//Set data rate to 2Mbps and 0dB gain
	Write_byte(RF_SETUP, 0x0E);
 26a:	6e e0       	ldi	r22, 0x0E	; 14
 26c:	86 e0       	ldi	r24, 0x06	; 6
 26e:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
 272:	85 e3       	ldi	r24, 0x35	; 53
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <Init_nrf+0x2a>
 278:	00 00       	nop
	//Enable W_TX_PAYLOAD_NOACK command
//	Write_byte(FEATURE, 0x01);
	
	//Set the 5-bytes receiver address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 27a:	28 98       	cbi	0x05, 0	; 5
 27c:	95 e3       	ldi	r25, 0x35	; 53
 27e:	9a 95       	dec	r25
 280:	f1 f7       	brne	.-4      	; 0x27e <Init_nrf+0x34>
 282:	00 00       	nop
	_delay_us(10);
	//Setup p0 pipe address for receiving
	spi_tranceiver(W_REGISTER + RX_ADDR_P0);
 284:	8a e2       	ldi	r24, 0x2A	; 42
 286:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 28a:	85 e3       	ldi	r24, 0x35	; 53
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <Init_nrf+0x42>
 290:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x11);
 292:	81 e1       	ldi	r24, 0x11	; 17
 294:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 298:	95 e3       	ldi	r25, 0x35	; 53
 29a:	9a 95       	dec	r25
 29c:	f1 f7       	brne	.-4      	; 0x29a <Init_nrf+0x50>
 29e:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x12);
 2a0:	82 e1       	ldi	r24, 0x12	; 18
 2a2:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2a6:	85 e3       	ldi	r24, 0x35	; 53
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Init_nrf+0x5e>
 2ac:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x13);
 2ae:	83 e1       	ldi	r24, 0x13	; 19
 2b0:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2b4:	95 e3       	ldi	r25, 0x35	; 53
 2b6:	9a 95       	dec	r25
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Init_nrf+0x6c>
 2ba:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x14);
 2bc:	84 e1       	ldi	r24, 0x14	; 20
 2be:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2c2:	85 e3       	ldi	r24, 0x35	; 53
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <Init_nrf+0x7a>
 2c8:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x15);
 2ca:	85 e1       	ldi	r24, 0x15	; 21
 2cc:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2d0:	95 e3       	ldi	r25, 0x35	; 53
 2d2:	9a 95       	dec	r25
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <Init_nrf+0x88>
 2d6:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2d8:	28 9a       	sbi	0x05, 0	; 5
 2da:	85 e3       	ldi	r24, 0x35	; 53
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <Init_nrf+0x92>
 2e0:	00 00       	nop
	
	//Set the 5-bytes transmitter address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 2e2:	28 98       	cbi	0x05, 0	; 5
 2e4:	95 e3       	ldi	r25, 0x35	; 53
 2e6:	9a 95       	dec	r25
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <Init_nrf+0x9c>
 2ea:	00 00       	nop
	_delay_us(10);
	//Setup the transmitter address
	spi_tranceiver(W_REGISTER + TX_ADDR);
 2ec:	80 e3       	ldi	r24, 0x30	; 48
 2ee:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 2f2:	85 e3       	ldi	r24, 0x35	; 53
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Init_nrf+0xaa>
 2f8:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xAA);
 2fa:	8a ea       	ldi	r24, 0xAA	; 170
 2fc:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 300:	95 e3       	ldi	r25, 0x35	; 53
 302:	9a 95       	dec	r25
 304:	f1 f7       	brne	.-4      	; 0x302 <Init_nrf+0xb8>
 306:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xBB);
 308:	8b eb       	ldi	r24, 0xBB	; 187
 30a:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 30e:	85 e3       	ldi	r24, 0x35	; 53
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <Init_nrf+0xc6>
 314:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xCC);
 316:	8c ec       	ldi	r24, 0xCC	; 204
 318:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 31c:	95 e3       	ldi	r25, 0x35	; 53
 31e:	9a 95       	dec	r25
 320:	f1 f7       	brne	.-4      	; 0x31e <Init_nrf+0xd4>
 322:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xDD);
 324:	8d ed       	ldi	r24, 0xDD	; 221
 326:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 32a:	85 e3       	ldi	r24, 0x35	; 53
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <Init_nrf+0xe2>
 330:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0xEE);
 332:	8e ee       	ldi	r24, 0xEE	; 238
 334:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 338:	95 e3       	ldi	r25, 0x35	; 53
 33a:	9a 95       	dec	r25
 33c:	f1 f7       	brne	.-4      	; 0x33a <Init_nrf+0xf0>
 33e:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 340:	28 9a       	sbi	0x05, 0	; 5
	
	//Set the payload width as 8-bytes
	Write_byte(RX_PW_P0, 0x08);
 342:	68 e0       	ldi	r22, 0x08	; 8
 344:	81 e1       	ldi	r24, 0x11	; 17
 346:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	
	//Set the retransmission delay to 750us with 15 retries
	Write_byte(SETUP_RETR, 0x2F);
 34a:	6f e2       	ldi	r22, 0x2F	; 47
 34c:	84 e0       	ldi	r24, 0x04	; 4
 34e:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	
	//Boot the nrf as TX and mask the maximum retransmission interrupt(disable)
	//Enable CRC and set the length to 2-bytes
	nRF_TX_mode();
 352:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF_TX_mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9c e9       	ldi	r25, 0x9C	; 156
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <Init_nrf+0x110>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <Init_nrf+0x116>
 360:	00 00       	nop
 362:	08 95       	ret

00000364 <Flush_rx>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	85 e3       	ldi	r24, 0x35	; 53
 366:	8a 95       	dec	r24
 368:	f1 f7       	brne	.-4      	; 0x366 <Flush_rx+0x2>
 36a:	00 00       	nop
}

void Flush_rx(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);
 36c:	28 98       	cbi	0x05, 0	; 5
 36e:	85 e3       	ldi	r24, 0x35	; 53
 370:	8a 95       	dec	r24
 372:	f1 f7       	brne	.-4      	; 0x370 <Flush_rx+0xc>
 374:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(FLUSH_RX);
 376:	82 ee       	ldi	r24, 0xE2	; 226
 378:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 37c:	85 e3       	ldi	r24, 0x35	; 53
 37e:	8a 95       	dec	r24
 380:	f1 f7       	brne	.-4      	; 0x37e <Flush_rx+0x1a>
 382:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);
 384:	28 9a       	sbi	0x05, 0	; 5
 386:	85 e3       	ldi	r24, 0x35	; 53
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <Flush_rx+0x24>
 38c:	00 00       	nop
 38e:	08 95       	ret

00000390 <nRF_RX_mode>:
	_delay_us(150);
}

void nRF_RX_mode(void)
{
	PORTB &= ~_BV(CE); 						 //CE low - Standby-I
 390:	2c 98       	cbi	0x05, 4	; 5
//	Write_byte(CONFIG, Read_Byte(CONFIG) & ~(1 << PWR_UP));		 //Power-down mode
//	_delay_ms(1);	
	//Power-up as set as RX
	Write_byte(CONFIG, Read_Byte(CONFIG) | (1 << PWR_UP) | (1 << PRIM_RX));
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 b5 00 	call	0x16a	; 0x16a <Read_Byte>
 398:	68 2f       	mov	r22, r24
 39a:	63 60       	ori	r22, 0x03	; 3
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
//	_delay_ms(1);
	Flush_rx();							 //Flush RX FIFO
 3a2:	0e 94 b2 01 	call	0x364	; 0x364 <Flush_rx>
	Write_byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 3a6:	60 e7       	ldi	r22, 0x70	; 112
 3a8:	87 e0       	ldi	r24, 0x07	; 7
 3aa:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	//Mask TX_DR and MAX_RT interrupts
	//Mask TX_DR and MAX_RT interrupts
	Write_byte(CONFIG, Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 b5 00 	call	0x16a	; 0x16a <Read_Byte>
 3b4:	68 2f       	mov	r22, r24
 3b6:	60 63       	ori	r22, 0x30	; 48
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	PORTB |= _BV(CE);  						 //CE high
 3be:	2c 9a       	sbi	0x05, 4	; 5
 3c0:	87 e5       	ldi	r24, 0x57	; 87
 3c2:	92 e0       	ldi	r25, 0x02	; 2
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <nRF_RX_mode+0x34>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <nRF_RX_mode+0x3a>
 3ca:	00 00       	nop
 3cc:	08 95       	ret

000003ce <Payload_TX>:
	PORTB |= _BV(CSN);
	_delay_us(10);
}

void Payload_TX(uint8_t* data, uint8_t len)
{
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
	uint8_t i;
	
	for(i = 0; i < len; i++)
 3d6:	66 23       	and	r22, r22
 3d8:	69 f0       	breq	.+26     	; 0x3f4 <Payload_TX+0x26>
 3da:	c0 e0       	ldi	r28, 0x00	; 0
 3dc:	d1 e0       	ldi	r29, 0x01	; 1
 3de:	61 50       	subi	r22, 0x01	; 1
 3e0:	06 2f       	mov	r16, r22
 3e2:	10 e0       	ldi	r17, 0x00	; 0
 3e4:	0f 5f       	subi	r16, 0xFF	; 255
 3e6:	1e 4f       	sbci	r17, 0xFE	; 254
	{
		spi_tranceiver(BS_payload_TX[i]);
 3e8:	89 91       	ld	r24, Y+
 3ea:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>

void Payload_TX(uint8_t* data, uint8_t len)
{
	uint8_t i;
	
	for(i = 0; i < len; i++)
 3ee:	c0 17       	cp	r28, r16
 3f0:	d1 07       	cpc	r29, r17
 3f2:	d1 f7       	brne	.-12     	; 0x3e8 <Payload_TX+0x1a>
	{
		spi_tranceiver(BS_payload_TX[i]);
	}
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <transmit_data>:

void transmit_data(unsigned char *tdata)
{
	Flush_tx();
 3fe:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Flush_tx>
	PORTB &= ~_BV(CSN); //CSN low
 402:	28 98       	cbi	0x05, 0	; 5
 404:	85 e3       	ldi	r24, 0x35	; 53
 406:	8a 95       	dec	r24
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40a:	00 00       	nop
	_delay_us(10);
	//Transmit payload with ACK enabled
	spi_tranceiver(W_TX_PAYLOAD);
 40c:	80 ea       	ldi	r24, 0xA0	; 160
 40e:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 412:	85 e3       	ldi	r24, 0x35	; 53
 414:	8a 95       	dec	r24
 416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 418:	00 00       	nop
	_delay_us(10);
	Payload_TX(BS_payload_TX, PAYLOAD_LEN);
 41a:	68 e0       	ldi	r22, 0x08	; 8
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Payload_TX>
 424:	85 e3       	ldi	r24, 0x35	; 53
 426:	8a 95       	dec	r24
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);  //CSN high
 42c:	28 9a       	sbi	0x05, 0	; 5
 42e:	85 e3       	ldi	r24, 0x35	; 53
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 00       	nop
	_delay_us(10);      //Need at least 10us before sending
	PORTB |= _BV(CE);   //CE high
 436:	2c 9a       	sbi	0x05, 4	; 5
 438:	85 e3       	ldi	r24, 0x35	; 53
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43e:	00 00       	nop
	_delay_us(10);      //Hold CE high for at least 10us and not longer than 4ms
	PORTB &= ~_BV(CE);  //CE low
 440:	2c 98       	cbi	0x05, 4	; 5
 442:	08 95       	ret

00000444 <nrf24_getStatus>:
}

uint8_t nrf24_getStatus()
{
	uint8_t rv;
	PORTB &= ~_BV(CSN); //CSN low
 444:	28 98       	cbi	0x05, 0	; 5
	rv = spi_tranceiver(NOP);
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
	PORTB |= _BV(CSN);  //CSN high
 44c:	28 9a       	sbi	0x05, 0	; 5
	return rv;
}
 44e:	08 95       	ret

00000450 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
 450:	0e 94 22 02 	call	0x444	; 0x444 <nrf24_getStatus>
 454:	98 2f       	mov	r25, r24
 456:	90 73       	andi	r25, 0x30	; 48
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	09 f0       	breq	.+2      	; 0x45e <nrf24_isSending+0xe>
 45c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0; /* false */
	}

	return 1; /* true */
}
 45e:	08 95       	ret

00000460 <Init_INT6>:

void Init_INT6(void)
{
	EICRB &= ~(1 << ISC60) | (1 << ISC61);	//INT6 active when low
 460:	ea e6       	ldi	r30, 0x6A	; 106
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	8f 7e       	andi	r24, 0xEF	; 239
 468:	80 83       	st	Z, r24
	EIMSK |= (1 << INT6);			//Enable INT6
 46a:	ee 9a       	sbi	0x1d, 6	; 29
	sei();					//Enable global interrupts
 46c:	78 94       	sei
 46e:	08 95       	ret

00000470 <Payload_RX>:
	mode = 0;	    //Set as TX
}

/* send and receive multiple bytes over SPI */
void Payload_RX(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
	uint8_t i;

	for(i = 0; i < len; i++)
 47c:	44 23       	and	r20, r20
 47e:	b1 f0       	breq	.+44     	; 0x4ac <Payload_RX+0x3c>
 480:	ec 01       	movw	r28, r24
 482:	06 2f       	mov	r16, r22
 484:	17 2f       	mov	r17, r23
 486:	41 50       	subi	r20, 0x01	; 1
 488:	e4 2e       	mov	r14, r20
 48a:	f1 2c       	mov	r15, r1
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	e2 1a       	sub	r14, r18
 490:	f2 0a       	sbc	r15, r18
 492:	e8 0e       	add	r14, r24
 494:	f9 1e       	adc	r15, r25
	{
		data_in[i] = spi_tranceiver(data_out[i]);
 496:	89 91       	ld	r24, Y+
 498:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 49c:	f8 01       	movw	r30, r16
 49e:	81 93       	st	Z+, r24
 4a0:	8f 01       	movw	r16, r30
		UART_Tx(data_in[i]);   //Send the received data to UART
 4a2:	0e 94 99 00 	call	0x132	; 0x132 <UART_Tx>
/* send and receive multiple bytes over SPI */
void Payload_RX(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
	uint8_t i;

	for(i = 0; i < len; i++)
 4a6:	ce 15       	cp	r28, r14
 4a8:	df 05       	cpc	r29, r15
 4aa:	a9 f7       	brne	.-22     	; 0x496 <Payload_RX+0x26>
	{
		data_in[i] = spi_tranceiver(data_out[i]);
		UART_Tx(data_in[i]);   //Send the received data to UART
	}
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	08 95       	ret

000004ba <__vector_7>:
	EIMSK |= (1 << INT6);			//Enable INT6
	sei();					//Enable global interrupts
}

ISR(INT6_vect)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	4f 93       	push	r20
 4ca:	5f 93       	push	r21
 4cc:	6f 93       	push	r22
 4ce:	7f 93       	push	r23
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
	cli();					//Disable global interrupt
 4dc:	f8 94       	cli
	
	PORTB &= ~_BV(CE); 			//Stop listening
 4de:	2c 98       	cbi	0x05, 4	; 5
	// Pull down chip select 
	PORTB &= ~_BV(CSN); //CSN low
 4e0:	28 98       	cbi	0x05, 0	; 5
 4e2:	85 e3       	ldi	r24, 0x35	; 53
 4e4:	8a 95       	dec	r24
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__vector_7+0x2a>
 4e8:	00 00       	nop
	_delay_us(10);
	// Send command to read RX payload 
	spi_tranceiver(R_RX_PAYLOAD);
 4ea:	81 e6       	ldi	r24, 0x61	; 97
 4ec:	0e 94 af 00 	call	0x15e	; 0x15e <spi_tranceiver>
 4f0:	85 e3       	ldi	r24, 0x35	; 53
 4f2:	8a 95       	dec	r24
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__vector_7+0x38>
 4f6:	00 00       	nop
	_delay_us(10);
	// Read payload 
	Payload_RX(BS_payload_RX, BS_payload_RX, PAYLOAD_LEN);
 4f8:	48 e0       	ldi	r20, 0x08	; 8
 4fa:	69 e0       	ldi	r22, 0x09	; 9
 4fc:	71 e0       	ldi	r23, 0x01	; 1
 4fe:	cb 01       	movw	r24, r22
 500:	0e 94 38 02 	call	0x470	; 0x470 <Payload_RX>
 504:	85 e3       	ldi	r24, 0x35	; 53
 506:	8a 95       	dec	r24
 508:	f1 f7       	brne	.-4      	; 0x506 <__vector_7+0x4c>
 50a:	00 00       	nop
	_delay_us(10);
	// Pull up chip select
	PORTB |= _BV(CSN);  //CSN high
 50c:	28 9a       	sbi	0x05, 0	; 5
 50e:	85 e3       	ldi	r24, 0x35	; 53
 510:	8a 95       	dec	r24
 512:	f1 f7       	brne	.-4      	; 0x510 <__vector_7+0x56>
 514:	00 00       	nop
	_delay_us(10);
	// Reset status register 
	Write_byte(STATUS, (1 << RX_DR));
 516:	60 e4       	ldi	r22, 0x40	; 64
 518:	87 e0       	ldi	r24, 0x07	; 7
 51a:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
	mode = 0;	    //Set as TX
 51e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
}
 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	7f 91       	pop	r23
 530:	6f 91       	pop	r22
 532:	5f 91       	pop	r21
 534:	4f 91       	pop	r20
 536:	3f 91       	pop	r19
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <reset>:
 544:	85 e3       	ldi	r24, 0x35	; 53
 546:	8a 95       	dec	r24
 548:	f1 f7       	brne	.-4      	; 0x546 <reset+0x2>
 54a:	00 00       	nop

void reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
    	Write_byte(STATUS, 0x70);   
 54c:	60 e7       	ldi	r22, 0x70	; 112
 54e:	87 e0       	ldi	r24, 0x07	; 7
 550:	0e 94 cd 00 	call	0x19a	; 0x19a <Write_byte>
 554:	85 e3       	ldi	r24, 0x35	; 53
 556:	8a 95       	dec	r24
 558:	f1 f7       	brne	.-4      	; 0x556 <reset+0x12>
 55a:	00 00       	nop
 55c:	08 95       	ret

0000055e <main>:
	_delay_us(10);
}

int main(void)
{
	AVR_Init();
 55e:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	Init_SPI();
 562:	0e 94 a1 00 	call	0x142	; 0x142 <Init_SPI>
	Init_nrf();
 566:	0e 94 25 01 	call	0x24a	; 0x24a <Init_nrf>
	UART_Init();
 56a:	0e 94 81 00 	call	0x102	; 0x102 <UART_Init>
	Init_INT6();
 56e:	0e 94 30 02 	call	0x460	; 0x460 <Init_INT6>
	
	//0 - TX; 1 - RX
	mode = 0;
 572:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	
	//Disable Interrupt initially
	cli();
 576:	f8 94       	cli
			reset();
*/
//			UART_Tx(0x66);   	//Send BP2 to UART
		
			//Configure as Receiver
			mode = 1;		//Set as RX
 578:	c1 e0       	ldi	r28, 0x01	; 1
	cli();

	//Endless Loop
	while(1)
	{
		if(mode == 0) //TX
 57a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 57e:	81 11       	cpse	r24, r1
 580:	fc cf       	rjmp	.-8      	; 0x57a <main+0x1c>
		{
			//Configure as Transmitter
			nRF_TX_mode();
 582:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF_TX_mode>
		
//			UART_Tx(0x55);   	//Send BP1 to UART
		
			transmit_data(BS_payload_TX);
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <transmit_data>
			while(nrf24_isSending());
 58e:	0e 94 28 02 	call	0x450	; 0x450 <nrf24_isSending>
 592:	81 11       	cpse	r24, r1
 594:	fc cf       	rjmp	.-8      	; 0x58e <main+0x30>
			reset();
 596:	0e 94 a2 02 	call	0x544	; 0x544 <reset>
			reset();
*/
//			UART_Tx(0x66);   	//Send BP2 to UART
		
			//Configure as Receiver
			mode = 1;		//Set as RX
 59a:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <__data_end>
			nRF_RX_mode();
 59e:	0e 94 c8 01 	call	0x390	; 0x390 <nRF_RX_mode>
			PORTB |= _BV(CE);	//Start listening again	
 5a2:	2c 9a       	sbi	0x05, 4	; 5
			sei();		
 5a4:	78 94       	sei
 5a6:	e9 cf       	rjmp	.-46     	; 0x57a <main+0x1c>

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>

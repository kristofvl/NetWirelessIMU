
Test_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  0000090a  0000099e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080018e  0080018e  00000a2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d76  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d78  00000000  00000000  000028d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a65  00000000  00000000  0000364a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000040b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085d  00000000  00000000  000042a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d3  00000000  00000000  00004afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000053d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e0       	ldi	r30, 0x0A	; 10
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 38       	cpi	r26, 0x8E	; 142
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	ae e8       	ldi	r26, 0x8E	; 142
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a7 3d       	cpi	r26, 0xD7	; 215
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <main>
  e2:	0c 94 83 04 	jmp	0x906	; 0x906 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
	UART_Put_String("MAG: ");
	Mag_Calib = (Cal_Stat_Data & 0x03);
	itoa(Mag_Calib, String_Data, 10);			//Convert integer to string, radix=10
	UART_Put_String(String_Data);
	UART_Put_String("\n");
}
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	51 9a       	sbi	0x0a, 1	; 10
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	3e 9a       	sbi	0x07, 6	; 7
 102:	3f 9a       	sbi	0x07, 7	; 7
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	46 98       	cbi	0x08, 6	; 8
 10a:	47 9a       	sbi	0x08, 7	; 8
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	30 e7       	ldi	r19, 0x70	; 112
 110:	42 e0       	ldi	r20, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <AVR_Init+0x28>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <AVR_Init+0x32>
 11c:	00 00       	nop
 11e:	46 9a       	sbi	0x08, 6	; 8
 120:	47 98       	cbi	0x08, 7	; 8
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	30 e7       	ldi	r19, 0x70	; 112
 126:	42 e0       	ldi	r20, 0x02	; 2
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <AVR_Init+0x3e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <AVR_Init+0x48>
 132:	00 00       	nop
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	41 f7       	brne	.-48     	; 0x108 <AVR_Init+0x1e>
 138:	46 98       	cbi	0x08, 6	; 8
 13a:	47 98       	cbi	0x08, 7	; 8
 13c:	8f e7       	ldi	r24, 0x7F	; 127
 13e:	9f e4       	ldi	r25, 0x4F	; 79
 140:	22 e1       	ldi	r18, 0x12	; 18
 142:	81 50       	subi	r24, 0x01	; 1
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <AVR_Init+0x58>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <AVR_Init+0x62>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <UART_Init>:
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 158:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 15c:	e8 ec       	ldi	r30, 0xC8	; 200
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	80 83       	st	Z, r24
 166:	ea ec       	ldi	r30, 0xCA	; 202
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	86 60       	ori	r24, 0x06	; 6
 16e:	80 83       	st	Z, r24
 170:	e9 ec       	ldi	r30, 0xC9	; 201
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 61       	ori	r24, 0x18	; 24
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <UART_Tx>:
 17c:	e8 ec       	ldi	r30, 0xC8	; 200
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	95 ff       	sbrs	r25, 5
 184:	fd cf       	rjmp	.-6      	; 0x180 <UART_Tx+0x4>
 186:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 18a:	08 95       	ret

0000018c <UART_Put_String>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	31 f0       	breq	.+12     	; 0x1a4 <UART_Put_String+0x18>
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	0e 94 be 00 	call	0x17c	; 0x17c <UART_Tx>
 19e:	89 91       	ld	r24, Y+
 1a0:	81 11       	cpse	r24, r1
 1a2:	fb cf       	rjmp	.-10     	; 0x19a <UART_Put_String+0xe>
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <BNO_Init>:
 1aa:	cf 93       	push	r28
 1ac:	80 e5       	ldi	r24, 0x50	; 80
 1ae:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_start_wait>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <i2c_write>
 1b8:	81 e5       	ldi	r24, 0x51	; 81
 1ba:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <i2c_rep_start>
 1be:	0e 94 12 03 	call	0x624	; 0x624 <i2c_readNak>
 1c2:	c8 2f       	mov	r28, r24
 1c4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <i2c_stop>
 1c8:	c0 3a       	cpi	r28, 0xA0	; 160
 1ca:	29 f0       	breq	.+10     	; 0x1d6 <BNO_Init+0x2c>
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <BNO_Init+0x3a>
 1d6:	8a e1       	ldi	r24, 0x1A	; 26
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
 1de:	80 ea       	ldi	r24, 0xA0	; 160
 1e0:	0e 94 be 00 	call	0x17c	; 0x17c <UART_Tx>
 1e4:	80 e5       	ldi	r24, 0x50	; 80
 1e6:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_start_wait>
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	0e 94 f5 02 	call	0x5ea	; 0x5ea <i2c_write>
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <i2c_write>
 1f6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <i2c_stop>
 1fa:	2f e7       	ldi	r18, 0x7F	; 127
 1fc:	8f e4       	ldi	r24, 0x4F	; 79
 1fe:	92 e1       	ldi	r25, 0x12	; 18
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <BNO_Init+0x56>
 208:	00 c0       	rjmp	.+0      	; 0x20a <BNO_Init+0x60>
 20a:	00 00       	nop
 20c:	80 e5       	ldi	r24, 0x50	; 80
 20e:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_start_wait>
 212:	8d e3       	ldi	r24, 0x3D	; 61
 214:	0e 94 f5 02 	call	0x5ea	; 0x5ea <i2c_write>
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <i2c_write>
 21e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <i2c_stop>
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	80 e7       	ldi	r24, 0x70	; 112
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <BNO_Init+0x7e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <BNO_Init+0x88>
 232:	00 00       	nop
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <BNO_get_Mag_Data>:

void BNO_get_Mag_Data(void)
{
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	e0 97       	sbiw	r28, 0x30	; 48
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
	//Store the Mag float values as string
	char Mag_X_String[16];
	char Mag_Y_String[16];
	char Mag_Z_String[16];
	
	i2c_start_wait(BNO055_ADDRESS + I2C_WRITE);	//Set device address and read mode
 25a:	80 e5       	ldi	r24, 0x50	; 80
 25c:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_start_wait>
	i2c_write(BNO055_MAG_DATA_X_LSB_ADDR);		//Access LSB of Magnetometer X-axis reading
 260:	8e e0       	ldi	r24, 0x0E	; 14
 262:	0e 94 f5 02 	call	0x5ea	; 0x5ea <i2c_write>
	i2c_rep_start(BNO055_ADDRESS + I2C_READ);	//Set device address and read mode
 266:	81 e5       	ldi	r24, 0x51	; 81
 268:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <i2c_rep_start>
	uint8_t Mag_X_LSB = i2c_readAck();		//Read Mag_X LSB
 26c:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 270:	d8 2e       	mov	r13, r24
	uint8_t Mag_X_MSB = i2c_readAck();		//Read Mag_X MSB
 272:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 276:	c8 2e       	mov	r12, r24
	uint8_t Mag_Y_LSB = i2c_readAck();		//Read Mag_Y LSB
 278:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 27c:	e8 2e       	mov	r14, r24
	uint8_t Mag_Y_MSB = i2c_readAck();		//Read Mag_Y MSB
 27e:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 282:	18 2f       	mov	r17, r24
	uint8_t Mag_Z_LSB = i2c_readAck();		//Read Mag_Z LSB
 284:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 288:	08 2f       	mov	r16, r24
	uint8_t Mag_Z_MSB = i2c_readNak();		//Read Mag_Z MSB
 28a:	0e 94 12 03 	call	0x624	; 0x624 <i2c_readNak>
 28e:	b8 2e       	mov	r11, r24
	i2c_stop();
 290:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <i2c_stop>

	//Combine the raw Mag bytes to word
	int16_t Mag_X_Raw = (Mag_X_MSB << 8) | (Mag_X_LSB);
	int16_t Mag_Y_Raw = (Mag_Y_MSB << 8) | (Mag_Y_LSB);
 294:	f1 2c       	mov	r15, r1
 296:	f1 2a       	or	r15, r17
	int16_t Mag_Z_Raw = (Mag_Z_MSB << 8) | (Mag_Z_LSB);
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	1b 29       	or	r17, r11
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 29c:	8d 2d       	mov	r24, r13
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	be 01       	movw	r22, r28
 2a4:	6f 5f       	subi	r22, 0xFF	; 255
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	9c 29       	or	r25, r12
 2aa:	0e 94 4e 04 	call	0x89c	; 0x89c <__itoa_ncheck>
 2ae:	4a e0       	ldi	r20, 0x0A	; 10
 2b0:	be 01       	movw	r22, r28
 2b2:	6f 5e       	subi	r22, 0xEF	; 239
 2b4:	7f 4f       	sbci	r23, 0xFF	; 255
 2b6:	c7 01       	movw	r24, r14
 2b8:	0e 94 4e 04 	call	0x89c	; 0x89c <__itoa_ncheck>
 2bc:	4a e0       	ldi	r20, 0x0A	; 10
 2be:	be 01       	movw	r22, r28
 2c0:	6f 5d       	subi	r22, 0xDF	; 223
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	c8 01       	movw	r24, r16
 2c6:	0e 94 4e 04 	call	0x89c	; 0x89c <__itoa_ncheck>
	itoa(Mag_X_Raw, Mag_X_String, 10);
	itoa(Mag_Y_Raw, Mag_Y_String, 10);
	itoa(Mag_Z_Raw, Mag_Z_String, 10);

	//Send the Euler angles via UART
	UART_Put_String("MX: ");
 2ca:	8a e5       	ldi	r24, 0x5A	; 90
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(Mag_X_String);
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(" MY: ");
 2da:	8f e5       	ldi	r24, 0x5F	; 95
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(Mag_Y_String);
 2e2:	ce 01       	movw	r24, r28
 2e4:	41 96       	adiw	r24, 0x11	; 17
 2e6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(" MZ: ");
 2ea:	85 e6       	ldi	r24, 0x65	; 101
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(Mag_Z_String);
 2f2:	ce 01       	movw	r24, r28
 2f4:	81 96       	adiw	r24, 0x21	; 33
 2f6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String("  ");
 2fa:	8b e6       	ldi	r24, 0x6B	; 107
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
}
 302:	e0 96       	adiw	r28, 0x30	; 48
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	08 95       	ret

00000322 <BNO_get_Euler>:

void BNO_get_Euler(void)
{
 322:	8f 92       	push	r8
 324:	9f 92       	push	r9
 326:	af 92       	push	r10
 328:	bf 92       	push	r11
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
	i2c_start_wait(BNO055_ADDRESS + I2C_WRITE);	//Set device address and read mode
 33a:	80 e5       	ldi	r24, 0x50	; 80
 33c:	0e 94 c1 02 	call	0x582	; 0x582 <i2c_start_wait>
	i2c_write(BNO055_EULER_H_LSB_ADDR);		//Access LSB of Heading Euler angle
 340:	8a e1       	ldi	r24, 0x1A	; 26
 342:	0e 94 f5 02 	call	0x5ea	; 0x5ea <i2c_write>
	i2c_rep_start(BNO055_ADDRESS + I2C_READ);	//Set device address and read mode
 346:	81 e5       	ldi	r24, 0x51	; 81
 348:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <i2c_rep_start>
	Euler_H_LSB = i2c_readAck();			//Read Euler_H LSB
 34c:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 350:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <Euler_H_LSB>
	Euler_H_MSB = i2c_readAck();			//Read Euler_H MSB
 354:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 358:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Euler_H_MSB>
	Euler_R_LSB = i2c_readAck();			//Read Euler_R LSB
 35c:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 360:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Euler_R_LSB>
	Euler_R_MSB = i2c_readAck();			//Read Euler_R MSB
 364:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 368:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Euler_R_MSB>
	Euler_P_LSB = i2c_readAck();			//Read Euler_P LSB
 36c:	0e 94 07 03 	call	0x60e	; 0x60e <i2c_readAck>
 370:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Euler_P_LSB>
	Euler_P_MSB = i2c_readNak();			//Read Euler_P MSB
 374:	0e 94 12 03 	call	0x624	; 0x624 <i2c_readNak>
 378:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <Euler_P_MSB>
	i2c_stop();
 37c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <i2c_stop>

	//Combine the raw Euler bytes to word
	Euler_H_Raw = (Euler_H_MSB << 8) | (Euler_H_LSB);
 380:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <Euler_H_MSB>
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	76 2f       	mov	r23, r22
 388:	66 27       	eor	r22, r22
 38a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Euler_H_LSB>
 38e:	68 2b       	or	r22, r24
 390:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <Euler_H_Raw+0x1>
 394:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <Euler_H_Raw>
	Euler_R_Raw = (Euler_R_MSB << 8) | (Euler_R_LSB);
 398:	00 91 cc 01 	lds	r16, 0x01CC	; 0x8001cc <Euler_R_MSB>
 39c:	10 e0       	ldi	r17, 0x00	; 0
 39e:	10 2f       	mov	r17, r16
 3a0:	00 27       	eor	r16, r16
 3a2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Euler_R_LSB>
 3a6:	08 2b       	or	r16, r24
 3a8:	10 93 a7 01 	sts	0x01A7, r17	; 0x8001a7 <Euler_R_Raw+0x1>
 3ac:	00 93 a6 01 	sts	0x01A6, r16	; 0x8001a6 <Euler_R_Raw>
	Euler_P_Raw = (Euler_P_MSB << 8) | (Euler_P_LSB);
 3b0:	c0 91 ca 01 	lds	r28, 0x01CA	; 0x8001ca <Euler_P_MSB>
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
 3b6:	dc 2f       	mov	r29, r28
 3b8:	cc 27       	eor	r28, r28
 3ba:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <Euler_P_LSB>
 3be:	c8 2b       	or	r28, r24
 3c0:	d0 93 d6 01 	sts	0x01D6, r29	; 0x8001d6 <Euler_P_Raw+0x1>
 3c4:	c0 93 d5 01 	sts	0x01D5, r28	; 0x8001d5 <Euler_P_Raw>

	//Normalize the Euler Angles
	Euler_H = (float)(Euler_H_Raw) * angle_scale;
 3c8:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 3cc:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 3d0:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 3d4:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 3d8:	07 2e       	mov	r0, r23
 3da:	00 0c       	add	r0, r0
 3dc:	88 0b       	sbc	r24, r24
 3de:	99 0b       	sbc	r25, r25
 3e0:	0e 94 55 03 	call	0x6aa	; 0x6aa <__floatsisf>
 3e4:	a7 01       	movw	r20, r14
 3e6:	96 01       	movw	r18, r12
 3e8:	0e 94 b9 03 	call	0x772	; 0x772 <__mulsf3>
 3ec:	4b 01       	movw	r8, r22
 3ee:	5c 01       	movw	r10, r24
 3f0:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <Euler_H>
 3f4:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <Euler_H+0x1>
 3f8:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <Euler_H+0x2>
 3fc:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <Euler_H+0x3>
	Euler_R = (float)(Euler_R_Raw) * angle_scale;
 400:	b8 01       	movw	r22, r16
 402:	11 0f       	add	r17, r17
 404:	88 0b       	sbc	r24, r24
 406:	99 0b       	sbc	r25, r25
 408:	0e 94 55 03 	call	0x6aa	; 0x6aa <__floatsisf>
 40c:	a7 01       	movw	r20, r14
 40e:	96 01       	movw	r18, r12
 410:	0e 94 b9 03 	call	0x772	; 0x772 <__mulsf3>
 414:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <Euler_R>
 418:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <Euler_R+0x1>
 41c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <Euler_R+0x2>
 420:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <Euler_R+0x3>
	Euler_P = (float)(Euler_P_Raw) * angle_scale;
 424:	be 01       	movw	r22, r28
 426:	dd 0f       	add	r29, r29
 428:	88 0b       	sbc	r24, r24
 42a:	99 0b       	sbc	r25, r25
 42c:	0e 94 55 03 	call	0x6aa	; 0x6aa <__floatsisf>
 430:	a7 01       	movw	r20, r14
 432:	96 01       	movw	r18, r12
 434:	0e 94 b9 03 	call	0x772	; 0x772 <__mulsf3>
 438:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <Euler_P>
 43c:	70 93 d2 01 	sts	0x01D2, r23	; 0x8001d2 <Euler_P+0x1>
 440:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <Euler_P+0x2>
 444:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <Euler_P+0x3>
 448:	c5 01       	movw	r24, r10
 44a:	b4 01       	movw	r22, r8
 44c:	0e 94 1d 03 	call	0x63a	; 0x63a <__fixsfsi>
 450:	dc 01       	movw	r26, r24
 452:	cb 01       	movw	r24, r22
 454:	4a e0       	ldi	r20, 0x0A	; 10
 456:	69 ea       	ldi	r22, 0xA9	; 169
 458:	71 e0       	ldi	r23, 0x01	; 1
 45a:	0e 94 4e 04 	call	0x89c	; 0x89c <__itoa_ncheck>
 45e:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <Euler_R>
 462:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <Euler_R+0x1>
 466:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <Euler_R+0x2>
 46a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <Euler_R+0x3>
 46e:	0e 94 1d 03 	call	0x63a	; 0x63a <__fixsfsi>
 472:	dc 01       	movw	r26, r24
 474:	cb 01       	movw	r24, r22
 476:	4a e0       	ldi	r20, 0x0A	; 10
 478:	69 eb       	ldi	r22, 0xB9	; 185
 47a:	71 e0       	ldi	r23, 0x01	; 1
 47c:	0e 94 4e 04 	call	0x89c	; 0x89c <__itoa_ncheck>
 480:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <Euler_P>
 484:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <Euler_P+0x1>
 488:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <Euler_P+0x2>
 48c:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <Euler_P+0x3>
 490:	0e 94 1d 03 	call	0x63a	; 0x63a <__fixsfsi>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	4a e0       	ldi	r20, 0x0A	; 10
 49a:	6e e8       	ldi	r22, 0x8E	; 142
 49c:	71 e0       	ldi	r23, 0x01	; 1
 49e:	0e 94 4e 04 	call	0x89c	; 0x89c <__itoa_ncheck>
	itoa(Euler_H, Euler_H_String, 10);
	itoa(Euler_R, Euler_R_String, 10);
	itoa(Euler_P, Euler_P_String, 10);

	//Send the Euler angles via UART
	UART_Put_String("EH: ");
 4a2:	8e e6       	ldi	r24, 0x6E	; 110
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(Euler_H_String);
 4aa:	89 ea       	ldi	r24, 0xA9	; 169
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(" ER: ");
 4b2:	83 e7       	ldi	r24, 0x73	; 115
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(Euler_R_String);
 4ba:	89 eb       	ldi	r24, 0xB9	; 185
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(" EP: ");
 4c2:	89 e7       	ldi	r24, 0x79	; 121
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String(Euler_P_String);
 4ca:	8e e8       	ldi	r24, 0x8E	; 142
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	UART_Put_String("\n");
 4d2:	88 e1       	ldi	r24, 0x18	; 24
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	df 90       	pop	r13
 4e8:	cf 90       	pop	r12
 4ea:	bf 90       	pop	r11
 4ec:	af 90       	pop	r10
 4ee:	9f 90       	pop	r9
 4f0:	8f 90       	pop	r8
 4f2:	08 95       	ret

000004f4 <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 4f4:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	UART_Init();
 4f8:	0e 94 a8 00 	call	0x150	; 0x150 <UART_Init>
	i2c_init();
 4fc:	0e 94 94 02 	call	0x528	; 0x528 <i2c_init>
	BNO_Init();
 500:	0e 94 d5 00 	call	0x1aa	; 0x1aa <BNO_Init>

	UART_Put_String("Hello, world!\n");
 504:	8f e7       	ldi	r24, 0x7F	; 127
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Put_String>
	_delay_ms(10);
*/
	//Endless Loop
	while(1)
	{
		BNO_get_Mag_Data();
 50c:	0e 94 1c 01 	call	0x238	; 0x238 <BNO_get_Mag_Data>
		BNO_get_Euler();
 510:	0e 94 91 01 	call	0x322	; 0x322 <BNO_get_Euler>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 514:	2f ef       	ldi	r18, 0xFF	; 255
 516:	84 e3       	ldi	r24, 0x34	; 52
 518:	9c e0       	ldi	r25, 0x0C	; 12
 51a:	21 50       	subi	r18, 0x01	; 1
 51c:	80 40       	sbci	r24, 0x00	; 0
 51e:	90 40       	sbci	r25, 0x00	; 0
 520:	e1 f7       	brne	.-8      	; 0x51a <main+0x26>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x30>
 524:	00 00       	nop
 526:	f2 cf       	rjmp	.-28     	; 0x50c <main+0x18>

00000528 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 528:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 532:	08 95       	ret

00000534 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 534:	94 ea       	ldi	r25, 0xA4	; 164
 536:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 53a:	ec eb       	ldi	r30, 0xBC	; 188
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	90 81       	ld	r25, Z
 540:	99 23       	and	r25, r25
 542:	ec f7       	brge	.-6      	; 0x53e <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 544:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 548:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 54a:	98 30       	cpi	r25, 0x08	; 8
 54c:	11 f0       	breq	.+4      	; 0x552 <i2c_start+0x1e>
 54e:	90 31       	cpi	r25, 0x10	; 16
 550:	a1 f4       	brne	.+40     	; 0x57a <i2c_start+0x46>

	// send device address
	TWDR = address;
 552:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 556:	84 e8       	ldi	r24, 0x84	; 132
 558:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 55c:	ec eb       	ldi	r30, 0xBC	; 188
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	88 23       	and	r24, r24
 564:	ec f7       	brge	.-6      	; 0x560 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 566:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 56a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 56c:	98 31       	cpi	r25, 0x18	; 24
 56e:	39 f0       	breq	.+14     	; 0x57e <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 34       	cpi	r25, 0x40	; 64
 574:	29 f4       	brne	.+10     	; 0x580 <i2c_start+0x4c>
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	08 95       	ret
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 57e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 580:	08 95       	ret

00000582 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 586:	ec eb       	ldi	r30, 0xBC	; 188
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 58c:	a9 eb       	ldi	r26, 0xB9	; 185
 58e:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 590:	cb eb       	ldi	r28, 0xBB	; 187
 592:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 594:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 596:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 598:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 59a:	90 81       	ld	r25, Z
 59c:	99 23       	and	r25, r25
 59e:	ec f7       	brge	.-6      	; 0x59a <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 5a0:	9c 91       	ld	r25, X
 5a2:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 5a4:	98 30       	cpi	r25, 0x08	; 8
 5a6:	11 f0       	breq	.+4      	; 0x5ac <i2c_start_wait+0x2a>
 5a8:	90 31       	cpi	r25, 0x10	; 16
 5aa:	b1 f7       	brne	.-20     	; 0x598 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 5ac:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 5ae:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 5b0:	90 81       	ld	r25, Z
 5b2:	99 23       	and	r25, r25
 5b4:	ec f7       	brge	.-6      	; 0x5b0 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 5b6:	9c 91       	ld	r25, X
 5b8:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 5ba:	90 32       	cpi	r25, 0x20	; 32
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <i2c_start_wait+0x40>
 5be:	98 35       	cpi	r25, 0x58	; 88
 5c0:	29 f4       	brne	.+10     	; 0x5cc <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5c2:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 5c4:	90 81       	ld	r25, Z
 5c6:	94 fd       	sbrc	r25, 4
 5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <i2c_start_wait+0x42>
 5ca:	e6 cf       	rjmp	.-52     	; 0x598 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 5d2:	0e 94 9a 02 	call	0x534	; 0x534 <i2c_start>

}/* i2c_rep_start */
 5d6:	08 95       	ret

000005d8 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5d8:	84 e9       	ldi	r24, 0x94	; 148
 5da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 5de:	ec eb       	ldi	r30, 0xBC	; 188
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	84 fd       	sbrc	r24, 4
 5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <i2c_stop+0xa>

}/* i2c_stop */
 5e8:	08 95       	ret

000005ea <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 5ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 5ee:	84 e8       	ldi	r24, 0x84	; 132
 5f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 5f4:	ec eb       	ldi	r30, 0xBC	; 188
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	88 23       	and	r24, r24
 5fc:	ec f7       	brge	.-6      	; 0x5f8 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 5fe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 602:	98 7f       	andi	r25, 0xF8	; 248
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	98 32       	cpi	r25, 0x28	; 40
 608:	09 f4       	brne	.+2      	; 0x60c <i2c_write+0x22>
 60a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 60c:	08 95       	ret

0000060e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 60e:	84 ec       	ldi	r24, 0xC4	; 196
 610:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
 614:	ec eb       	ldi	r30, 0xBC	; 188
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	88 23       	and	r24, r24
 61c:	ec f7       	brge	.-6      	; 0x618 <i2c_readAck+0xa>

    return TWDR;
 61e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
 622:	08 95       	ret

00000624 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 624:	84 e8       	ldi	r24, 0x84	; 132
 626:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 62a:	ec eb       	ldi	r30, 0xBC	; 188
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	88 23       	and	r24, r24
 632:	ec f7       	brge	.-6      	; 0x62e <i2c_readNak+0xa>
	
    return TWDR;
 634:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 638:	08 95       	ret

0000063a <__fixsfsi>:
 63a:	0e 94 24 03 	call	0x648	; 0x648 <__fixunssfsi>
 63e:	68 94       	set
 640:	b1 11       	cpse	r27, r1
 642:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_szero>
 646:	08 95       	ret

00000648 <__fixunssfsi>:
 648:	0e 94 98 03 	call	0x730	; 0x730 <__fp_splitA>
 64c:	88 f0       	brcs	.+34     	; 0x670 <__fixunssfsi+0x28>
 64e:	9f 57       	subi	r25, 0x7F	; 127
 650:	98 f0       	brcs	.+38     	; 0x678 <__fixunssfsi+0x30>
 652:	b9 2f       	mov	r27, r25
 654:	99 27       	eor	r25, r25
 656:	b7 51       	subi	r27, 0x17	; 23
 658:	b0 f0       	brcs	.+44     	; 0x686 <__fixunssfsi+0x3e>
 65a:	e1 f0       	breq	.+56     	; 0x694 <__fixunssfsi+0x4c>
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	88 1f       	adc	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	1a f0       	brmi	.+6      	; 0x66c <__fixunssfsi+0x24>
 666:	ba 95       	dec	r27
 668:	c9 f7       	brne	.-14     	; 0x65c <__fixunssfsi+0x14>
 66a:	14 c0       	rjmp	.+40     	; 0x694 <__fixunssfsi+0x4c>
 66c:	b1 30       	cpi	r27, 0x01	; 1
 66e:	91 f0       	breq	.+36     	; 0x694 <__fixunssfsi+0x4c>
 670:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_zero>
 674:	b1 e0       	ldi	r27, 0x01	; 1
 676:	08 95       	ret
 678:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_zero>
 67c:	67 2f       	mov	r22, r23
 67e:	78 2f       	mov	r23, r24
 680:	88 27       	eor	r24, r24
 682:	b8 5f       	subi	r27, 0xF8	; 248
 684:	39 f0       	breq	.+14     	; 0x694 <__fixunssfsi+0x4c>
 686:	b9 3f       	cpi	r27, 0xF9	; 249
 688:	cc f3       	brlt	.-14     	; 0x67c <__fixunssfsi+0x34>
 68a:	86 95       	lsr	r24
 68c:	77 95       	ror	r23
 68e:	67 95       	ror	r22
 690:	b3 95       	inc	r27
 692:	d9 f7       	brne	.-10     	; 0x68a <__fixunssfsi+0x42>
 694:	3e f4       	brtc	.+14     	; 0x6a4 <__fixunssfsi+0x5c>
 696:	90 95       	com	r25
 698:	80 95       	com	r24
 69a:	70 95       	com	r23
 69c:	61 95       	neg	r22
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	08 95       	ret

000006a6 <__floatunsisf>:
 6a6:	e8 94       	clt
 6a8:	09 c0       	rjmp	.+18     	; 0x6bc <__floatsisf+0x12>

000006aa <__floatsisf>:
 6aa:	97 fb       	bst	r25, 7
 6ac:	3e f4       	brtc	.+14     	; 0x6bc <__floatsisf+0x12>
 6ae:	90 95       	com	r25
 6b0:	80 95       	com	r24
 6b2:	70 95       	com	r23
 6b4:	61 95       	neg	r22
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	99 23       	and	r25, r25
 6be:	a9 f0       	breq	.+42     	; 0x6ea <__floatsisf+0x40>
 6c0:	f9 2f       	mov	r31, r25
 6c2:	96 e9       	ldi	r25, 0x96	; 150
 6c4:	bb 27       	eor	r27, r27
 6c6:	93 95       	inc	r25
 6c8:	f6 95       	lsr	r31
 6ca:	87 95       	ror	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b7 95       	ror	r27
 6d2:	f1 11       	cpse	r31, r1
 6d4:	f8 cf       	rjmp	.-16     	; 0x6c6 <__floatsisf+0x1c>
 6d6:	fa f4       	brpl	.+62     	; 0x716 <__floatsisf+0x6c>
 6d8:	bb 0f       	add	r27, r27
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__floatsisf+0x36>
 6dc:	60 ff       	sbrs	r22, 0
 6de:	1b c0       	rjmp	.+54     	; 0x716 <__floatsisf+0x6c>
 6e0:	6f 5f       	subi	r22, 0xFF	; 255
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	16 c0       	rjmp	.+44     	; 0x716 <__floatsisf+0x6c>
 6ea:	88 23       	and	r24, r24
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <__floatsisf+0x48>
 6ee:	96 e9       	ldi	r25, 0x96	; 150
 6f0:	11 c0       	rjmp	.+34     	; 0x714 <__floatsisf+0x6a>
 6f2:	77 23       	and	r23, r23
 6f4:	21 f0       	breq	.+8      	; 0x6fe <__floatsisf+0x54>
 6f6:	9e e8       	ldi	r25, 0x8E	; 142
 6f8:	87 2f       	mov	r24, r23
 6fa:	76 2f       	mov	r23, r22
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <__floatsisf+0x5e>
 6fe:	66 23       	and	r22, r22
 700:	71 f0       	breq	.+28     	; 0x71e <__floatsisf+0x74>
 702:	96 e8       	ldi	r25, 0x86	; 134
 704:	86 2f       	mov	r24, r22
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	2a f0       	brmi	.+10     	; 0x716 <__floatsisf+0x6c>
 70c:	9a 95       	dec	r25
 70e:	66 0f       	add	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	da f7       	brpl	.-10     	; 0x70c <__floatsisf+0x62>
 716:	88 0f       	add	r24, r24
 718:	96 95       	lsr	r25
 71a:	87 95       	ror	r24
 71c:	97 f9       	bld	r25, 7
 71e:	08 95       	ret

00000720 <__fp_split3>:
 720:	57 fd       	sbrc	r21, 7
 722:	90 58       	subi	r25, 0x80	; 128
 724:	44 0f       	add	r20, r20
 726:	55 1f       	adc	r21, r21
 728:	59 f0       	breq	.+22     	; 0x740 <__fp_splitA+0x10>
 72a:	5f 3f       	cpi	r21, 0xFF	; 255
 72c:	71 f0       	breq	.+28     	; 0x74a <__fp_splitA+0x1a>
 72e:	47 95       	ror	r20

00000730 <__fp_splitA>:
 730:	88 0f       	add	r24, r24
 732:	97 fb       	bst	r25, 7
 734:	99 1f       	adc	r25, r25
 736:	61 f0       	breq	.+24     	; 0x750 <__fp_splitA+0x20>
 738:	9f 3f       	cpi	r25, 0xFF	; 255
 73a:	79 f0       	breq	.+30     	; 0x75a <__fp_splitA+0x2a>
 73c:	87 95       	ror	r24
 73e:	08 95       	ret
 740:	12 16       	cp	r1, r18
 742:	13 06       	cpc	r1, r19
 744:	14 06       	cpc	r1, r20
 746:	55 1f       	adc	r21, r21
 748:	f2 cf       	rjmp	.-28     	; 0x72e <__fp_split3+0xe>
 74a:	46 95       	lsr	r20
 74c:	f1 df       	rcall	.-30     	; 0x730 <__fp_splitA>
 74e:	08 c0       	rjmp	.+16     	; 0x760 <__fp_splitA+0x30>
 750:	16 16       	cp	r1, r22
 752:	17 06       	cpc	r1, r23
 754:	18 06       	cpc	r1, r24
 756:	99 1f       	adc	r25, r25
 758:	f1 cf       	rjmp	.-30     	; 0x73c <__fp_splitA+0xc>
 75a:	86 95       	lsr	r24
 75c:	71 05       	cpc	r23, r1
 75e:	61 05       	cpc	r22, r1
 760:	08 94       	sec
 762:	08 95       	ret

00000764 <__fp_zero>:
 764:	e8 94       	clt

00000766 <__fp_szero>:
 766:	bb 27       	eor	r27, r27
 768:	66 27       	eor	r22, r22
 76a:	77 27       	eor	r23, r23
 76c:	cb 01       	movw	r24, r22
 76e:	97 f9       	bld	r25, 7
 770:	08 95       	ret

00000772 <__mulsf3>:
 772:	0e 94 cc 03 	call	0x798	; 0x798 <__mulsf3x>
 776:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>
 77a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscA>
 77e:	38 f0       	brcs	.+14     	; 0x78e <__mulsf3+0x1c>
 780:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscB>
 784:	20 f0       	brcs	.+8      	; 0x78e <__mulsf3+0x1c>
 786:	95 23       	and	r25, r21
 788:	11 f0       	breq	.+4      	; 0x78e <__mulsf3+0x1c>
 78a:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 78e:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 792:	11 24       	eor	r1, r1
 794:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_szero>

00000798 <__mulsf3x>:
 798:	0e 94 90 03 	call	0x720	; 0x720 <__fp_split3>
 79c:	70 f3       	brcs	.-36     	; 0x77a <__mulsf3+0x8>

0000079e <__mulsf3_pse>:
 79e:	95 9f       	mul	r25, r21
 7a0:	c1 f3       	breq	.-16     	; 0x792 <__mulsf3+0x20>
 7a2:	95 0f       	add	r25, r21
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	55 1f       	adc	r21, r21
 7a8:	62 9f       	mul	r22, r18
 7aa:	f0 01       	movw	r30, r0
 7ac:	72 9f       	mul	r23, r18
 7ae:	bb 27       	eor	r27, r27
 7b0:	f0 0d       	add	r31, r0
 7b2:	b1 1d       	adc	r27, r1
 7b4:	63 9f       	mul	r22, r19
 7b6:	aa 27       	eor	r26, r26
 7b8:	f0 0d       	add	r31, r0
 7ba:	b1 1d       	adc	r27, r1
 7bc:	aa 1f       	adc	r26, r26
 7be:	64 9f       	mul	r22, r20
 7c0:	66 27       	eor	r22, r22
 7c2:	b0 0d       	add	r27, r0
 7c4:	a1 1d       	adc	r26, r1
 7c6:	66 1f       	adc	r22, r22
 7c8:	82 9f       	mul	r24, r18
 7ca:	22 27       	eor	r18, r18
 7cc:	b0 0d       	add	r27, r0
 7ce:	a1 1d       	adc	r26, r1
 7d0:	62 1f       	adc	r22, r18
 7d2:	73 9f       	mul	r23, r19
 7d4:	b0 0d       	add	r27, r0
 7d6:	a1 1d       	adc	r26, r1
 7d8:	62 1f       	adc	r22, r18
 7da:	83 9f       	mul	r24, r19
 7dc:	a0 0d       	add	r26, r0
 7de:	61 1d       	adc	r22, r1
 7e0:	22 1f       	adc	r18, r18
 7e2:	74 9f       	mul	r23, r20
 7e4:	33 27       	eor	r19, r19
 7e6:	a0 0d       	add	r26, r0
 7e8:	61 1d       	adc	r22, r1
 7ea:	23 1f       	adc	r18, r19
 7ec:	84 9f       	mul	r24, r20
 7ee:	60 0d       	add	r22, r0
 7f0:	21 1d       	adc	r18, r1
 7f2:	82 2f       	mov	r24, r18
 7f4:	76 2f       	mov	r23, r22
 7f6:	6a 2f       	mov	r22, r26
 7f8:	11 24       	eor	r1, r1
 7fa:	9f 57       	subi	r25, 0x7F	; 127
 7fc:	50 40       	sbci	r21, 0x00	; 0
 7fe:	9a f0       	brmi	.+38     	; 0x826 <__mulsf3_pse+0x88>
 800:	f1 f0       	breq	.+60     	; 0x83e <__mulsf3_pse+0xa0>
 802:	88 23       	and	r24, r24
 804:	4a f0       	brmi	.+18     	; 0x818 <__mulsf3_pse+0x7a>
 806:	ee 0f       	add	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	bb 1f       	adc	r27, r27
 80c:	66 1f       	adc	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	91 50       	subi	r25, 0x01	; 1
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	a9 f7       	brne	.-22     	; 0x802 <__mulsf3_pse+0x64>
 818:	9e 3f       	cpi	r25, 0xFE	; 254
 81a:	51 05       	cpc	r21, r1
 81c:	80 f0       	brcs	.+32     	; 0x83e <__mulsf3_pse+0xa0>
 81e:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 822:	0c 94 b3 03 	jmp	0x766	; 0x766 <__fp_szero>
 826:	5f 3f       	cpi	r21, 0xFF	; 255
 828:	e4 f3       	brlt	.-8      	; 0x822 <__mulsf3_pse+0x84>
 82a:	98 3e       	cpi	r25, 0xE8	; 232
 82c:	d4 f3       	brlt	.-12     	; 0x822 <__mulsf3_pse+0x84>
 82e:	86 95       	lsr	r24
 830:	77 95       	ror	r23
 832:	67 95       	ror	r22
 834:	b7 95       	ror	r27
 836:	f7 95       	ror	r31
 838:	e7 95       	ror	r30
 83a:	9f 5f       	subi	r25, 0xFF	; 255
 83c:	c1 f7       	brne	.-16     	; 0x82e <__mulsf3_pse+0x90>
 83e:	fe 2b       	or	r31, r30
 840:	88 0f       	add	r24, r24
 842:	91 1d       	adc	r25, r1
 844:	96 95       	lsr	r25
 846:	87 95       	ror	r24
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__fp_inf>:
 84c:	97 f9       	bld	r25, 7
 84e:	9f 67       	ori	r25, 0x7F	; 127
 850:	80 e8       	ldi	r24, 0x80	; 128
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	08 95       	ret

00000858 <__fp_nan>:
 858:	9f ef       	ldi	r25, 0xFF	; 255
 85a:	80 ec       	ldi	r24, 0xC0	; 192
 85c:	08 95       	ret

0000085e <__fp_pscA>:
 85e:	00 24       	eor	r0, r0
 860:	0a 94       	dec	r0
 862:	16 16       	cp	r1, r22
 864:	17 06       	cpc	r1, r23
 866:	18 06       	cpc	r1, r24
 868:	09 06       	cpc	r0, r25
 86a:	08 95       	ret

0000086c <__fp_pscB>:
 86c:	00 24       	eor	r0, r0
 86e:	0a 94       	dec	r0
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	14 06       	cpc	r1, r20
 876:	05 06       	cpc	r0, r21
 878:	08 95       	ret

0000087a <__fp_round>:
 87a:	09 2e       	mov	r0, r25
 87c:	03 94       	inc	r0
 87e:	00 0c       	add	r0, r0
 880:	11 f4       	brne	.+4      	; 0x886 <__fp_round+0xc>
 882:	88 23       	and	r24, r24
 884:	52 f0       	brmi	.+20     	; 0x89a <__fp_round+0x20>
 886:	bb 0f       	add	r27, r27
 888:	40 f4       	brcc	.+16     	; 0x89a <__fp_round+0x20>
 88a:	bf 2b       	or	r27, r31
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0x18>
 88e:	60 ff       	sbrs	r22, 0
 890:	04 c0       	rjmp	.+8      	; 0x89a <__fp_round+0x20>
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	08 95       	ret

0000089c <__itoa_ncheck>:
 89c:	bb 27       	eor	r27, r27
 89e:	4a 30       	cpi	r20, 0x0A	; 10
 8a0:	31 f4       	brne	.+12     	; 0x8ae <__itoa_ncheck+0x12>
 8a2:	99 23       	and	r25, r25
 8a4:	22 f4       	brpl	.+8      	; 0x8ae <__itoa_ncheck+0x12>
 8a6:	bd e2       	ldi	r27, 0x2D	; 45
 8a8:	90 95       	com	r25
 8aa:	81 95       	neg	r24
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__utoa_common>

000008b2 <__utoa_ncheck>:
 8b2:	bb 27       	eor	r27, r27

000008b4 <__utoa_common>:
 8b4:	fb 01       	movw	r30, r22
 8b6:	55 27       	eor	r21, r21
 8b8:	aa 27       	eor	r26, r26
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	aa 1f       	adc	r26, r26
 8c0:	a4 17       	cp	r26, r20
 8c2:	10 f0       	brcs	.+4      	; 0x8c8 <__utoa_common+0x14>
 8c4:	a4 1b       	sub	r26, r20
 8c6:	83 95       	inc	r24
 8c8:	50 51       	subi	r21, 0x10	; 16
 8ca:	b9 f7       	brne	.-18     	; 0x8ba <__utoa_common+0x6>
 8cc:	a0 5d       	subi	r26, 0xD0	; 208
 8ce:	aa 33       	cpi	r26, 0x3A	; 58
 8d0:	08 f0       	brcs	.+2      	; 0x8d4 <__utoa_common+0x20>
 8d2:	a9 5d       	subi	r26, 0xD9	; 217
 8d4:	a1 93       	st	Z+, r26
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	79 f7       	brne	.-34     	; 0x8b8 <__utoa_common+0x4>
 8da:	b1 11       	cpse	r27, r1
 8dc:	b1 93       	st	Z+, r27
 8de:	11 92       	st	Z+, r1
 8e0:	cb 01       	movw	r24, r22
 8e2:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <strrev>

000008e6 <strrev>:
 8e6:	dc 01       	movw	r26, r24
 8e8:	fc 01       	movw	r30, r24
 8ea:	67 2f       	mov	r22, r23
 8ec:	71 91       	ld	r23, Z+
 8ee:	77 23       	and	r23, r23
 8f0:	e1 f7       	brne	.-8      	; 0x8ea <strrev+0x4>
 8f2:	32 97       	sbiw	r30, 0x02	; 2
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <strrev+0x18>
 8f6:	7c 91       	ld	r23, X
 8f8:	6d 93       	st	X+, r22
 8fa:	70 83       	st	Z, r23
 8fc:	62 91       	ld	r22, -Z
 8fe:	ae 17       	cp	r26, r30
 900:	bf 07       	cpc	r27, r31
 902:	c8 f3       	brcs	.-14     	; 0x8f6 <strrev+0x10>
 904:	08 95       	ret

00000906 <_exit>:
 906:	f8 94       	cli

00000908 <__stop_program>:
 908:	ff cf       	rjmp	.-2      	; 0x908 <__stop_program>

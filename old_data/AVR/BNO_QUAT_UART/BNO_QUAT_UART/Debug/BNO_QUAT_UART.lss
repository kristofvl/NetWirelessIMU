
BNO_QUAT_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001167  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bed  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000787  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000029d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d4  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a4  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a9 30       	cpi	r26, 0x09	; 9
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  cc:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <AVR_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	8e e9       	ldi	r24, 0x9E	; 158
  d8:	94 e2       	ldi	r25, 0x24	; 36
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <AVR_Init+0x6>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <AVR_Init+0x10>
  e4:	00 00       	nop
** - Initializes the I/O peripherals
*************************************************************************************/
void AVR_Init(void)
{
	_delay_ms(750);		//Short pause after BNO055 Power-On Reset(Mandatory)
	DDRD |= _BV(1);		//Set TX as output
  e6:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));	//Set RX as input
  e8:	50 98       	cbi	0x0a, 0	; 10

	//Initialize TWI data
	TWI_data = 0;
  ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  ee:	08 95       	ret

000000f0 <UART_Init>:
** - Set the USART mode(Synchronous/Asynchronous/Asynchronous 2x)
** - Enable Receiver & Transmitter(Set RXEN & TXEN bits in UCSRB register)
*************************************************************************************/
void UART_Init(void)
{
	DDRD |= _BV(1);		//Set TX as output
  f0:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));	//Set RX as input
  f2:	50 98       	cbi	0x0a, 0	; 10

	//Set the BAUD rate(Ref. ATmega32U4 Datasheet Pg.189, Table 18-1)
	//To hard-code the Baud rate, Ref. Tables 18-9 to 18-12 in Pgs. 210 - 213
	UBRR1 = ((F_CPU / (16UL * BAUD)) - 1);
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  fc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	//Disables 2x speed
	UCSR1A &= ~(_BV(U2X1));
 100:	e8 ec       	ldi	r30, 0xC8	; 200
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	80 83       	st	Z, r24
	
	//Enable 8-bit character size, one stop-bit, no parity & asynchronous mode
	UCSR1C |= _BV(UCSZ11) | _BV(UCSZ10);
 10a:	ea ec       	ldi	r30, 0xCA	; 202
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	86 60       	ori	r24, 0x06	; 6
 112:	80 83       	st	Z, r24
	
	//Enable Transmitter & Receiver
	UCSR1B |= _BV(TXEN1) | _BV(RXEN1);
 114:	e9 ec       	ldi	r30, 0xC9	; 201
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 61       	ori	r24, 0x18	; 24
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <UART_Tx>:
** - Transmits the ADC data via the USB Serial
** - The data is received & displayed in a Hyperterminal
*************************************************************************************/
void UART_Tx(unsigned char data)
{
	loop_until_bit_is_set(UCSR1A, UDRE1);	//Wait until buffer is empty
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <UART_Tx+0x4>
	UDR1 = data;				//Send data
 12a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 12e:	08 95       	ret

00000130 <BNO_Read_Quaternions>:
}

void BNO_Read_Quaternions(void)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 134:	80 e5       	ldi	r24, 0x50	; 80
 136:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_W_MSB_ADDR);	//Access MSB of Quaternion_W value
 13a:	81 e2       	ldi	r24, 0x21	; 33
 13c:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 140:	81 e5       	ldi	r24, 0x51	; 81
 142:	0e 94 94 01 	call	0x328	; 0x328 <i2c_rep_start>
	Quat_Payload[0] = i2c_readNak();
 146:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_readNak>
 14a:	c1 e0       	ldi	r28, 0x01	; 1
 14c:	d1 e0       	ldi	r29, 0x01	; 1
 14e:	88 83       	st	Y, r24
	UART_Tx(Quat_Payload[0]);
 150:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 154:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 158:	80 e5       	ldi	r24, 0x50	; 80
 15a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_W_LSB_ADDR);	//Access LSB of Quaternion_W value
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 164:	81 e5       	ldi	r24, 0x51	; 81
 166:	0e 94 94 01 	call	0x328	; 0x328 <i2c_rep_start>
	Quat_Payload[1] = i2c_readNak();
 16a:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_readNak>
 16e:	89 83       	std	Y+1, r24	; 0x01
	UART_Tx(Quat_Payload[1]);
 170:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 174:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 178:	80 e5       	ldi	r24, 0x50	; 80
 17a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_X_MSB_ADDR);	//Access MSB of Quaternion_X value
 17e:	83 e2       	ldi	r24, 0x23	; 35
 180:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 184:	81 e5       	ldi	r24, 0x51	; 81
 186:	0e 94 94 01 	call	0x328	; 0x328 <i2c_rep_start>
	Quat_Payload[2] = i2c_readNak();
 18a:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_readNak>
 18e:	8a 83       	std	Y+2, r24	; 0x02
	UART_Tx(Quat_Payload[2]);
 190:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 194:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 198:	80 e5       	ldi	r24, 0x50	; 80
 19a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_X_LSB_ADDR);	//Access LSB of Quaternion_X value
 19e:	82 e2       	ldi	r24, 0x22	; 34
 1a0:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 1a4:	81 e5       	ldi	r24, 0x51	; 81
 1a6:	0e 94 94 01 	call	0x328	; 0x328 <i2c_rep_start>
	Quat_Payload[3] = i2c_readNak();
 1aa:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_readNak>
 1ae:	8b 83       	std	Y+3, r24	; 0x03
	UART_Tx(Quat_Payload[3]);
 1b0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 1b4:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>
	
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 1b8:	80 e5       	ldi	r24, 0x50	; 80
 1ba:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_Y_MSB_ADDR);	//Access MSB of Quaternion_Y value
 1be:	85 e2       	ldi	r24, 0x25	; 37
 1c0:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 1c4:	81 e5       	ldi	r24, 0x51	; 81
 1c6:	0e 94 94 01 	call	0x328	; 0x328 <i2c_rep_start>
	Quat_Payload[4] = i2c_readNak();
 1ca:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_readNak>
 1ce:	8c 83       	std	Y+4, r24	; 0x04
	UART_Tx(Quat_Payload[4]);
 1d0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 1d4:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>
	
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 1d8:	80 e5       	ldi	r24, 0x50	; 80
 1da:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_Y_LSB_ADDR);	//Access LSB of Quaternion_Y value
 1de:	84 e2       	ldi	r24, 0x24	; 36
 1e0:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 1e4:	81 e5       	ldi	r24, 0x51	; 81
 1e6:	0e 94 94 01 	call	0x328	; 0x328 <i2c_rep_start>
	Quat_Payload[5] = i2c_readNak();
 1ea:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_readNak>
 1ee:	8d 83       	std	Y+5, r24	; 0x05
	UART_Tx(Quat_Payload[5]);
 1f0:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 1f4:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>
	
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 1f8:	80 e5       	ldi	r24, 0x50	; 80
 1fa:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_Z_MSB_ADDR);	//Access MSB of Quaternion_Z value
 1fe:	87 e2       	ldi	r24, 0x27	; 39
 200:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 204:	81 e5       	ldi	r24, 0x51	; 81
 206:	0e 94 94 01 	call	0x328	; 0x328 <i2c_rep_start>
	Quat_Payload[6] = i2c_readNak();
 20a:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_readNak>
 20e:	8e 83       	std	Y+6, r24	; 0x06
	UART_Tx(Quat_Payload[6]);
 210:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 214:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>
	
	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 218:	80 e5       	ldi	r24, 0x50	; 80
 21a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_QUATERNION_DATA_Z_LSB_ADDR);	//Access LSB of Quaternion_Z value
 21e:	86 e2       	ldi	r24, 0x26	; 38
 220:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS+I2C_READ);		//Set device address and read mode
 224:	81 e5       	ldi	r24, 0x51	; 81
 226:	0e 94 94 01 	call	0x328	; 0x328 <i2c_rep_start>
	Quat_Payload[7] = i2c_readNak();
 22a:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_readNak>
 22e:	8f 83       	std	Y+7, r24	; 0x07
	UART_Tx(Quat_Payload[7]);
 230:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
	i2c_stop();
 234:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 23e:	0e 94 6a 00 	call	0xd4	; 0xd4 <AVR_Init>
	i2c_init();
 242:	0e 94 3f 01 	call	0x27e	; 0x27e <i2c_init>
	UART_Init();
 246:	0e 94 78 00 	call	0xf0	; 0xf0 <UART_Init>

	i2c_start_wait(BNO055_ADDRESS+I2C_WRITE);	//Set device address and read mode
 24a:	80 e5       	ldi	r24, 0x50	; 80
 24c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_start_wait>
	i2c_write(BNO055_OPR_MODE_ADDR);
 250:	8d e3       	ldi	r24, 0x3D	; 61
 252:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_write(OPERATION_MODE_NDOF);			//Set operation mode to NDOF
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	0e 94 a0 01 	call	0x340	; 0x340 <i2c_write>
	i2c_stop();
 25c:	0e 94 97 01 	call	0x32e	; 0x32e <i2c_stop>
 260:	8f e3       	ldi	r24, 0x3F	; 63
 262:	9c e9       	ldi	r25, 0x9C	; 156
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x26>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x2c>
 26a:	00 00       	nop
	_delay_ms(10);

	//Endless Loop
	while(1)
	{
		BNO_Read_Quaternions();
 26c:	0e 94 98 00 	call	0x130	; 0x130 <BNO_Read_Quaternions>
 270:	8f e3       	ldi	r24, 0x3F	; 63
 272:	9c e9       	ldi	r25, 0x9C	; 156
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0x36>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x3c>
 27a:	00 00       	nop
 27c:	f7 cf       	rjmp	.-18     	; 0x26c <main+0x2e>

0000027e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 27e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 288:	08 95       	ret

0000028a <i2c_start>:
 28a:	94 ea       	ldi	r25, 0xA4	; 164
 28c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 290:	ec eb       	ldi	r30, 0xBC	; 188
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	90 81       	ld	r25, Z
 296:	99 23       	and	r25, r25
 298:	ec f7       	brge	.-6      	; 0x294 <i2c_start+0xa>
 29a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 29e:	98 7f       	andi	r25, 0xF8	; 248
 2a0:	98 30       	cpi	r25, 0x08	; 8
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <i2c_start+0x1e>
 2a4:	90 31       	cpi	r25, 0x10	; 16
 2a6:	a1 f4       	brne	.+40     	; 0x2d0 <i2c_start+0x46>
 2a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2ac:	84 e8       	ldi	r24, 0x84	; 132
 2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2b2:	ec eb       	ldi	r30, 0xBC	; 188
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	ec f7       	brge	.-6      	; 0x2b6 <i2c_start+0x2c>
 2bc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2c0:	98 7f       	andi	r25, 0xF8	; 248
 2c2:	98 31       	cpi	r25, 0x18	; 24
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <i2c_start+0x4a>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 34       	cpi	r25, 0x40	; 64
 2ca:	29 f4       	brne	.+10     	; 0x2d6 <i2c_start+0x4c>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret

000002d8 <i2c_start_wait>:
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	ec eb       	ldi	r30, 0xBC	; 188
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	24 ea       	ldi	r18, 0xA4	; 164
 2e2:	a9 eb       	ldi	r26, 0xB9	; 185
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	cb eb       	ldi	r28, 0xBB	; 187
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	34 e8       	ldi	r19, 0x84	; 132
 2ec:	44 e9       	ldi	r20, 0x94	; 148
 2ee:	20 83       	st	Z, r18
 2f0:	90 81       	ld	r25, Z
 2f2:	99 23       	and	r25, r25
 2f4:	ec f7       	brge	.-6      	; 0x2f0 <i2c_start_wait+0x18>
 2f6:	9c 91       	ld	r25, X
 2f8:	98 7f       	andi	r25, 0xF8	; 248
 2fa:	98 30       	cpi	r25, 0x08	; 8
 2fc:	11 f0       	breq	.+4      	; 0x302 <i2c_start_wait+0x2a>
 2fe:	90 31       	cpi	r25, 0x10	; 16
 300:	b1 f7       	brne	.-20     	; 0x2ee <i2c_start_wait+0x16>
 302:	88 83       	st	Y, r24
 304:	30 83       	st	Z, r19
 306:	90 81       	ld	r25, Z
 308:	99 23       	and	r25, r25
 30a:	ec f7       	brge	.-6      	; 0x306 <i2c_start_wait+0x2e>
 30c:	9c 91       	ld	r25, X
 30e:	98 7f       	andi	r25, 0xF8	; 248
 310:	90 32       	cpi	r25, 0x20	; 32
 312:	11 f0       	breq	.+4      	; 0x318 <i2c_start_wait+0x40>
 314:	98 35       	cpi	r25, 0x58	; 88
 316:	29 f4       	brne	.+10     	; 0x322 <i2c_start_wait+0x4a>
 318:	40 83       	st	Z, r20
 31a:	90 81       	ld	r25, Z
 31c:	94 fd       	sbrc	r25, 4
 31e:	fd cf       	rjmp	.-6      	; 0x31a <i2c_start_wait+0x42>
 320:	e6 cf       	rjmp	.-52     	; 0x2ee <i2c_start_wait+0x16>
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <i2c_rep_start>:
 328:	0e 94 45 01 	call	0x28a	; 0x28a <i2c_start>
 32c:	08 95       	ret

0000032e <i2c_stop>:
 32e:	84 e9       	ldi	r24, 0x94	; 148
 330:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 334:	ec eb       	ldi	r30, 0xBC	; 188
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	84 fd       	sbrc	r24, 4
 33c:	fd cf       	rjmp	.-6      	; 0x338 <i2c_stop+0xa>
 33e:	08 95       	ret

00000340 <i2c_write>:
 340:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 344:	84 e8       	ldi	r24, 0x84	; 132
 346:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 34a:	ec eb       	ldi	r30, 0xBC	; 188
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	88 23       	and	r24, r24
 352:	ec f7       	brge	.-6      	; 0x34e <i2c_write+0xe>
 354:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 358:	98 7f       	andi	r25, 0xF8	; 248
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	98 32       	cpi	r25, 0x28	; 40
 35e:	09 f4       	brne	.+2      	; 0x362 <i2c_write+0x22>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret

00000364 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 364:	84 e8       	ldi	r24, 0x84	; 132
 366:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 36a:	ec eb       	ldi	r30, 0xBC	; 188
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	88 23       	and	r24, r24
 372:	ec f7       	brge	.-6      	; 0x36e <i2c_readNak+0xa>
	
    return TWDR;
 374:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>


Rbkyo_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000035e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018ec  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b54  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070f  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ad  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cff  00000000  00000000  000036e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e5       	ldi	r30, 0x5E	; 94
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 32       	cpi	r26, 0x20	; 32
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  d2:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <Init_SPI>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	24 9a       	sbi	0x04, 4	; 4
  dc:	20 9a       	sbi	0x04, 0	; 4
  de:	22 9a       	sbi	0x04, 2	; 4
  e0:	21 9a       	sbi	0x04, 1	; 4
  e2:	23 98       	cbi	0x04, 3	; 4
  e4:	8c b5       	in	r24, 0x2c	; 44
  e6:	81 65       	ori	r24, 0x51	; 81
  e8:	8c bd       	out	0x2c, r24	; 44
  ea:	8c b5       	in	r24, 0x2c	; 44
  ec:	8c 7f       	andi	r24, 0xFC	; 252
  ee:	8c bd       	out	0x2c, r24	; 44
  f0:	28 9a       	sbi	0x05, 0	; 5
  f2:	2c 98       	cbi	0x05, 4	; 5
  f4:	08 95       	ret

000000f6 <spi_tranceiver>:
  f6:	8e bd       	out	0x2e, r24	; 46
  f8:	0d b4       	in	r0, 0x2d	; 45
  fa:	07 fe       	sbrs	r0, 7
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <spi_tranceiver+0x2>
  fe:	8e b5       	in	r24, 0x2e	; 46
 100:	08 95       	ret

00000102 <Write_byte>:
 102:	cf 93       	push	r28
 104:	c6 2f       	mov	r28, r22
 106:	95 e3       	ldi	r25, 0x35	; 53
 108:	9a 95       	dec	r25
 10a:	f1 f7       	brne	.-4      	; 0x108 <Write_byte+0x6>
 10c:	00 00       	nop
 10e:	28 98       	cbi	0x05, 0	; 5
 110:	95 e3       	ldi	r25, 0x35	; 53
 112:	9a 95       	dec	r25
 114:	f1 f7       	brne	.-4      	; 0x112 <Write_byte+0x10>
 116:	00 00       	nop
 118:	80 5e       	subi	r24, 0xE0	; 224
 11a:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 11e:	85 e3       	ldi	r24, 0x35	; 53
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <Write_byte+0x1e>
 124:	00 00       	nop
 126:	8c 2f       	mov	r24, r28
 128:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 12c:	95 e3       	ldi	r25, 0x35	; 53
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <Write_byte+0x2c>
 132:	00 00       	nop
 134:	28 9a       	sbi	0x05, 0	; 5
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <Init_nrf>:
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	81 ee       	ldi	r24, 0xE1	; 225
 13e:	94 e0       	ldi	r25, 0x04	; 4
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <Init_nrf+0x6>
 148:	00 c0       	rjmp	.+0      	; 0x14a <Init_nrf+0x10>
 14a:	00 00       	nop
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 81 00 	call	0x102	; 0x102 <Write_byte>
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 81 00 	call	0x102	; 0x102 <Write_byte>
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 81 00 	call	0x102	; 0x102 <Write_byte>
 164:	69 e6       	ldi	r22, 0x69	; 105
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	0e 94 81 00 	call	0x102	; 0x102 <Write_byte>
 16c:	6e e0       	ldi	r22, 0x0E	; 14
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 81 00 	call	0x102	; 0x102 <Write_byte>
 174:	25 e3       	ldi	r18, 0x35	; 53
 176:	2a 95       	dec	r18
 178:	f1 f7       	brne	.-4      	; 0x176 <Init_nrf+0x3c>
 17a:	00 00       	nop
 17c:	28 98       	cbi	0x05, 0	; 5
 17e:	85 e3       	ldi	r24, 0x35	; 53
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <Init_nrf+0x46>
 184:	00 00       	nop
 186:	8a e2       	ldi	r24, 0x2A	; 42
 188:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 18c:	95 e3       	ldi	r25, 0x35	; 53
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <Init_nrf+0x54>
 192:	00 00       	nop
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 19a:	25 e3       	ldi	r18, 0x35	; 53
 19c:	2a 95       	dec	r18
 19e:	f1 f7       	brne	.-4      	; 0x19c <Init_nrf+0x62>
 1a0:	00 00       	nop
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 1a8:	85 e3       	ldi	r24, 0x35	; 53
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <Init_nrf+0x70>
 1ae:	00 00       	nop
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 1b6:	95 e3       	ldi	r25, 0x35	; 53
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Init_nrf+0x7e>
 1bc:	00 00       	nop
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 1c4:	25 e3       	ldi	r18, 0x35	; 53
 1c6:	2a 95       	dec	r18
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Init_nrf+0x8c>
 1ca:	00 00       	nop
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 1d2:	85 e3       	ldi	r24, 0x35	; 53
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <Init_nrf+0x9a>
 1d8:	00 00       	nop
 1da:	28 9a       	sbi	0x05, 0	; 5
 1dc:	95 e3       	ldi	r25, 0x35	; 53
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <Init_nrf+0xa4>
 1e2:	00 00       	nop
 1e4:	28 98       	cbi	0x05, 0	; 5
 1e6:	25 e3       	ldi	r18, 0x35	; 53
 1e8:	2a 95       	dec	r18
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <Init_nrf+0xae>
 1ec:	00 00       	nop
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 1f4:	85 e3       	ldi	r24, 0x35	; 53
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Init_nrf+0xbc>
 1fa:	00 00       	nop
 1fc:	8a ea       	ldi	r24, 0xAA	; 170
 1fe:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 202:	95 e3       	ldi	r25, 0x35	; 53
 204:	9a 95       	dec	r25
 206:	f1 f7       	brne	.-4      	; 0x204 <Init_nrf+0xca>
 208:	00 00       	nop
 20a:	8b eb       	ldi	r24, 0xBB	; 187
 20c:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 210:	25 e3       	ldi	r18, 0x35	; 53
 212:	2a 95       	dec	r18
 214:	f1 f7       	brne	.-4      	; 0x212 <Init_nrf+0xd8>
 216:	00 00       	nop
 218:	8c ec       	ldi	r24, 0xCC	; 204
 21a:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 21e:	85 e3       	ldi	r24, 0x35	; 53
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <Init_nrf+0xe6>
 224:	00 00       	nop
 226:	8d ed       	ldi	r24, 0xDD	; 221
 228:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 22c:	95 e3       	ldi	r25, 0x35	; 53
 22e:	9a 95       	dec	r25
 230:	f1 f7       	brne	.-4      	; 0x22e <Init_nrf+0xf4>
 232:	00 00       	nop
 234:	8e ee       	ldi	r24, 0xEE	; 238
 236:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 23a:	25 e3       	ldi	r18, 0x35	; 53
 23c:	2a 95       	dec	r18
 23e:	f1 f7       	brne	.-4      	; 0x23c <Init_nrf+0x102>
 240:	00 00       	nop
 242:	28 9a       	sbi	0x05, 0	; 5
 244:	60 e2       	ldi	r22, 0x20	; 32
 246:	81 e1       	ldi	r24, 0x11	; 17
 248:	0e 94 81 00 	call	0x102	; 0x102 <Write_byte>
 24c:	6e e1       	ldi	r22, 0x1E	; 30
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 81 00 	call	0x102	; 0x102 <Write_byte>
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	91 ee       	ldi	r25, 0xE1	; 225
 258:	24 e0       	ldi	r18, 0x04	; 4
 25a:	81 50       	subi	r24, 0x01	; 1
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	20 40       	sbci	r18, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <Init_nrf+0x120>
 262:	00 c0       	rjmp	.+0      	; 0x264 <Init_nrf+0x12a>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <Flush_tx>:
 268:	85 e3       	ldi	r24, 0x35	; 53
 26a:	8a 95       	dec	r24
 26c:	f1 f7       	brne	.-4      	; 0x26a <Flush_tx+0x2>
 26e:	00 00       	nop
 270:	28 98       	cbi	0x05, 0	; 5
 272:	85 e3       	ldi	r24, 0x35	; 53
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <Flush_tx+0xc>
 278:	00 00       	nop
 27a:	81 ee       	ldi	r24, 0xE1	; 225
 27c:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 280:	85 e3       	ldi	r24, 0x35	; 53
 282:	8a 95       	dec	r24
 284:	f1 f7       	brne	.-4      	; 0x282 <Flush_tx+0x1a>
 286:	00 00       	nop
 288:	28 9a       	sbi	0x05, 0	; 5
 28a:	85 e3       	ldi	r24, 0x35	; 53
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <Flush_tx+0x24>
 290:	00 00       	nop
 292:	08 95       	ret

00000294 <Payload_TX>:
	PORTB |= _BV(CSN);
	_delay_us(10);
}

void Payload_TX(uint8_t* data, uint8_t len)
{
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
	uint8_t i;
	
	for(i = 0; i < len; i++)
 29c:	66 23       	and	r22, r22
 29e:	69 f0       	breq	.+26     	; 0x2ba <Payload_TX+0x26>
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d1 e0       	ldi	r29, 0x01	; 1
 2a4:	61 50       	subi	r22, 0x01	; 1
 2a6:	06 2f       	mov	r16, r22
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1e 4f       	sbci	r17, 0xFE	; 254
	{
		spi_tranceiver(payload[i]);
 2ae:	89 91       	ld	r24, Y+
 2b0:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>

void Payload_TX(uint8_t* data, uint8_t len)
{
	uint8_t i;
	
	for(i = 0; i < len; i++)
 2b4:	c0 17       	cp	r28, r16
 2b6:	d1 07       	cpc	r29, r17
 2b8:	d1 f7       	brne	.-12     	; 0x2ae <Payload_TX+0x1a>
	{
		spi_tranceiver(payload[i]);
	}

}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <transmit_data>:

void transmit_data(unsigned char *tdata)
{
	Flush_tx();
 2c4:	0e 94 34 01 	call	0x268	; 0x268 <Flush_tx>
	PORTB &= ~_BV(CSN); //CSN low
 2c8:	28 98       	cbi	0x05, 0	; 5
 2ca:	85 e3       	ldi	r24, 0x35	; 53
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <transmit_data+0x8>
 2d0:	00 00       	nop
	_delay_us(10);
	//Transmit payload with ACK enabled
	spi_tranceiver(W_TX_PAYLOAD);
 2d2:	80 ea       	ldi	r24, 0xA0	; 160
 2d4:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
 2d8:	85 e3       	ldi	r24, 0x35	; 53
 2da:	8a 95       	dec	r24
 2dc:	f1 f7       	brne	.-4      	; 0x2da <transmit_data+0x16>
 2de:	00 00       	nop
	_delay_us(10);
	Payload_TX(payload, PAYLOAD_LEN);
 2e0:	60 e2       	ldi	r22, 0x20	; 32
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 4a 01 	call	0x294	; 0x294 <Payload_TX>
 2ea:	85 e3       	ldi	r24, 0x35	; 53
 2ec:	8a 95       	dec	r24
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <transmit_data+0x28>
 2f0:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);  //CSN high
 2f2:	28 9a       	sbi	0x05, 0	; 5
 2f4:	80 e5       	ldi	r24, 0x50	; 80
 2f6:	8a 95       	dec	r24
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <transmit_data+0x32>
	_delay_us(15);      //Need at least 10us before sending
	PORTB |= _BV(CE);   //CE high
 2fa:	2c 9a       	sbi	0x05, 4	; 5
 2fc:	8a e6       	ldi	r24, 0x6A	; 106
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <transmit_data+0x3a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <transmit_data+0x40>
 304:	08 95       	ret

00000306 <nrf24_getStatus>:
}

uint8_t nrf24_getStatus()
{
	uint8_t rv;
	PORTB &= ~_BV(CSN); //CSN low
 306:	28 98       	cbi	0x05, 0	; 5
	rv = spi_tranceiver(NOP);
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_tranceiver>
	PORTB |= _BV(CSN);  //CSN high
 30e:	28 9a       	sbi	0x05, 0	; 5
	return rv;
}
 310:	08 95       	ret

00000312 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
 312:	0e 94 83 01 	call	0x306	; 0x306 <nrf24_getStatus>
 316:	98 2f       	mov	r25, r24
 318:	90 73       	andi	r25, 0x30	; 48
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	09 f0       	breq	.+2      	; 0x320 <nrf24_isSending+0xe>
 31e:	80 e0       	ldi	r24, 0x00	; 0
		return 0; /* false */
	}

	return 1; /* true */

}
 320:	08 95       	ret

00000322 <reset>:
 322:	85 e3       	ldi	r24, 0x35	; 53
 324:	8a 95       	dec	r24
 326:	f1 f7       	brne	.-4      	; 0x324 <reset+0x2>
 328:	00 00       	nop

void reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
    	Write_byte(STATUS, 0x70);   
 32a:	60 e7       	ldi	r22, 0x70	; 112
 32c:	87 e0       	ldi	r24, 0x07	; 7
 32e:	0e 94 81 00 	call	0x102	; 0x102 <Write_byte>
 332:	85 e3       	ldi	r24, 0x35	; 53
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <reset+0x12>
 338:	00 00       	nop
 33a:	08 95       	ret

0000033c <main>:

//Main function for TX
int main(void)
{
	//Initialize peripherals
	Init_SPI();
 33c:	0e 94 6d 00 	call	0xda	; 0xda <Init_SPI>

	//Initialize devices
	Init_nrf();
 340:	0e 94 9d 00 	call	0x13a	; 0x13a <Init_nrf>
	
    	while(1) 
    	{
		transmit_data(payload);
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 62 01 	call	0x2c4	; 0x2c4 <transmit_data>
		while(nrf24_isSending());
 34c:	0e 94 89 01 	call	0x312	; 0x312 <nrf24_isSending>
 350:	81 11       	cpse	r24, r1
 352:	fc cf       	rjmp	.-8      	; 0x34c <main+0x10>
		reset();
 354:	0e 94 91 01 	call	0x322	; 0x322 <reset>
    	}
 358:	f5 cf       	rjmp	.-22     	; 0x344 <main+0x8>

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>

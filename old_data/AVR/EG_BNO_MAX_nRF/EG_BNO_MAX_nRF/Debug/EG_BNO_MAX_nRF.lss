
EG_BNO_MAX_nRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000840  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  0080013c  0080013c  00000910  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029b2  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dee  00000000  00000000  000034a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001113  00000000  00000000  00004290  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  000053a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a9  00000000  00000000  00005740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ff  00000000  00000000  000060e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000076e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 e4       	ldi	r30, 0x40	; 64
  c0:	f8 e0       	ldi	r31, 0x08	; 8
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ac 33       	cpi	r26, 0x3C	; 60
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	ac e3       	ldi	r26, 0x3C	; 60
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ac 3a       	cpi	r26, 0xAC	; 172
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
  e2:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
{
	uint8_t rv;
	rv = SPI_Read_Byte(OBSERVE_TX);
	rv = rv & 0x0F;
	return rv;
}
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	51 9a       	sbi	0x0a, 1	; 10
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	3e 9a       	sbi	0x07, 6	; 7
 102:	3f 9a       	sbi	0x07, 7	; 7
 104:	54 9a       	sbi	0x0a, 4	; 10
 106:	56 9a       	sbi	0x0a, 6	; 10
 108:	57 9a       	sbi	0x0a, 7	; 10
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	46 98       	cbi	0x08, 6	; 8
 110:	47 9a       	sbi	0x08, 7	; 8
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	30 e7       	ldi	r19, 0x70	; 112
 116:	42 e0       	ldi	r20, 0x02	; 2
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	40 40       	sbci	r20, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <AVR_Init+0x2e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <AVR_Init+0x38>
 122:	00 00       	nop
 124:	46 9a       	sbi	0x08, 6	; 8
 126:	47 98       	cbi	0x08, 7	; 8
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	30 e7       	ldi	r19, 0x70	; 112
 12c:	42 e0       	ldi	r20, 0x02	; 2
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	40 40       	sbci	r20, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <AVR_Init+0x44>
 136:	00 c0       	rjmp	.+0      	; 0x138 <AVR_Init+0x4e>
 138:	00 00       	nop
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	41 f7       	brne	.-48     	; 0x10e <AVR_Init+0x24>
 13e:	46 98       	cbi	0x08, 6	; 8
 140:	47 98       	cbi	0x08, 7	; 8
 142:	8f e7       	ldi	r24, 0x7F	; 127
 144:	9f e4       	ldi	r25, 0x4F	; 79
 146:	22 e1       	ldi	r18, 0x12	; 18
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <AVR_Init+0x5e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <AVR_Init+0x68>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <UART_Init>:
 156:	83 e3       	ldi	r24, 0x33	; 51
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 15e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 162:	e8 ec       	ldi	r30, 0xC8	; 200
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8d 7f       	andi	r24, 0xFD	; 253
 16a:	80 83       	st	Z, r24
 16c:	ea ec       	ldi	r30, 0xCA	; 202
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	86 60       	ori	r24, 0x06	; 6
 174:	80 83       	st	Z, r24
 176:	e9 ec       	ldi	r30, 0xC9	; 201
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 61       	ori	r24, 0x18	; 24
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <UART_Tx>:
 182:	e8 ec       	ldi	r30, 0xC8	; 200
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	90 81       	ld	r25, Z
 188:	95 ff       	sbrs	r25, 5
 18a:	fd cf       	rjmp	.-6      	; 0x186 <UART_Tx+0x4>
 18c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 190:	08 95       	ret

00000192 <UART_Put_String>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	88 81       	ld	r24, Y
 19a:	88 23       	and	r24, r24
 19c:	31 f0       	breq	.+12     	; 0x1aa <UART_Put_String+0x18>
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	0e 94 c1 00 	call	0x182	; 0x182 <UART_Tx>
 1a4:	89 91       	ld	r24, Y+
 1a6:	81 11       	cpse	r24, r1
 1a8:	fb cf       	rjmp	.-10     	; 0x1a0 <UART_Put_String+0xe>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <BNO_MUX_Select>:
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	a1 f0       	breq	.+40     	; 0x1dc <BNO_MUX_Select+0x2c>
 1b4:	28 f4       	brcc	.+10     	; 0x1c0 <BNO_MUX_Select+0x10>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	49 f0       	breq	.+18     	; 0x1cc <BNO_MUX_Select+0x1c>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	59 f0       	breq	.+22     	; 0x1d4 <BNO_MUX_Select+0x24>
 1be:	1e c0       	rjmp	.+60     	; 0x1fc <BNO_MUX_Select+0x4c>
 1c0:	85 30       	cpi	r24, 0x05	; 5
 1c2:	a1 f0       	breq	.+40     	; 0x1ec <BNO_MUX_Select+0x3c>
 1c4:	78 f0       	brcs	.+30     	; 0x1e4 <BNO_MUX_Select+0x34>
 1c6:	86 30       	cpi	r24, 0x06	; 6
 1c8:	a9 f0       	breq	.+42     	; 0x1f4 <BNO_MUX_Select+0x44>
 1ca:	18 c0       	rjmp	.+48     	; 0x1fc <BNO_MUX_Select+0x4c>
 1cc:	5c 9a       	sbi	0x0b, 4	; 11
 1ce:	5e 98       	cbi	0x0b, 6	; 11
 1d0:	5f 9a       	sbi	0x0b, 7	; 11
 1d2:	08 95       	ret
 1d4:	5c 98       	cbi	0x0b, 4	; 11
 1d6:	5e 98       	cbi	0x0b, 6	; 11
 1d8:	5f 9a       	sbi	0x0b, 7	; 11
 1da:	08 95       	ret
 1dc:	5c 98       	cbi	0x0b, 4	; 11
 1de:	5e 9a       	sbi	0x0b, 6	; 11
 1e0:	5f 98       	cbi	0x0b, 7	; 11
 1e2:	08 95       	ret
 1e4:	5c 9a       	sbi	0x0b, 4	; 11
 1e6:	5e 98       	cbi	0x0b, 6	; 11
 1e8:	5f 98       	cbi	0x0b, 7	; 11
 1ea:	08 95       	ret
 1ec:	5c 98       	cbi	0x0b, 4	; 11
 1ee:	5e 98       	cbi	0x0b, 6	; 11
 1f0:	5f 98       	cbi	0x0b, 7	; 11
 1f2:	08 95       	ret
 1f4:	5c 9a       	sbi	0x0b, 4	; 11
 1f6:	5e 9a       	sbi	0x0b, 6	; 11
 1f8:	5f 98       	cbi	0x0b, 7	; 11
 1fa:	08 95       	ret
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 c9 00 	call	0x192	; 0x192 <UART_Put_String>
 204:	08 95       	ret

00000206 <BNO_get_Quaternion>:
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	80 e5       	ldi	r24, 0x50	; 80
 20c:	0e 94 c2 03 	call	0x784	; 0x784 <i2c_start_wait>
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	0e 94 f6 03 	call	0x7ec	; 0x7ec <i2c_write>
 216:	81 e5       	ldi	r24, 0x51	; 81
 218:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <i2c_rep_start>
 21c:	0e 94 08 04 	call	0x810	; 0x810 <i2c_readAck>
 220:	c0 e5       	ldi	r28, 0x50	; 80
 222:	d1 e0       	ldi	r29, 0x01	; 1
 224:	8a 83       	std	Y+2, r24	; 0x02
 226:	0e 94 08 04 	call	0x810	; 0x810 <i2c_readAck>
 22a:	8b 83       	std	Y+3, r24	; 0x03
 22c:	0e 94 08 04 	call	0x810	; 0x810 <i2c_readAck>
 230:	8c 83       	std	Y+4, r24	; 0x04
 232:	0e 94 08 04 	call	0x810	; 0x810 <i2c_readAck>
 236:	8d 83       	std	Y+5, r24	; 0x05
 238:	0e 94 08 04 	call	0x810	; 0x810 <i2c_readAck>
 23c:	8e 83       	std	Y+6, r24	; 0x06
 23e:	0e 94 08 04 	call	0x810	; 0x810 <i2c_readAck>
 242:	8f 83       	std	Y+7, r24	; 0x07
 244:	0e 94 08 04 	call	0x810	; 0x810 <i2c_readAck>
 248:	88 87       	std	Y+8, r24	; 0x08
 24a:	0e 94 13 04 	call	0x826	; 0x826 <i2c_readNak>
 24e:	89 87       	std	Y+9, r24	; 0x09
 250:	0e 94 ed 03 	call	0x7da	; 0x7da <i2c_stop>
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <SPI_Init>:
 25a:	25 9a       	sbi	0x04, 5	; 4
 25c:	20 9a       	sbi	0x04, 0	; 4
 25e:	22 9a       	sbi	0x04, 2	; 4
 260:	21 9a       	sbi	0x04, 1	; 4
 262:	23 98       	cbi	0x04, 3	; 4
 264:	8c b5       	in	r24, 0x2c	; 44
 266:	80 65       	ori	r24, 0x50	; 80
 268:	8c bd       	out	0x2c, r24	; 44
 26a:	8c b5       	in	r24, 0x2c	; 44
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	8c bd       	out	0x2c, r24	; 44
 270:	8c b5       	in	r24, 0x2c	; 44
 272:	8d 7f       	andi	r24, 0xFD	; 253
 274:	8c bd       	out	0x2c, r24	; 44
 276:	8d b5       	in	r24, 0x2d	; 45
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	8d bd       	out	0x2d, r24	; 45
 27c:	28 9a       	sbi	0x05, 0	; 5
 27e:	2d 98       	cbi	0x05, 5	; 5
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <SPI_Init+0x2a>
 288:	00 c0       	rjmp	.+0      	; 0x28a <SPI_Init+0x30>
 28a:	00 00       	nop
 28c:	08 95       	ret

0000028e <SPI_Tranceiver>:
 28e:	8e bd       	out	0x2e, r24	; 46
 290:	0d b4       	in	r0, 0x2d	; 45
 292:	07 fe       	sbrs	r0, 7
 294:	fd cf       	rjmp	.-6      	; 0x290 <SPI_Tranceiver+0x2>
 296:	8e b5       	in	r24, 0x2e	; 46
 298:	08 95       	ret

0000029a <SPI_Read_Byte>:
 29a:	9a e1       	ldi	r25, 0x1A	; 26
 29c:	9a 95       	dec	r25
 29e:	f1 f7       	brne	.-4      	; 0x29c <SPI_Read_Byte+0x2>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <SPI_Read_Byte+0x8>
 2a2:	28 98       	cbi	0x05, 0	; 5
 2a4:	9a e1       	ldi	r25, 0x1A	; 26
 2a6:	9a 95       	dec	r25
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <SPI_Read_Byte+0xc>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <SPI_Read_Byte+0x12>
 2ac:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 2b0:	8a e1       	ldi	r24, 0x1A	; 26
 2b2:	8a 95       	dec	r24
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <SPI_Read_Byte+0x18>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <SPI_Read_Byte+0x1e>
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 2be:	9a e1       	ldi	r25, 0x1A	; 26
 2c0:	9a 95       	dec	r25
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <SPI_Read_Byte+0x26>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <SPI_Read_Byte+0x2c>
 2c6:	28 9a       	sbi	0x05, 0	; 5
 2c8:	08 95       	ret

000002ca <SPI_Write_Byte>:
 2ca:	cf 93       	push	r28
 2cc:	c6 2f       	mov	r28, r22
 2ce:	9a e1       	ldi	r25, 0x1A	; 26
 2d0:	9a 95       	dec	r25
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <SPI_Write_Byte+0x6>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <SPI_Write_Byte+0xc>
 2d6:	28 98       	cbi	0x05, 0	; 5
 2d8:	9a e1       	ldi	r25, 0x1A	; 26
 2da:	9a 95       	dec	r25
 2dc:	f1 f7       	brne	.-4      	; 0x2da <SPI_Write_Byte+0x10>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <SPI_Write_Byte+0x16>
 2e0:	80 5e       	subi	r24, 0xE0	; 224
 2e2:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 2e6:	8a e1       	ldi	r24, 0x1A	; 26
 2e8:	8a 95       	dec	r24
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <SPI_Write_Byte+0x1e>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <SPI_Write_Byte+0x24>
 2ee:	8c 2f       	mov	r24, r28
 2f0:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 2f4:	9a e1       	ldi	r25, 0x1A	; 26
 2f6:	9a 95       	dec	r25
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <SPI_Write_Byte+0x2c>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <SPI_Write_Byte+0x32>
 2fc:	28 9a       	sbi	0x05, 0	; 5
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <nRF_Set_Addr_RX>:
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	06 2f       	mov	r16, r22
 30c:	8a e1       	ldi	r24, 0x1A	; 26
 30e:	8a 95       	dec	r24
 310:	f1 f7       	brne	.-4      	; 0x30e <nRF_Set_Addr_RX+0xc>
 312:	00 c0       	rjmp	.+0      	; 0x314 <nRF_Set_Addr_RX+0x12>
 314:	28 98       	cbi	0x05, 0	; 5
 316:	8a e1       	ldi	r24, 0x1A	; 26
 318:	8a 95       	dec	r24
 31a:	f1 f7       	brne	.-4      	; 0x318 <nRF_Set_Addr_RX+0x16>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <nRF_Set_Addr_RX+0x1c>
 31e:	8a e2       	ldi	r24, 0x2A	; 42
 320:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 324:	00 23       	and	r16, r16
 326:	81 f0       	breq	.+32     	; 0x348 <nRF_Set_Addr_RX+0x46>
 328:	c5 e0       	ldi	r28, 0x05	; 5
 32a:	d1 e0       	ldi	r29, 0x01	; 1
 32c:	01 50       	subi	r16, 0x01	; 1
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	0a 5f       	subi	r16, 0xFA	; 250
 332:	1e 4f       	sbci	r17, 0xFE	; 254
 334:	8a e1       	ldi	r24, 0x1A	; 26
 336:	8a 95       	dec	r24
 338:	f1 f7       	brne	.-4      	; 0x336 <nRF_Set_Addr_RX+0x34>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <nRF_Set_Addr_RX+0x3a>
 33c:	89 91       	ld	r24, Y+
 33e:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 342:	c0 17       	cp	r28, r16
 344:	d1 07       	cpc	r29, r17
 346:	b1 f7       	brne	.-20     	; 0x334 <nRF_Set_Addr_RX+0x32>
 348:	8a e1       	ldi	r24, 0x1A	; 26
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <nRF_Set_Addr_RX+0x48>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <nRF_Set_Addr_RX+0x4e>
 350:	28 9a       	sbi	0x05, 0	; 5
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <nRF_Set_Addr_TX>:
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	06 2f       	mov	r16, r22
 366:	8a e1       	ldi	r24, 0x1A	; 26
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <nRF_Set_Addr_TX+0xc>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <nRF_Set_Addr_TX+0x12>
 36e:	28 98       	cbi	0x05, 0	; 5
 370:	8a e1       	ldi	r24, 0x1A	; 26
 372:	8a 95       	dec	r24
 374:	f1 f7       	brne	.-4      	; 0x372 <nRF_Set_Addr_TX+0x16>
 376:	00 c0       	rjmp	.+0      	; 0x378 <nRF_Set_Addr_TX+0x1c>
 378:	80 e3       	ldi	r24, 0x30	; 48
 37a:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 37e:	00 23       	and	r16, r16
 380:	81 f0       	breq	.+32     	; 0x3a2 <nRF_Set_Addr_TX+0x46>
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	d1 e0       	ldi	r29, 0x01	; 1
 386:	01 50       	subi	r16, 0x01	; 1
 388:	10 e0       	ldi	r17, 0x00	; 0
 38a:	0f 5f       	subi	r16, 0xFF	; 255
 38c:	1e 4f       	sbci	r17, 0xFE	; 254
 38e:	8a e1       	ldi	r24, 0x1A	; 26
 390:	8a 95       	dec	r24
 392:	f1 f7       	brne	.-4      	; 0x390 <nRF_Set_Addr_TX+0x34>
 394:	00 c0       	rjmp	.+0      	; 0x396 <nRF_Set_Addr_TX+0x3a>
 396:	89 91       	ld	r24, Y+
 398:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 39c:	c0 17       	cp	r28, r16
 39e:	d1 07       	cpc	r29, r17
 3a0:	b1 f7       	brne	.-20     	; 0x38e <nRF_Set_Addr_TX+0x32>
 3a2:	8a e1       	ldi	r24, 0x1A	; 26
 3a4:	8a 95       	dec	r24
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <nRF_Set_Addr_TX+0x48>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <nRF_Set_Addr_TX+0x4e>
 3aa:	28 9a       	sbi	0x05, 0	; 5
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	08 95       	ret

000003b6 <nRF_Flush_TX>:
 3b6:	8a e1       	ldi	r24, 0x1A	; 26
 3b8:	8a 95       	dec	r24
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <nRF_Flush_TX+0x2>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <nRF_Flush_TX+0x8>
 3be:	28 98       	cbi	0x05, 0	; 5
 3c0:	8a e1       	ldi	r24, 0x1A	; 26
 3c2:	8a 95       	dec	r24
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <nRF_Flush_TX+0xc>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <nRF_Flush_TX+0x12>
 3c8:	81 ee       	ldi	r24, 0xE1	; 225
 3ca:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 3ce:	8a e1       	ldi	r24, 0x1A	; 26
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <nRF_Flush_TX+0x1a>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <nRF_Flush_TX+0x20>
 3d6:	28 9a       	sbi	0x05, 0	; 5
 3d8:	8a e1       	ldi	r24, 0x1A	; 26
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <nRF_Flush_TX+0x24>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <nRF_Flush_TX+0x2a>
 3e0:	08 95       	ret

000003e2 <nRF_TX_Mode>:
 3e2:	2d 98       	cbi	0x05, 5	; 5
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 4d 01 	call	0x29a	; 0x29a <SPI_Read_Byte>
 3ea:	68 2f       	mov	r22, r24
 3ec:	6e 7f       	andi	r22, 0xFE	; 254
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 4d 01 	call	0x29a	; 0x29a <SPI_Read_Byte>
 3fa:	68 2f       	mov	r22, r24
 3fc:	62 60       	ori	r22, 0x02	; 2
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 404:	0e 94 db 01 	call	0x3b6	; 0x3b6 <nRF_Flush_TX>
 408:	60 e7       	ldi	r22, 0x70	; 112
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 4d 01 	call	0x29a	; 0x29a <SPI_Read_Byte>
 416:	68 2f       	mov	r22, r24
 418:	60 63       	ori	r22, 0x30	; 48
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 420:	8b e2       	ldi	r24, 0x2B	; 43
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
 42c:	08 95       	ret

0000042e <nRF_Flush_RX>:
 42e:	8a e1       	ldi	r24, 0x1A	; 26
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <nRF_Flush_RX+0x2>
 434:	00 c0       	rjmp	.+0      	; 0x436 <nRF_Flush_RX+0x8>
 436:	28 98       	cbi	0x05, 0	; 5
 438:	8a e1       	ldi	r24, 0x1A	; 26
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <nRF_Flush_RX+0xc>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <nRF_Flush_RX+0x12>
 440:	82 ee       	ldi	r24, 0xE2	; 226
 442:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 446:	8a e1       	ldi	r24, 0x1A	; 26
 448:	8a 95       	dec	r24
 44a:	f1 f7       	brne	.-4      	; 0x448 <nRF_Flush_RX+0x1a>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <nRF_Flush_RX+0x20>
 44e:	28 9a       	sbi	0x05, 0	; 5
 450:	8a e1       	ldi	r24, 0x1A	; 26
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <nRF_Flush_RX+0x24>
 456:	00 c0       	rjmp	.+0      	; 0x458 <nRF_Flush_RX+0x2a>
 458:	08 95       	ret

0000045a <nRF_RX_Mode>:
 45a:	2d 98       	cbi	0x05, 5	; 5
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 4d 01 	call	0x29a	; 0x29a <SPI_Read_Byte>
 462:	68 2f       	mov	r22, r24
 464:	63 60       	ori	r22, 0x03	; 3
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 46c:	0e 94 17 02 	call	0x42e	; 0x42e <nRF_Flush_RX>
 470:	60 e7       	ldi	r22, 0x70	; 112
 472:	87 e0       	ldi	r24, 0x07	; 7
 474:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 4d 01 	call	0x29a	; 0x29a <SPI_Read_Byte>
 47e:	68 2f       	mov	r22, r24
 480:	60 63       	ori	r22, 0x30	; 48
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 488:	2d 9a       	sbi	0x05, 5	; 5
 48a:	8b e2       	ldi	r24, 0x2B	; 43
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <nRF_RX_Mode+0x34>
 492:	00 c0       	rjmp	.+0      	; 0x494 <nRF_RX_Mode+0x3a>
 494:	00 00       	nop
 496:	08 95       	ret

00000498 <nRF_Init>:
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 4a8:	63 e0       	ldi	r22, 0x03	; 3
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 4b0:	69 e6       	ldi	r22, 0x69	; 105
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 4b8:	66 e2       	ldi	r22, 0x26	; 38
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 4c0:	65 e0       	ldi	r22, 0x05	; 5
 4c2:	85 e0       	ldi	r24, 0x05	; 5
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 81 01 	call	0x302	; 0x302 <nRF_Set_Addr_RX>
 4ca:	65 e0       	ldi	r22, 0x05	; 5
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 ae 01 	call	0x35c	; 0x35c <nRF_Set_Addr_TX>
 4d4:	6a e0       	ldi	r22, 0x0A	; 10
 4d6:	81 e1       	ldi	r24, 0x11	; 17
 4d8:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 4dc:	6f ef       	ldi	r22, 0xFF	; 255
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 4e4:	0e 94 2d 02 	call	0x45a	; 0x45a <nRF_RX_Mode>
 4e8:	8f e1       	ldi	r24, 0x1F	; 31
 4ea:	9e e4       	ldi	r25, 0x4E	; 78
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <nRF_Init+0x54>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <nRF_Init+0x5a>
 4f2:	00 00       	nop
 4f4:	08 95       	ret

000004f6 <nRF_send_Payload>:
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	66 23       	and	r22, r22
 500:	69 f0       	breq	.+26     	; 0x51c <nRF_send_Payload+0x26>
 502:	c0 e5       	ldi	r28, 0x50	; 80
 504:	d1 e0       	ldi	r29, 0x01	; 1
 506:	61 50       	subi	r22, 0x01	; 1
 508:	06 2f       	mov	r16, r22
 50a:	10 e0       	ldi	r17, 0x00	; 0
 50c:	0f 5a       	subi	r16, 0xAF	; 175
 50e:	1e 4f       	sbci	r17, 0xFE	; 254
 510:	89 91       	ld	r24, Y+
 512:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 516:	c0 17       	cp	r28, r16
 518:	d1 07       	cpc	r29, r17
 51a:	d1 f7       	brne	.-12     	; 0x510 <nRF_send_Payload+0x1a>
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	08 95       	ret

00000526 <nRF_TX_Data>:
 526:	0e 94 db 01 	call	0x3b6	; 0x3b6 <nRF_Flush_TX>
 52a:	28 98       	cbi	0x05, 0	; 5
 52c:	8a e1       	ldi	r24, 0x1A	; 26
 52e:	8a 95       	dec	r24
 530:	f1 f7       	brne	.-4      	; 0x52e <nRF_TX_Data+0x8>
 532:	00 c0       	rjmp	.+0      	; 0x534 <nRF_TX_Data+0xe>
 534:	80 ea       	ldi	r24, 0xA0	; 160
 536:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 53a:	8a e1       	ldi	r24, 0x1A	; 26
 53c:	8a 95       	dec	r24
 53e:	f1 f7       	brne	.-4      	; 0x53c <nRF_TX_Data+0x16>
 540:	00 c0       	rjmp	.+0      	; 0x542 <nRF_TX_Data+0x1c>
 542:	6a e0       	ldi	r22, 0x0A	; 10
 544:	80 e5       	ldi	r24, 0x50	; 80
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <nRF_send_Payload>
 54c:	8a e1       	ldi	r24, 0x1A	; 26
 54e:	8a 95       	dec	r24
 550:	f1 f7       	brne	.-4      	; 0x54e <nRF_TX_Data+0x28>
 552:	00 c0       	rjmp	.+0      	; 0x554 <nRF_TX_Data+0x2e>
 554:	28 9a       	sbi	0x05, 0	; 5
 556:	8a e1       	ldi	r24, 0x1A	; 26
 558:	8a 95       	dec	r24
 55a:	f1 f7       	brne	.-4      	; 0x558 <nRF_TX_Data+0x32>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <nRF_TX_Data+0x38>
 55e:	2d 9a       	sbi	0x05, 5	; 5
 560:	8a e1       	ldi	r24, 0x1A	; 26
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <nRF_TX_Data+0x3c>
 566:	00 c0       	rjmp	.+0      	; 0x568 <nRF_TX_Data+0x42>
 568:	2d 98       	cbi	0x05, 5	; 5
 56a:	08 95       	ret

0000056c <nRF_get_Status>:
 56c:	28 98       	cbi	0x05, 0	; 5
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 574:	28 9a       	sbi	0x05, 0	; 5
 576:	08 95       	ret

00000578 <nRF_is_Sending>:
 578:	0e 94 b6 02 	call	0x56c	; 0x56c <nRF_get_Status>
 57c:	98 2f       	mov	r25, r24
 57e:	90 73       	andi	r25, 0x30	; 48
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	09 f0       	breq	.+2      	; 0x586 <nRF_is_Sending+0xe>
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret

00000588 <INT6_Init>:

void INT6_Init(void)
{
	EICRB &= ~(1 << ISC60) | (1 << ISC61);	//INT6 active when low
 588:	ea e6       	ldi	r30, 0x6A	; 106
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	8f 7e       	andi	r24, 0xEF	; 239
 590:	80 83       	st	Z, r24
	EIMSK |= (1 << INT6);			//Enable INT6
 592:	ee 9a       	sbi	0x1d, 6	; 29
	sei();					//Enable global interrupts
 594:	78 94       	sei
 596:	08 95       	ret

00000598 <nRF_get_Payload>:
	SPI_Write_Byte(STATUS, (1 << RX_DR));
}

//Send and receive multiple bytes over SPI
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
 598:	cf 92       	push	r12
 59a:	df 92       	push	r13
 59c:	ef 92       	push	r14
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
	uint8_t i;

	for(i = 0; i < len; i++)
 5a8:	44 23       	and	r20, r20
 5aa:	01 f1       	breq	.+64     	; 0x5ec <nRF_get_Payload+0x54>
 5ac:	08 2f       	mov	r16, r24
 5ae:	19 2f       	mov	r17, r25
 5b0:	eb 01       	movw	r28, r22
 5b2:	41 50       	subi	r20, 0x01	; 1
 5b4:	e4 2e       	mov	r14, r20
 5b6:	f1 2c       	mov	r15, r1
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	e8 1a       	sub	r14, r24
 5bc:	f8 0a       	sbc	r15, r24
 5be:	e6 0e       	add	r14, r22
 5c0:	f7 1e       	adc	r15, r23
	{
		data_in[i] = SPI_Tranceiver(data_out[i]);
 5c2:	f8 01       	movw	r30, r16
 5c4:	81 91       	ld	r24, Z+
 5c6:	8f 01       	movw	r16, r30
 5c8:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 5cc:	6e 01       	movw	r12, r28
 5ce:	89 93       	st	Y+, r24
		UART_Tx(data_in[i]);
 5d0:	0e 94 c1 00 	call	0x182	; 0x182 <UART_Tx>
		if (data_in[i] == 0xAA)
 5d4:	f6 01       	movw	r30, r12
 5d6:	80 81       	ld	r24, Z
 5d8:	8a 3a       	cpi	r24, 0xAA	; 170
 5da:	29 f4       	brne	.+10     	; 0x5e6 <nRF_get_Payload+0x4e>
		{
			RX_Payload_cnt++;
 5dc:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <RX_Payload_cnt>
 5e0:	8f 5f       	subi	r24, 0xFF	; 255
 5e2:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <RX_Payload_cnt>
//Send and receive multiple bytes over SPI
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
	uint8_t i;

	for(i = 0; i < len; i++)
 5e6:	ce 15       	cp	r28, r14
 5e8:	df 05       	cpc	r29, r15
 5ea:	59 f7       	brne	.-42     	; 0x5c2 <nRF_get_Payload+0x2a>
		if (data_in[i] == 0xAA)
		{
			RX_Payload_cnt++;
		}
	}
}
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	ff 90       	pop	r15
 5f6:	ef 90       	pop	r14
 5f8:	df 90       	pop	r13
 5fa:	cf 90       	pop	r12
 5fc:	08 95       	ret

000005fe <__vector_7>:
	EIMSK |= (1 << INT6);			//Enable INT6
	sei();					//Enable global interrupts
}

ISR(INT6_vect)
{
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	2f 93       	push	r18
 60a:	3f 93       	push	r19
 60c:	4f 93       	push	r20
 60e:	5f 93       	push	r21
 610:	6f 93       	push	r22
 612:	7f 93       	push	r23
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
 618:	af 93       	push	r26
 61a:	bf 93       	push	r27
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
	cli();					//Disable global interrupt
 620:	f8 94       	cli

	PORTB &= ~_BV(CE); 			//Stop listening
 622:	2d 98       	cbi	0x05, 5	; 5
	// Pull down chip select
	PORTB &= ~_BV(CSN); //CSN low
 624:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 626:	8a e1       	ldi	r24, 0x1A	; 26
 628:	8a 95       	dec	r24
 62a:	f1 f7       	brne	.-4      	; 0x628 <__vector_7+0x2a>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <__vector_7+0x30>
	_delay_us(10);
	// Send command to read RX payload
	SPI_Tranceiver(R_RX_PAYLOAD);
 62e:	81 e6       	ldi	r24, 0x61	; 97
 630:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Tranceiver>
 634:	8a e1       	ldi	r24, 0x1A	; 26
 636:	8a 95       	dec	r24
 638:	f1 f7       	brne	.-4      	; 0x636 <__vector_7+0x38>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <__vector_7+0x3e>
	_delay_us(10);
	// Read payload
	nRF_get_Payload(N2_payload_RX, N2_payload_RX, PAYLOAD_LEN);
 63c:	4a e0       	ldi	r20, 0x0A	; 10
 63e:	65 e9       	ldi	r22, 0x95	; 149
 640:	71 e0       	ldi	r23, 0x01	; 1
 642:	cb 01       	movw	r24, r22
 644:	0e 94 cc 02 	call	0x598	; 0x598 <nRF_get_Payload>
 648:	8a e1       	ldi	r24, 0x1A	; 26
 64a:	8a 95       	dec	r24
 64c:	f1 f7       	brne	.-4      	; 0x64a <__vector_7+0x4c>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <__vector_7+0x52>
	_delay_us(10);
	// Pull up chip select
	PORTB |= _BV(CSN);  //CSN high
 650:	28 9a       	sbi	0x05, 0	; 5
 652:	8a e1       	ldi	r24, 0x1A	; 26
 654:	8a 95       	dec	r24
 656:	f1 f7       	brne	.-4      	; 0x654 <__vector_7+0x56>
 658:	00 c0       	rjmp	.+0      	; 0x65a <__vector_7+0x5c>
	_delay_us(10);
	// Reset status register
	SPI_Write_Byte(STATUS, (1 << RX_DR));
 65a:	60 e4       	ldi	r22, 0x40	; 64
 65c:	87 e0       	ldi	r24, 0x07	; 7
 65e:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
}
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	bf 91       	pop	r27
 668:	af 91       	pop	r26
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	7f 91       	pop	r23
 670:	6f 91       	pop	r22
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <nRF_Reset>:
 684:	8a e1       	ldi	r24, 0x1A	; 26
 686:	8a 95       	dec	r24
 688:	f1 f7       	brne	.-4      	; 0x686 <nRF_Reset+0x2>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <nRF_Reset+0x8>

void nRF_Reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
	SPI_Write_Byte(STATUS, 0x70);
 68c:	60 e7       	ldi	r22, 0x70	; 112
 68e:	87 e0       	ldi	r24, 0x07	; 7
 690:	0e 94 65 01 	call	0x2ca	; 0x2ca <SPI_Write_Byte>
 694:	8a e1       	ldi	r24, 0x1A	; 26
 696:	8a 95       	dec	r24
 698:	f1 f7       	brne	.-4      	; 0x696 <nRF_Reset+0x12>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <nRF_Reset+0x18>
 69c:	08 95       	ret

0000069e <main>:
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	//Initialize AVR and peripherals(The sequence is critical!!!)
	AVR_Init();
 69e:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	UART_Init();
 6a2:	0e 94 ab 00 	call	0x156	; 0x156 <UART_Init>
	i2c_init();
 6a6:	0e 94 95 03 	call	0x72a	; 0x72a <i2c_init>
	SPI_Init();
 6aa:	0e 94 2d 01 	call	0x25a	; 0x25a <SPI_Init>
	nRF_Init();
 6ae:	0e 94 4c 02 	call	0x498	; 0x498 <nRF_Init>
	INT6_Init();
 6b2:	0e 94 c4 02 	call	0x588	; 0x588 <INT6_Init>

	//Set node i.d.
	N2_payload_TX[0] = NODE_ID;
 6b6:	82 e0       	ldi	r24, 0x02	; 2
 6b8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <N2_payload_TX>
	
	//Initialize the sensor count
	Sensor_cnt = 1;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Sensor_cnt>

	nRF_Flush_RX();
 6c2:	0e 94 17 02 	call	0x42e	; 0x42e <nRF_Flush_RX>
	nRF_Reset();
 6c6:	0e 94 42 03 	call	0x684	; 0x684 <nRF_Reset>
	PORTB |= _BV(CE);	//Start listening
 6ca:	2d 9a       	sbi	0x05, 5	; 5
				
			//Select IMU
			BNO_MUX_Select(Sensor_cnt);
				
			//Set IMU i.d.
			N2_payload_TX[1] = Sensor_cnt;
 6cc:	c0 e5       	ldi	r28, 0x50	; 80
 6ce:	d1 e0       	ldi	r29, 0x01	; 1
			//Increment the sensor count
			Sensor_cnt++;
				
			if(Sensor_cnt > MAX_IMU_COUNT)
			{
				Sensor_cnt = 1;
 6d0:	11 e0       	ldi	r17, 0x01	; 1
	PORTB |= _BV(CE);	//Start listening

	//Endless Loop
	while(1)
	{
		if(RX_Payload_cnt == PAYLOAD_LEN)
 6d2:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <RX_Payload_cnt>
 6d6:	8a 30       	cpi	r24, 0x0A	; 10
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <main+0x34>
		{
			RX_Payload_cnt = 0;
 6da:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <RX_Payload_cnt>
				
			//Select IMU
			BNO_MUX_Select(Sensor_cnt);
 6de:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Sensor_cnt>
 6e2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <BNO_MUX_Select>
				
			//Set IMU i.d.
			N2_payload_TX[1] = Sensor_cnt;
 6e6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Sensor_cnt>
 6ea:	89 83       	std	Y+1, r24	; 0x01
				
			//Read the Quaternion data and store in payload
			BNO_get_Quaternion();
 6ec:	0e 94 03 01 	call	0x206	; 0x206 <BNO_get_Quaternion>

			//Configure as Transmitter
			nRF_TX_Mode();
 6f0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <nRF_TX_Mode>

			//Transmit the payload
			nRF_TX_Data(N2_payload_TX);
 6f4:	ce 01       	movw	r24, r28
 6f6:	0e 94 93 02 	call	0x526	; 0x526 <nRF_TX_Data>
			while(nRF_is_Sending());
 6fa:	0e 94 bc 02 	call	0x578	; 0x578 <nRF_is_Sending>
 6fe:	81 11       	cpse	r24, r1
 700:	fc cf       	rjmp	.-8      	; 0x6fa <main+0x5c>
				UART_Put_String(nRF_String_Data);
				UART_Put_String("\n");
			#endif

			//Increment the sensor count
			Sensor_cnt++;
 702:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Sensor_cnt>
 706:	8f 5f       	subi	r24, 0xFF	; 255
 708:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Sensor_cnt>
				
			if(Sensor_cnt > MAX_IMU_COUNT)
 70c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Sensor_cnt>
 710:	84 30       	cpi	r24, 0x04	; 4
 712:	14 f0       	brlt	.+4      	; 0x718 <main+0x7a>
			{
				Sensor_cnt = 1;
 714:	10 93 93 01 	sts	0x0193, r17	; 0x800193 <Sensor_cnt>
			}

			//Configure as Receiver
			nRF_RX_Mode();
 718:	0e 94 2d 02 	call	0x45a	; 0x45a <nRF_RX_Mode>
			nRF_Flush_RX();
 71c:	0e 94 17 02 	call	0x42e	; 0x42e <nRF_Flush_RX>
			nRF_Reset();
 720:	0e 94 42 03 	call	0x684	; 0x684 <nRF_Reset>
			PORTB |= _BV(CE);	//Start listening again
 724:	2d 9a       	sbi	0x05, 5	; 5
			sei();
 726:	78 94       	sei
 728:	d4 cf       	rjmp	.-88     	; 0x6d2 <main+0x34>

0000072a <i2c_init>:
 72a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 734:	08 95       	ret

00000736 <i2c_start>:
 736:	94 ea       	ldi	r25, 0xA4	; 164
 738:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 73c:	ec eb       	ldi	r30, 0xBC	; 188
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	90 81       	ld	r25, Z
 742:	99 23       	and	r25, r25
 744:	ec f7       	brge	.-6      	; 0x740 <i2c_start+0xa>
 746:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 74a:	98 7f       	andi	r25, 0xF8	; 248
 74c:	98 30       	cpi	r25, 0x08	; 8
 74e:	11 f0       	breq	.+4      	; 0x754 <i2c_start+0x1e>
 750:	90 31       	cpi	r25, 0x10	; 16
 752:	a1 f4       	brne	.+40     	; 0x77c <i2c_start+0x46>
 754:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 758:	84 e8       	ldi	r24, 0x84	; 132
 75a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 75e:	ec eb       	ldi	r30, 0xBC	; 188
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	88 23       	and	r24, r24
 766:	ec f7       	brge	.-6      	; 0x762 <i2c_start+0x2c>
 768:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 76c:	98 7f       	andi	r25, 0xF8	; 248
 76e:	98 31       	cpi	r25, 0x18	; 24
 770:	39 f0       	breq	.+14     	; 0x780 <i2c_start+0x4a>
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 34       	cpi	r25, 0x40	; 64
 776:	29 f4       	brne	.+10     	; 0x782 <i2c_start+0x4c>
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	08 95       	ret
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	08 95       	ret
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	08 95       	ret

00000784 <i2c_start_wait>:
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	ec eb       	ldi	r30, 0xBC	; 188
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	24 ea       	ldi	r18, 0xA4	; 164
 78e:	a9 eb       	ldi	r26, 0xB9	; 185
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	cb eb       	ldi	r28, 0xBB	; 187
 794:	d0 e0       	ldi	r29, 0x00	; 0
 796:	34 e8       	ldi	r19, 0x84	; 132
 798:	44 e9       	ldi	r20, 0x94	; 148
 79a:	20 83       	st	Z, r18
 79c:	90 81       	ld	r25, Z
 79e:	99 23       	and	r25, r25
 7a0:	ec f7       	brge	.-6      	; 0x79c <i2c_start_wait+0x18>
 7a2:	9c 91       	ld	r25, X
 7a4:	98 7f       	andi	r25, 0xF8	; 248
 7a6:	98 30       	cpi	r25, 0x08	; 8
 7a8:	11 f0       	breq	.+4      	; 0x7ae <i2c_start_wait+0x2a>
 7aa:	90 31       	cpi	r25, 0x10	; 16
 7ac:	b1 f7       	brne	.-20     	; 0x79a <i2c_start_wait+0x16>
 7ae:	88 83       	st	Y, r24
 7b0:	30 83       	st	Z, r19
 7b2:	90 81       	ld	r25, Z
 7b4:	99 23       	and	r25, r25
 7b6:	ec f7       	brge	.-6      	; 0x7b2 <i2c_start_wait+0x2e>
 7b8:	9c 91       	ld	r25, X
 7ba:	98 7f       	andi	r25, 0xF8	; 248
 7bc:	90 32       	cpi	r25, 0x20	; 32
 7be:	11 f0       	breq	.+4      	; 0x7c4 <i2c_start_wait+0x40>
 7c0:	98 35       	cpi	r25, 0x58	; 88
 7c2:	29 f4       	brne	.+10     	; 0x7ce <i2c_start_wait+0x4a>
 7c4:	40 83       	st	Z, r20
 7c6:	90 81       	ld	r25, Z
 7c8:	94 fd       	sbrc	r25, 4
 7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <i2c_start_wait+0x42>
 7cc:	e6 cf       	rjmp	.-52     	; 0x79a <i2c_start_wait+0x16>
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	08 95       	ret

000007d4 <i2c_rep_start>:
 7d4:	0e 94 9b 03 	call	0x736	; 0x736 <i2c_start>
 7d8:	08 95       	ret

000007da <i2c_stop>:
 7da:	84 e9       	ldi	r24, 0x94	; 148
 7dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 7e0:	ec eb       	ldi	r30, 0xBC	; 188
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	84 fd       	sbrc	r24, 4
 7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <i2c_stop+0xa>
 7ea:	08 95       	ret

000007ec <i2c_write>:
 7ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 7f0:	84 e8       	ldi	r24, 0x84	; 132
 7f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 7f6:	ec eb       	ldi	r30, 0xBC	; 188
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	88 23       	and	r24, r24
 7fe:	ec f7       	brge	.-6      	; 0x7fa <i2c_write+0xe>
 800:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 804:	98 7f       	andi	r25, 0xF8	; 248
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	98 32       	cpi	r25, 0x28	; 40
 80a:	09 f4       	brne	.+2      	; 0x80e <i2c_write+0x22>
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	08 95       	ret

00000810 <i2c_readAck>:
 810:	84 ec       	ldi	r24, 0xC4	; 196
 812:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 816:	ec eb       	ldi	r30, 0xBC	; 188
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	88 23       	and	r24, r24
 81e:	ec f7       	brge	.-6      	; 0x81a <i2c_readAck+0xa>
 820:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 824:	08 95       	ret

00000826 <i2c_readNak>:
 826:	84 e8       	ldi	r24, 0x84	; 132
 828:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 82c:	ec eb       	ldi	r30, 0xBC	; 188
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	88 23       	and	r24, r24
 834:	ec f7       	brge	.-6      	; 0x830 <i2c_readNak+0xa>
 836:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 83a:	08 95       	ret

0000083c <_exit>:
 83c:	f8 94       	cli

0000083e <__stop_program>:
 83e:	ff cf       	rjmp	.-2      	; 0x83e <__stop_program>

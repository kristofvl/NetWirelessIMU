
N1_MAX_nRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  000008ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000251d  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d87  00000000  00000000  00002f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e8a  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00004ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000824  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015a7  00000000  00000000  0000570c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_7>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	ae 30       	cpi	r26, 0x0E	; 14
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 44 03 	call	0x688	; 0x688 <main>
  cc:	0c 94 1b 04 	jmp	0x836	; 0x836 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <AVR_Init>:
	i2c_write(reg);					//Access the Command register
	i2c_rep_start(MAX17043_ADDR + I2C_READ);	//Set device address and read mode
	*MSB = i2c_readNak();				//Read MSB
	*LSB = i2c_readNak();				//Read LSB
	i2c_stop();					//Stop the I2C transmission
}
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  e0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	51 9a       	sbi	0x0a, 1	; 10
  e8:	50 98       	cbi	0x0a, 0	; 10
  ea:	3e 9a       	sbi	0x07, 6	; 7
  ec:	3f 9a       	sbi	0x07, 7	; 7
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	46 98       	cbi	0x08, 6	; 8
  f4:	47 9a       	sbi	0x08, 7	; 8
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	30 e7       	ldi	r19, 0x70	; 112
  fa:	42 e0       	ldi	r20, 0x02	; 2
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	40 40       	sbci	r20, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <AVR_Init+0x28>
 104:	00 c0       	rjmp	.+0      	; 0x106 <AVR_Init+0x32>
 106:	00 00       	nop
 108:	46 9a       	sbi	0x08, 6	; 8
 10a:	47 98       	cbi	0x08, 7	; 8
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	30 e7       	ldi	r19, 0x70	; 112
 110:	42 e0       	ldi	r20, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <AVR_Init+0x3e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <AVR_Init+0x48>
 11c:	00 00       	nop
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	41 f7       	brne	.-48     	; 0xf2 <AVR_Init+0x1e>
 122:	46 98       	cbi	0x08, 6	; 8
 124:	47 98       	cbi	0x08, 7	; 8
 126:	8f e7       	ldi	r24, 0x7F	; 127
 128:	9f e4       	ldi	r25, 0x4F	; 79
 12a:	22 e1       	ldi	r18, 0x12	; 18
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <AVR_Init+0x58>
 134:	00 c0       	rjmp	.+0      	; 0x136 <AVR_Init+0x62>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <UART_Init>:
 13a:	83 e3       	ldi	r24, 0x33	; 51
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 142:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 146:	e8 ec       	ldi	r30, 0xC8	; 200
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8d 7f       	andi	r24, 0xFD	; 253
 14e:	80 83       	st	Z, r24
 150:	ea ec       	ldi	r30, 0xCA	; 202
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	86 60       	ori	r24, 0x06	; 6
 158:	80 83       	st	Z, r24
 15a:	e9 ec       	ldi	r30, 0xC9	; 201
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 61       	ori	r24, 0x18	; 24
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <UART_Tx>:
 166:	e8 ec       	ldi	r30, 0xC8	; 200
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	95 ff       	sbrs	r25, 5
 16e:	fd cf       	rjmp	.-6      	; 0x16a <UART_Tx+0x4>
 170:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 174:	08 95       	ret

00000176 <MAX17043_Read_VCELL>:
 176:	8c e6       	ldi	r24, 0x6C	; 108
 178:	0e 94 bf 03 	call	0x77e	; 0x77e <i2c_start_wait>
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <i2c_write>
 182:	8d e6       	ldi	r24, 0x6D	; 109
 184:	0e 94 e7 03 	call	0x7ce	; 0x7ce <i2c_rep_start>
 188:	0e 94 05 04 	call	0x80a	; 0x80a <i2c_readAck>
 18c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <VCell_H>
 190:	0e 94 10 04 	call	0x820	; 0x820 <i2c_readNak>
 194:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <VCell_L>
 198:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <i2c_stop>
 19c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <VCell_H>
 1a0:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Tx>
 1a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <VCell_L>
 1a8:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Tx>
 1ac:	e3 e0       	ldi	r30, 0x03	; 3
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <VCell_H>
 1b4:	80 83       	st	Z, r24
 1b6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <VCell_L>
 1ba:	81 83       	std	Z+1, r24	; 0x01
 1bc:	08 95       	ret

000001be <MAX17043_Read_SOC>:
 1be:	8c e6       	ldi	r24, 0x6C	; 108
 1c0:	0e 94 bf 03 	call	0x77e	; 0x77e <i2c_start_wait>
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <i2c_write>
 1ca:	8d e6       	ldi	r24, 0x6D	; 109
 1cc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <i2c_rep_start>
 1d0:	0e 94 05 04 	call	0x80a	; 0x80a <i2c_readAck>
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1d8:	0e 94 10 04 	call	0x820	; 0x820 <i2c_readNak>
 1dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SOC_L>
 1e0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <i2c_stop>
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e8:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Tx>
 1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SOC_L>
 1f0:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Tx>
 1f4:	e3 e0       	ldi	r30, 0x03	; 3
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SOC_L>
 202:	83 83       	std	Z+3, r24	; 0x03
 204:	08 95       	ret

00000206 <MAX17043_Write_Word>:
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	18 2f       	mov	r17, r24
 20e:	d6 2f       	mov	r29, r22
 210:	c4 2f       	mov	r28, r20
 212:	8c e6       	ldi	r24, 0x6C	; 108
 214:	0e 94 bf 03 	call	0x77e	; 0x77e <i2c_start_wait>
 218:	81 2f       	mov	r24, r17
 21a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <i2c_write>
 21e:	8d 2f       	mov	r24, r29
 220:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <i2c_write>
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <i2c_write>
 22a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <i2c_stop>
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	08 95       	ret

00000236 <MAX17043_Power_On_Reset>:
 236:	44 e5       	ldi	r20, 0x54	; 84
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	8e ef       	ldi	r24, 0xFE	; 254
 23c:	0e 94 03 01 	call	0x206	; 0x206 <MAX17043_Write_Word>
 240:	08 95       	ret

00000242 <MAX17043_Quick_Start>:
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	60 e4       	ldi	r22, 0x40	; 64
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	0e 94 03 01 	call	0x206	; 0x206 <MAX17043_Write_Word>
 24c:	08 95       	ret

0000024e <SPI_Init>:

void SPI_Init()
{
	//Set the output pin(s) for SPI
	DDRB |= _BV(CE);	//CE
 24e:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(CSN);	//CSN
 250:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(MOSI);  	//MOSI
 252:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= _BV(SCLK);  	//SCLK
 254:	21 9a       	sbi	0x04, 1	; 4

	//Set the input pin(s) for SPI
	DDRB &= ~_BV(MISO); 	//MISO
 256:	23 98       	cbi	0x04, 3	; 4

	//Enable SPI as master
	SPCR |= ((1 << SPE) | (1 << MSTR));
 258:	8c b5       	in	r24, 0x2c	; 44
 25a:	80 65       	ori	r24, 0x50	; 80
 25c:	8c bd       	out	0x2c, r24	; 44

	//F_CPU/8
	SPCR |= (1 << SPR0);
 25e:	8c b5       	in	r24, 0x2c	; 44
 260:	81 60       	ori	r24, 0x01	; 1
 262:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR1);
 264:	8c b5       	in	r24, 0x2c	; 44
 266:	8d 7f       	andi	r24, 0xFD	; 253
 268:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
 26a:	8d b5       	in	r24, 0x2d	; 45
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	8d bd       	out	0x2d, r24	; 45

	PORTB |= _BV(CSN);	//CSN high
 270:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~_BV(CE);	//CE low
 272:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	9e e4       	ldi	r25, 0x4E	; 78
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <SPI_Init+0x2a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <SPI_Init+0x30>
 27e:	00 00       	nop
 280:	08 95       	ret

00000282 <SPI_Tranceiver>:
}

unsigned char SPI_Tranceiver(unsigned char data)
{
	//Load data into the buffer
	SPDR = data;
 282:	8e bd       	out	0x2e, r24	; 46

	//Wait until transmission complete
	while(!(SPSR & (1 << SPIF)));
 284:	0d b4       	in	r0, 0x2d	; 45
 286:	07 fe       	sbrs	r0, 7
 288:	fd cf       	rjmp	.-6      	; 0x284 <SPI_Tranceiver+0x2>

	//Return received data
	return(SPDR);
 28a:	8e b5       	in	r24, 0x2e	; 46
}
 28c:	08 95       	ret

0000028e <SPI_Read_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	9a e1       	ldi	r25, 0x1A	; 26
 290:	9a 95       	dec	r25
 292:	f1 f7       	brne	.-4      	; 0x290 <SPI_Read_Byte+0x2>
 294:	00 c0       	rjmp	.+0      	; 0x296 <SPI_Read_Byte+0x8>

unsigned char SPI_Read_Byte(unsigned char reg)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 296:	28 98       	cbi	0x05, 0	; 5
 298:	9a e1       	ldi	r25, 0x1A	; 26
 29a:	9a 95       	dec	r25
 29c:	f1 f7       	brne	.-4      	; 0x29a <SPI_Read_Byte+0xc>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <SPI_Read_Byte+0x12>
	_delay_us(10);
	SPI_Tranceiver(R_REGISTER + reg);
 2a0:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 2a4:	8a e1       	ldi	r24, 0x1A	; 26
 2a6:	8a 95       	dec	r24
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <SPI_Read_Byte+0x18>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <SPI_Read_Byte+0x1e>
	_delay_us(10);
	reg = SPI_Tranceiver(NOP);
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 2b2:	9a e1       	ldi	r25, 0x1A	; 26
 2b4:	9a 95       	dec	r25
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <SPI_Read_Byte+0x26>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <SPI_Read_Byte+0x2c>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2ba:	28 9a       	sbi	0x05, 0	; 5
	return reg;
}
 2bc:	08 95       	ret

000002be <SPI_Write_Byte>:

void SPI_Write_Byte(unsigned char reg, unsigned char data)
{
 2be:	cf 93       	push	r28
 2c0:	c6 2f       	mov	r28, r22
 2c2:	9a e1       	ldi	r25, 0x1A	; 26
 2c4:	9a 95       	dec	r25
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <SPI_Write_Byte+0x6>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <SPI_Write_Byte+0xc>
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 2ca:	28 98       	cbi	0x05, 0	; 5
 2cc:	9a e1       	ldi	r25, 0x1A	; 26
 2ce:	9a 95       	dec	r25
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <SPI_Write_Byte+0x10>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <SPI_Write_Byte+0x16>
	_delay_us(10);
	SPI_Tranceiver(W_REGISTER + reg);
 2d4:	80 5e       	subi	r24, 0xE0	; 224
 2d6:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 2da:	8a e1       	ldi	r24, 0x1A	; 26
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <SPI_Write_Byte+0x1e>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <SPI_Write_Byte+0x24>
	_delay_us(10);
	SPI_Tranceiver(data);
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 2e8:	9a e1       	ldi	r25, 0x1A	; 26
 2ea:	9a 95       	dec	r25
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <SPI_Write_Byte+0x2c>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <SPI_Write_Byte+0x32>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2f0:	28 9a       	sbi	0x05, 0	; 5
}
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <nRF_Flush_TX>:
 2f6:	8a e1       	ldi	r24, 0x1A	; 26
 2f8:	8a 95       	dec	r24
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <nRF_Flush_TX+0x2>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <nRF_Flush_TX+0x8>
}

void nRF_Flush_TX(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 2fe:	28 98       	cbi	0x05, 0	; 5
 300:	8a e1       	ldi	r24, 0x1A	; 26
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <nRF_Flush_TX+0xc>
 306:	00 c0       	rjmp	.+0      	; 0x308 <nRF_Flush_TX+0x12>
	_delay_us(10);
	SPI_Tranceiver(FLUSH_TX);
 308:	81 ee       	ldi	r24, 0xE1	; 225
 30a:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 30e:	8a e1       	ldi	r24, 0x1A	; 26
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <nRF_Flush_TX+0x1a>
 314:	00 c0       	rjmp	.+0      	; 0x316 <nRF_Flush_TX+0x20>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 316:	28 9a       	sbi	0x05, 0	; 5
 318:	8a e1       	ldi	r24, 0x1A	; 26
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <nRF_Flush_TX+0x24>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <nRF_Flush_TX+0x2a>
 320:	08 95       	ret

00000322 <nRF_TX_Mode>:
	_delay_ms(10);		//10ms delay after power-up
}

void nRF_TX_Mode(void)
{
	PORTB &= ~_BV(CE);						 //CE low - Standby-I
 322:	2d 98       	cbi	0x05, 5	; 5
	//Power-up and set as TX
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) & ~(1 << PRIM_RX));
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Read_Byte>
 32a:	68 2f       	mov	r22, r24
 32c:	6e 7f       	andi	r22, 0xFE	; 254
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << PWR_UP));
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Read_Byte>
 33a:	68 2f       	mov	r22, r24
 33c:	62 60       	ori	r22, 0x02	; 2
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
	nRF_Flush_TX();							 //Flush TX FIFO
 344:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <nRF_Flush_TX>
	SPI_Write_Byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 348:	60 e7       	ldi	r22, 0x70	; 112
 34a:	87 e0       	ldi	r24, 0x07	; 7
 34c:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
	//Mask TX_DR and MAX_RT interrupts
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Read_Byte>
 356:	68 2f       	mov	r22, r24
 358:	60 63       	ori	r22, 0x30	; 48
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
 360:	8b e2       	ldi	r24, 0x2B	; 43
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <nRF_TX_Mode+0x42>
 368:	00 c0       	rjmp	.+0      	; 0x36a <nRF_TX_Mode+0x48>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <nRF_Flush_RX>:
 36e:	8a e1       	ldi	r24, 0x1A	; 26
 370:	8a 95       	dec	r24
 372:	f1 f7       	brne	.-4      	; 0x370 <nRF_Flush_RX+0x2>
 374:	00 c0       	rjmp	.+0      	; 0x376 <nRF_Flush_RX+0x8>
}

void nRF_Flush_RX(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 376:	28 98       	cbi	0x05, 0	; 5
 378:	8a e1       	ldi	r24, 0x1A	; 26
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <nRF_Flush_RX+0xc>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <nRF_Flush_RX+0x12>
	_delay_us(10);
	SPI_Tranceiver(FLUSH_RX);
 380:	82 ee       	ldi	r24, 0xE2	; 226
 382:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 386:	8a e1       	ldi	r24, 0x1A	; 26
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <nRF_Flush_RX+0x1a>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <nRF_Flush_RX+0x20>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 38e:	28 9a       	sbi	0x05, 0	; 5
 390:	8a e1       	ldi	r24, 0x1A	; 26
 392:	8a 95       	dec	r24
 394:	f1 f7       	brne	.-4      	; 0x392 <nRF_Flush_RX+0x24>
 396:	00 c0       	rjmp	.+0      	; 0x398 <nRF_Flush_RX+0x2a>
 398:	08 95       	ret

0000039a <nRF_RX_Mode>:
	_delay_us(150);
}

void nRF_RX_Mode(void)
{
	PORTB &= ~_BV(CE); 						 //CE low - Standby-I
 39a:	2d 98       	cbi	0x05, 5	; 5
	//Power-up as set as RX
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << PWR_UP) | (1 << PRIM_RX));
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Read_Byte>
 3a2:	68 2f       	mov	r22, r24
 3a4:	63 60       	ori	r22, 0x03	; 3
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
	nRF_Flush_RX();							 //Flush RX FIFO
 3ac:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF_Flush_RX>
	SPI_Write_Byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 3b0:	60 e7       	ldi	r22, 0x70	; 112
 3b2:	87 e0       	ldi	r24, 0x07	; 7
 3b4:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
	//Mask TX_DR and MAX_RT interrupts
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 47 01 	call	0x28e	; 0x28e <SPI_Read_Byte>
 3be:	68 2f       	mov	r22, r24
 3c0:	60 63       	ori	r22, 0x30	; 48
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
	PORTB |= _BV(CE);  						 //CE high
 3c8:	2d 9a       	sbi	0x05, 5	; 5
 3ca:	8b e2       	ldi	r24, 0x2B	; 43
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <nRF_RX_Mode+0x34>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <nRF_RX_Mode+0x3a>
 3d4:	00 00       	nop
 3d6:	08 95       	ret

000003d8 <nRF_Init>:
}

void nRF_Init(void)
{
	//Enable auto-acknowledgment for data pipe 0
	SPI_Write_Byte(EN_AA, 0x01);
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

	//Enable data pipe 0
	SPI_Write_Byte(EN_RXADDR, 0x01);
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

	//Set address width to 5 bytes
	SPI_Write_Byte(SETUP_AW, 0x03);
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

	//Set channel frequency to 2.505GHz
	SPI_Write_Byte(RF_CH, 0x69);
 3f0:	69 e6       	ldi	r22, 0x69	; 105
 3f2:	85 e0       	ldi	r24, 0x05	; 5
 3f4:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

	//Set data rate to 2Mbps and 0dB gain
//	SPI_Write_Byte(RF_SETUP, 0x0E);

	//Set data rate to 250kbps and 0dB gain
	SPI_Write_Byte(RF_SETUP, 0x26);
 3f8:	66 e2       	ldi	r22, 0x26	; 38
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
 400:	8a e1       	ldi	r24, 0x1A	; 26
 402:	8a 95       	dec	r24
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	//Enable W_TX_PAYLOAD_NOACK command
//	SPI_Write_Byte(FEATURE, 0x01);

	//Set the 5-bytes receiver address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 408:	28 98       	cbi	0x05, 0	; 5
 40a:	9a e1       	ldi	r25, 0x1A	; 26
 40c:	9a 95       	dec	r25
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	_delay_us(10);
	//Setup p0 pipe address for receiving
	SPI_Tranceiver(W_REGISTER + RX_ADDR_P0);
 412:	8a e2       	ldi	r24, 0x2A	; 42
 414:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 418:	8a e1       	ldi	r24, 0x1A	; 26
 41a:	8a 95       	dec	r24
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	_delay_us(10);
	SPI_Tranceiver(0xAA);
 420:	8a ea       	ldi	r24, 0xAA	; 170
 422:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 426:	9a e1       	ldi	r25, 0x1A	; 26
 428:	9a 95       	dec	r25
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	_delay_us(10);
	SPI_Tranceiver(0xBB);
 42e:	8b eb       	ldi	r24, 0xBB	; 187
 430:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 434:	8a e1       	ldi	r24, 0x1A	; 26
 436:	8a 95       	dec	r24
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	_delay_us(10);
	SPI_Tranceiver(0xCC);
 43c:	8c ec       	ldi	r24, 0xCC	; 204
 43e:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 442:	9a e1       	ldi	r25, 0x1A	; 26
 444:	9a 95       	dec	r25
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	_delay_us(10);
	SPI_Tranceiver(0xDD);
 44a:	8d ed       	ldi	r24, 0xDD	; 221
 44c:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 450:	8a e1       	ldi	r24, 0x1A	; 26
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	_delay_us(10);
	SPI_Tranceiver(0xEE);
 458:	8e ee       	ldi	r24, 0xEE	; 238
 45a:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 45e:	9a e1       	ldi	r25, 0x1A	; 26
 460:	9a 95       	dec	r25
 462:	f1 f7       	brne	.-4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 466:	28 9a       	sbi	0x05, 0	; 5
 468:	8a e1       	ldi	r24, 0x1A	; 26
 46a:	8a 95       	dec	r24
 46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>

	//Set the 5-bytes transmitter address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 470:	28 98       	cbi	0x05, 0	; 5
 472:	9a e1       	ldi	r25, 0x1A	; 26
 474:	9a 95       	dec	r25
 476:	f1 f7       	brne	.-4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	_delay_us(10);
	//Setup the transmitter address
	SPI_Tranceiver(W_REGISTER + TX_ADDR);
 47a:	80 e3       	ldi	r24, 0x30	; 48
 47c:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 480:	8a e1       	ldi	r24, 0x1A	; 26
 482:	8a 95       	dec	r24
 484:	f1 f7       	brne	.-4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	_delay_us(10);
	SPI_Tranceiver(0x11);
 488:	81 e1       	ldi	r24, 0x11	; 17
 48a:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 48e:	9a e1       	ldi	r25, 0x1A	; 26
 490:	9a 95       	dec	r25
 492:	f1 f7       	brne	.-4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	_delay_us(10);
	SPI_Tranceiver(0x12);
 496:	82 e1       	ldi	r24, 0x12	; 18
 498:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 49c:	8a e1       	ldi	r24, 0x1A	; 26
 49e:	8a 95       	dec	r24
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	_delay_us(10);
	SPI_Tranceiver(0x13);
 4a4:	83 e1       	ldi	r24, 0x13	; 19
 4a6:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 4aa:	9a e1       	ldi	r25, 0x1A	; 26
 4ac:	9a 95       	dec	r25
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	_delay_us(10);
	SPI_Tranceiver(0x14);
 4b2:	84 e1       	ldi	r24, 0x14	; 20
 4b4:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 4b8:	8a e1       	ldi	r24, 0x1A	; 26
 4ba:	8a 95       	dec	r24
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
	_delay_us(10);
	SPI_Tranceiver(0x15);
 4c0:	85 e1       	ldi	r24, 0x15	; 21
 4c2:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 4c6:	9a e1       	ldi	r25, 0x1A	; 26
 4c8:	9a 95       	dec	r25
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 4ce:	28 9a       	sbi	0x05, 0	; 5

	//Set the payload width as 4-bytes
	SPI_Write_Byte(RX_PW_P0, 0x04);
 4d0:	64 e0       	ldi	r22, 0x04	; 4
 4d2:	81 e1       	ldi	r24, 0x11	; 17
 4d4:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

	//Set the retransmission delay to 750us with 15 retries
	SPI_Write_Byte(SETUP_RETR, 0x2F);
 4d8:	6f e2       	ldi	r22, 0x2F	; 47
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>

	//Boot the nRF as RX and mask the maximum retransmission interrupt(disable)
	//Enable CRC and set the length to 2-bytes
	nRF_RX_Mode();
 4e0:	0e 94 cd 01 	call	0x39a	; 0x39a <nRF_RX_Mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e4:	8f e1       	ldi	r24, 0x1F	; 31
 4e6:	9e e4       	ldi	r25, 0x4E	; 78
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ee:	00 00       	nop
 4f0:	08 95       	ret

000004f2 <nRF_send_Payload>:
	PORTB |= _BV(CSN);	//CSN high
	_delay_us(10);
}

void nRF_send_Payload(uint8_t *data, uint8_t len)
{
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
	uint8_t i;

	for(i = 0; i < len; i++)
 4fa:	66 23       	and	r22, r22
 4fc:	69 f0       	breq	.+26     	; 0x518 <nRF_send_Payload+0x26>
 4fe:	c3 e0       	ldi	r28, 0x03	; 3
 500:	d1 e0       	ldi	r29, 0x01	; 1
 502:	61 50       	subi	r22, 0x01	; 1
 504:	06 2f       	mov	r16, r22
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	0c 5f       	subi	r16, 0xFC	; 252
 50a:	1e 4f       	sbci	r17, 0xFE	; 254
	{
		SPI_Tranceiver(N1_payload_TX[i]);
 50c:	89 91       	ld	r24, Y+
 50e:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>

void nRF_send_Payload(uint8_t *data, uint8_t len)
{
	uint8_t i;

	for(i = 0; i < len; i++)
 512:	c0 17       	cp	r28, r16
 514:	d1 07       	cpc	r29, r17
 516:	d1 f7       	brne	.-12     	; 0x50c <nRF_send_Payload+0x1a>
	{
		SPI_Tranceiver(N1_payload_TX[i]);
	}
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <nRF_TX_Data>:

void nRF_TX_Data(unsigned char *tdata)
{
	nRF_Flush_TX();
 522:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <nRF_Flush_TX>
	PORTB &= ~_BV(CSN); //CSN low
 526:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 528:	8a e1       	ldi	r24, 0x1A	; 26
 52a:	8a 95       	dec	r24
 52c:	f1 f7       	brne	.-4      	; 0x52a <nRF_TX_Data+0x8>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <nRF_TX_Data+0xe>
	_delay_us(10);
	//Transmit payload with ACK enabled
	SPI_Tranceiver(W_TX_PAYLOAD);
 530:	80 ea       	ldi	r24, 0xA0	; 160
 532:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 536:	8a e1       	ldi	r24, 0x1A	; 26
 538:	8a 95       	dec	r24
 53a:	f1 f7       	brne	.-4      	; 0x538 <nRF_TX_Data+0x16>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <nRF_TX_Data+0x1c>
	_delay_us(10);
	nRF_send_Payload(N1_payload_TX, PAYLOAD_LEN);
 53e:	64 e0       	ldi	r22, 0x04	; 4
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 79 02 	call	0x4f2	; 0x4f2 <nRF_send_Payload>
 548:	8a e1       	ldi	r24, 0x1A	; 26
 54a:	8a 95       	dec	r24
 54c:	f1 f7       	brne	.-4      	; 0x54a <nRF_TX_Data+0x28>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <nRF_TX_Data+0x2e>
	_delay_us(10);
	PORTB |= _BV(CSN);  //CSN high
 550:	28 9a       	sbi	0x05, 0	; 5
 552:	8a e1       	ldi	r24, 0x1A	; 26
 554:	8a 95       	dec	r24
 556:	f1 f7       	brne	.-4      	; 0x554 <nRF_TX_Data+0x32>
 558:	00 c0       	rjmp	.+0      	; 0x55a <nRF_TX_Data+0x38>
	_delay_us(10);      //Need at least 10us before sending
	PORTB |= _BV(CE);   //CE high
 55a:	2d 9a       	sbi	0x05, 5	; 5
 55c:	8a e1       	ldi	r24, 0x1A	; 26
 55e:	8a 95       	dec	r24
 560:	f1 f7       	brne	.-4      	; 0x55e <nRF_TX_Data+0x3c>
 562:	00 c0       	rjmp	.+0      	; 0x564 <nRF_TX_Data+0x42>
	_delay_us(10);      //Hold CE high for at least 10us and not longer than 4ms
	PORTB &= ~_BV(CE);  //CE low
 564:	2d 98       	cbi	0x05, 5	; 5
 566:	08 95       	ret

00000568 <nRF_get_Status>:
}

uint8_t nRF_get_Status()
{
	uint8_t rv;
	PORTB &= ~_BV(CSN); //CSN low
 568:	28 98       	cbi	0x05, 0	; 5
	rv = SPI_Tranceiver(NOP);
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
	PORTB |= _BV(CSN);  //CSN high
 570:	28 9a       	sbi	0x05, 0	; 5
	return rv;
}
 572:	08 95       	ret

00000574 <nRF_is_Sending>:
uint8_t nRF_is_Sending()
{
	uint8_t status;

	/* read the current status */
	status = nRF_get_Status();
 574:	0e 94 b4 02 	call	0x568	; 0x568 <nRF_get_Status>
 578:	98 2f       	mov	r25, r24
 57a:	90 73       	andi	r25, 0x30	; 48
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	09 f0       	breq	.+2      	; 0x582 <nRF_is_Sending+0xe>
 580:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0; /* false */
	}

	return 1; /* true */
}
 582:	08 95       	ret

00000584 <INT6_Init>:

void INT6_Init(void)
{
	EICRB &= ~(1 << ISC60) | (1 << ISC61);	//INT6 active when low
 584:	ea e6       	ldi	r30, 0x6A	; 106
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	8f 7e       	andi	r24, 0xEF	; 239
 58c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT6);			//Enable INT6
 58e:	ee 9a       	sbi	0x1d, 6	; 29
	sei();					//Enable global interrupts
 590:	78 94       	sei
 592:	08 95       	ret

00000594 <nRF_get_Payload>:
	SPI_Write_Byte(STATUS, (1 << RX_DR));
}

/* send and receive multiple bytes over SPI */
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
 594:	ef 92       	push	r14
 596:	ff 92       	push	r15
 598:	0f 93       	push	r16
 59a:	1f 93       	push	r17
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
	uint8_t i;

	for(i=0; i<len; i++)
 5a0:	44 23       	and	r20, r20
 5a2:	d9 f0       	breq	.+54     	; 0x5da <nRF_get_Payload+0x46>
 5a4:	ec 01       	movw	r28, r24
 5a6:	06 2f       	mov	r16, r22
 5a8:	17 2f       	mov	r17, r23
 5aa:	41 50       	subi	r20, 0x01	; 1
 5ac:	e4 2e       	mov	r14, r20
 5ae:	f1 2c       	mov	r15, r1
 5b0:	2f ef       	ldi	r18, 0xFF	; 255
 5b2:	e2 1a       	sub	r14, r18
 5b4:	f2 0a       	sbc	r15, r18
 5b6:	e8 0e       	add	r14, r24
 5b8:	f9 1e       	adc	r15, r25
	{
		data_in[i] = SPI_Tranceiver(data_out[i]);
 5ba:	89 91       	ld	r24, Y+
 5bc:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 5c0:	f8 01       	movw	r30, r16
 5c2:	81 93       	st	Z+, r24
 5c4:	8f 01       	movw	r16, r30
//		UART_Tx(data_in[i]);
		if (data_in[i] == 0xAA)
 5c6:	8a 3a       	cpi	r24, 0xAA	; 170
 5c8:	29 f4       	brne	.+10     	; 0x5d4 <nRF_get_Payload+0x40>
		{
			RX_Payload_cnt++;
 5ca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <RX_Payload_cnt>
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <RX_Payload_cnt>
/* send and receive multiple bytes over SPI */
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
	uint8_t i;

	for(i=0; i<len; i++)
 5d4:	ce 15       	cp	r28, r14
 5d6:	df 05       	cpc	r29, r15
 5d8:	81 f7       	brne	.-32     	; 0x5ba <nRF_get_Payload+0x26>
		if (data_in[i] == 0xAA)
		{
			RX_Payload_cnt++;
		}
	}
}
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
 5e4:	ef 90       	pop	r14
 5e6:	08 95       	ret

000005e8 <__vector_7>:
	EIMSK |= (1 << INT6);			//Enable INT6
	sei();					//Enable global interrupts
}

ISR(INT6_vect)
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
	cli();					//Disable global interrupt
 60a:	f8 94       	cli

	PORTB &= ~_BV(CE); 			//Stop listening
 60c:	2d 98       	cbi	0x05, 5	; 5
	// Pull down chip select
	PORTB &= ~_BV(CSN); //CSN low
 60e:	28 98       	cbi	0x05, 0	; 5
 610:	8a e1       	ldi	r24, 0x1A	; 26
 612:	8a 95       	dec	r24
 614:	f1 f7       	brne	.-4      	; 0x612 <__vector_7+0x2a>
 616:	00 c0       	rjmp	.+0      	; 0x618 <__vector_7+0x30>
	_delay_us(10);
	// Send command to read RX payload
	SPI_Tranceiver(R_RX_PAYLOAD);
 618:	81 e6       	ldi	r24, 0x61	; 97
 61a:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Tranceiver>
 61e:	8a e1       	ldi	r24, 0x1A	; 26
 620:	8a 95       	dec	r24
 622:	f1 f7       	brne	.-4      	; 0x620 <__vector_7+0x38>
 624:	00 c0       	rjmp	.+0      	; 0x626 <__vector_7+0x3e>
	_delay_us(10);
	// Read payload
	nRF_get_Payload(N1_payload_RX, N1_payload_RX, PAYLOAD_LEN);
 626:	44 e0       	ldi	r20, 0x04	; 4
 628:	68 e0       	ldi	r22, 0x08	; 8
 62a:	71 e0       	ldi	r23, 0x01	; 1
 62c:	cb 01       	movw	r24, r22
 62e:	0e 94 ca 02 	call	0x594	; 0x594 <nRF_get_Payload>
 632:	8a e1       	ldi	r24, 0x1A	; 26
 634:	8a 95       	dec	r24
 636:	f1 f7       	brne	.-4      	; 0x634 <__vector_7+0x4c>
 638:	00 c0       	rjmp	.+0      	; 0x63a <__vector_7+0x52>
	_delay_us(10);
	// Pull up chip select
	PORTB |= _BV(CSN);  //CSN high
 63a:	28 9a       	sbi	0x05, 0	; 5
 63c:	8a e1       	ldi	r24, 0x1A	; 26
 63e:	8a 95       	dec	r24
 640:	f1 f7       	brne	.-4      	; 0x63e <__vector_7+0x56>
 642:	00 c0       	rjmp	.+0      	; 0x644 <__vector_7+0x5c>
	_delay_us(10);
	// Reset status register
	SPI_Write_Byte(STATUS, (1 << RX_DR));
 644:	60 e4       	ldi	r22, 0x40	; 64
 646:	87 e0       	ldi	r24, 0x07	; 7
 648:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
}
 64c:	ff 91       	pop	r31
 64e:	ef 91       	pop	r30
 650:	bf 91       	pop	r27
 652:	af 91       	pop	r26
 654:	9f 91       	pop	r25
 656:	8f 91       	pop	r24
 658:	7f 91       	pop	r23
 65a:	6f 91       	pop	r22
 65c:	5f 91       	pop	r21
 65e:	4f 91       	pop	r20
 660:	3f 91       	pop	r19
 662:	2f 91       	pop	r18
 664:	0f 90       	pop	r0
 666:	0f be       	out	0x3f, r0	; 63
 668:	0f 90       	pop	r0
 66a:	1f 90       	pop	r1
 66c:	18 95       	reti

0000066e <nRF_Reset>:
 66e:	8a e1       	ldi	r24, 0x1A	; 26
 670:	8a 95       	dec	r24
 672:	f1 f7       	brne	.-4      	; 0x670 <nRF_Reset+0x2>
 674:	00 c0       	rjmp	.+0      	; 0x676 <nRF_Reset+0x8>

void nRF_Reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
	SPI_Write_Byte(STATUS, 0x70);
 676:	60 e7       	ldi	r22, 0x70	; 112
 678:	87 e0       	ldi	r24, 0x07	; 7
 67a:	0e 94 5f 01 	call	0x2be	; 0x2be <SPI_Write_Byte>
 67e:	8a e1       	ldi	r24, 0x1A	; 26
 680:	8a 95       	dec	r24
 682:	f1 f7       	brne	.-4      	; 0x680 <nRF_Reset+0x12>
 684:	00 c0       	rjmp	.+0      	; 0x686 <nRF_Reset+0x18>
 686:	08 95       	ret

00000688 <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 688:	0e 94 6a 00 	call	0xd4	; 0xd4 <AVR_Init>
	i2c_init();
 68c:	0e 94 92 03 	call	0x724	; 0x724 <i2c_init>
	UART_Init();
 690:	0e 94 9d 00 	call	0x13a	; 0x13a <UART_Init>
	SPI_Init();
 694:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_Init>
	nRF_Init();
 698:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF_Init>
	INT6_Init();
 69c:	0e 94 c2 02 	call	0x584	; 0x584 <INT6_Init>

	//Initialize the received payload count
	RX_Payload_cnt = 0;
 6a0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <RX_Payload_cnt>

	VCell_H = 0;
 6a4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <VCell_H>
	VCell_L = 0;
 6a8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <VCell_L>
	SOC_H = 0;
 6ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	SOC_L = 0;
 6b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SOC_L>

	//MAX17043 Initialization & Configuration
	MAX17043_Power_On_Reset();
 6b4:	0e 94 1b 01 	call	0x236	; 0x236 <MAX17043_Power_On_Reset>
//	MAX17043_Config();
	MAX17043_Quick_Start();
 6b8:	0e 94 21 01 	call	0x242	; 0x242 <MAX17043_Quick_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	89 e6       	ldi	r24, 0x69	; 105
 6c0:	98 e1       	ldi	r25, 0x18	; 24
 6c2:	21 50       	subi	r18, 0x01	; 1
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	90 40       	sbci	r25, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <main+0x3a>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x44>
 6cc:	00 00       	nop
	_delay_ms(1000);			//1 second pause

	nRF_Flush_RX();
 6ce:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF_Flush_RX>
	nRF_Reset();
 6d2:	0e 94 37 03 	call	0x66e	; 0x66e <nRF_Reset>
	PORTB |= _BV(CE);			//Start listening
 6d6:	2d 9a       	sbi	0x05, 5	; 5

	//Endless Loop
	while(1)
	{
		if (RX_Payload_cnt == PAYLOAD_LEN)
 6d8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <RX_Payload_cnt>
 6dc:	84 30       	cpi	r24, 0x04	; 4
 6de:	e1 f7       	brne	.-8      	; 0x6d8 <main+0x50>
		{
			RX_Payload_cnt = 0;
 6e0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <RX_Payload_cnt>

			//Configure as Transmitter
			nRF_TX_Mode();
 6e4:	0e 94 91 01 	call	0x322	; 0x322 <nRF_TX_Mode>
		
			MAX17043_Read_VCELL();
 6e8:	0e 94 bb 00 	call	0x176	; 0x176 <MAX17043_Read_VCELL>
			MAX17043_Read_SOC();
 6ec:	0e 94 df 00 	call	0x1be	; 0x1be <MAX17043_Read_SOC>
 6f0:	2f ef       	ldi	r18, 0xFF	; 255
 6f2:	89 e6       	ldi	r24, 0x69	; 105
 6f4:	98 e1       	ldi	r25, 0x18	; 24
 6f6:	21 50       	subi	r18, 0x01	; 1
 6f8:	80 40       	sbci	r24, 0x00	; 0
 6fa:	90 40       	sbci	r25, 0x00	; 0
 6fc:	e1 f7       	brne	.-8      	; 0x6f6 <main+0x6e>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <main+0x78>
 700:	00 00       	nop
			_delay_ms(1000);	//1 second pause

//			_delay_ms(1);

			nRF_TX_Data(N1_payload_TX);
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 91 02 	call	0x522	; 0x522 <nRF_TX_Data>
			while(nRF_is_Sending());
 70a:	0e 94 ba 02 	call	0x574	; 0x574 <nRF_is_Sending>
 70e:	81 11       	cpse	r24, r1
 710:	fc cf       	rjmp	.-8      	; 0x70a <main+0x82>
			nRF_Reset();
 712:	0e 94 37 03 	call	0x66e	; 0x66e <nRF_Reset>

			//Configure as Receiver
			nRF_RX_Mode();
 716:	0e 94 cd 01 	call	0x39a	; 0x39a <nRF_RX_Mode>
			nRF_Flush_RX();
 71a:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF_Flush_RX>
			PORTB |= _BV(CE);	//Start listening again
 71e:	2d 9a       	sbi	0x05, 5	; 5
			sei();
 720:	78 94       	sei
 722:	da cf       	rjmp	.-76     	; 0x6d8 <main+0x50>

00000724 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */

  TWSR = 0;                         /* no prescaler */
 724:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 728:	82 e0       	ldi	r24, 0x02	; 2
 72a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 72e:	08 95       	ret

00000730 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 730:	94 ea       	ldi	r25, 0xA4	; 164
 732:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 736:	ec eb       	ldi	r30, 0xBC	; 188
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	90 81       	ld	r25, Z
 73c:	99 23       	and	r25, r25
 73e:	ec f7       	brge	.-6      	; 0x73a <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 740:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 744:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 746:	98 30       	cpi	r25, 0x08	; 8
 748:	11 f0       	breq	.+4      	; 0x74e <i2c_start+0x1e>
 74a:	90 31       	cpi	r25, 0x10	; 16
 74c:	a1 f4       	brne	.+40     	; 0x776 <i2c_start+0x46>

	// send device address
	TWDR = address;
 74e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 752:	84 e8       	ldi	r24, 0x84	; 132
 754:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 758:	ec eb       	ldi	r30, 0xBC	; 188
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	88 23       	and	r24, r24
 760:	ec f7       	brge	.-6      	; 0x75c <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 762:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 766:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 768:	98 31       	cpi	r25, 0x18	; 24
 76a:	39 f0       	breq	.+14     	; 0x77a <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 34       	cpi	r25, 0x40	; 64
 770:	29 f4       	brne	.+10     	; 0x77c <i2c_start+0x4c>
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	08 95       	ret
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 77a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 77c:	08 95       	ret

0000077e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready

 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 782:	ec eb       	ldi	r30, 0xBC	; 188
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	24 ea       	ldi	r18, 0xA4	; 164

    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 788:	a9 eb       	ldi	r26, 0xB9	; 185
 78a:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;

    	// send device address
    	TWDR = address;
 78c:	cb eb       	ldi	r28, 0xBB	; 187
 78e:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 790:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
    	{
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 792:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 794:	20 83       	st	Z, r18

    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 796:	90 81       	ld	r25, Z
 798:	99 23       	and	r25, r25
 79a:	ec f7       	brge	.-6      	; 0x796 <i2c_start_wait+0x18>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 79c:	9c 91       	ld	r25, X
 79e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 7a0:	98 30       	cpi	r25, 0x08	; 8
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <i2c_start_wait+0x2a>
 7a4:	90 31       	cpi	r25, 0x10	; 16
 7a6:	b1 f7       	brne	.-20     	; 0x794 <i2c_start_wait+0x16>

    	// send device address
    	TWDR = address;
 7a8:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 7aa:	30 83       	st	Z, r19

    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 7ac:	90 81       	ld	r25, Z
 7ae:	99 23       	and	r25, r25
 7b0:	ec f7       	brge	.-6      	; 0x7ac <i2c_start_wait+0x2e>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 7b2:	9c 91       	ld	r25, X
 7b4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
 7b6:	90 32       	cpi	r25, 0x20	; 32
 7b8:	11 f0       	breq	.+4      	; 0x7be <i2c_start_wait+0x40>
 7ba:	98 35       	cpi	r25, 0x58	; 88
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <i2c_start_wait+0x4a>
    	{
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 7be:	40 83       	st	Z, r20

	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 7c0:	90 81       	ld	r25, Z
 7c2:	94 fd       	sbrc	r25, 4
 7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <i2c_start_wait+0x42>
 7c6:	e6 cf       	rjmp	.-52     	; 0x794 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	08 95       	ret

000007ce <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 7ce:	0e 94 98 03 	call	0x730	; 0x730 <i2c_start>

}/* i2c_rep_start */
 7d2:	08 95       	ret

000007d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 7d4:	84 e9       	ldi	r24, 0x94	; 148
 7d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 7da:	ec eb       	ldi	r30, 0xBC	; 188
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	84 fd       	sbrc	r24, 4
 7e2:	fd cf       	rjmp	.-6      	; 0x7de <i2c_stop+0xa>

}/* i2c_stop */
 7e4:	08 95       	ret

000007e6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{
    uint8_t   twst;

	// send data to the previously addressed device
	TWDR = data;
 7e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 7ea:	84 e8       	ldi	r24, 0x84	; 132
 7ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 7f0:	ec eb       	ldi	r30, 0xBC	; 188
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	88 23       	and	r24, r24
 7f8:	ec f7       	brge	.-6      	; 0x7f4 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 7fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 7fe:	98 7f       	andi	r25, 0xF8	; 248
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	98 32       	cpi	r25, 0x28	; 40
 804:	09 f4       	brne	.+2      	; 0x808 <i2c_write+0x22>
 806:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 808:	08 95       	ret

0000080a <i2c_readAck>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 80a:	84 ec       	ldi	r24, 0xC4	; 196
 80c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 810:	ec eb       	ldi	r30, 0xBC	; 188
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	88 23       	and	r24, r24
 818:	ec f7       	brge	.-6      	; 0x814 <i2c_readAck+0xa>

    return TWDR;
 81a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
 81e:	08 95       	ret

00000820 <i2c_readNak>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 820:	84 e8       	ldi	r24, 0x84	; 132
 822:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 826:	ec eb       	ldi	r30, 0xBC	; 188
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	88 23       	and	r24, r24
 82e:	ec f7       	brge	.-6      	; 0x82a <i2c_readNak+0xa>

    return TWDR;
 830:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 834:	08 95       	ret

00000836 <_exit>:
 836:	f8 94       	cli

00000838 <__stop_program>:
 838:	ff cf       	rjmp	.-2      	; 0x838 <__stop_program>

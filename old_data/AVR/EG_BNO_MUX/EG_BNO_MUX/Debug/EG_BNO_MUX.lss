
EG_BNO_MUX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000968  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800190  00800190  00000a8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d5f  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d78  00000000  00000000  00002923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b16  00000000  00000000  0000369b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000041b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c4  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f4  00000000  00000000  00004c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000556c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 39       	cpi	r26, 0x90	; 144
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e9       	ldi	r26, 0x90	; 144
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 3d       	cpi	r26, 0xD9	; 217
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
  e2:	0c 94 b2 04 	jmp	0x964	; 0x964 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
	UART_Put_String("MAG: ");
	Mag_Calib = (Cal_Stat_Data & 0x03);
	itoa(Mag_Calib, String_Data, 10);			//Convert integer to string, radix=10
	UART_Put_String(String_Data);
	UART_Put_String("\n");
}
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	51 9a       	sbi	0x0a, 1	; 10
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	3e 9a       	sbi	0x07, 6	; 7
 102:	3f 9a       	sbi	0x07, 7	; 7
 104:	54 9a       	sbi	0x0a, 4	; 10
 106:	56 9a       	sbi	0x0a, 6	; 10
 108:	57 9a       	sbi	0x0a, 7	; 10
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	46 98       	cbi	0x08, 6	; 8
 110:	47 9a       	sbi	0x08, 7	; 8
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	30 e7       	ldi	r19, 0x70	; 112
 116:	42 e0       	ldi	r20, 0x02	; 2
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	40 40       	sbci	r20, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <AVR_Init+0x2e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <AVR_Init+0x38>
 122:	00 00       	nop
 124:	46 9a       	sbi	0x08, 6	; 8
 126:	47 98       	cbi	0x08, 7	; 8
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	30 e7       	ldi	r19, 0x70	; 112
 12c:	42 e0       	ldi	r20, 0x02	; 2
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	40 40       	sbci	r20, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <AVR_Init+0x44>
 136:	00 c0       	rjmp	.+0      	; 0x138 <AVR_Init+0x4e>
 138:	00 00       	nop
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	41 f7       	brne	.-48     	; 0x10e <AVR_Init+0x24>
 13e:	46 98       	cbi	0x08, 6	; 8
 140:	47 98       	cbi	0x08, 7	; 8
 142:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <TWI_data>
 146:	8f e7       	ldi	r24, 0x7F	; 127
 148:	9f e4       	ldi	r25, 0x4F	; 79
 14a:	22 e1       	ldi	r18, 0x12	; 18
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	20 40       	sbci	r18, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <AVR_Init+0x62>
 154:	00 c0       	rjmp	.+0      	; 0x156 <AVR_Init+0x6c>
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <UART_Init>:
 15a:	83 e3       	ldi	r24, 0x33	; 51
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 162:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 166:	e8 ec       	ldi	r30, 0xC8	; 200
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8d 7f       	andi	r24, 0xFD	; 253
 16e:	80 83       	st	Z, r24
 170:	ea ec       	ldi	r30, 0xCA	; 202
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	86 60       	ori	r24, 0x06	; 6
 178:	80 83       	st	Z, r24
 17a:	e9 ec       	ldi	r30, 0xC9	; 201
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	88 61       	ori	r24, 0x18	; 24
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <UART_Tx>:
 186:	e8 ec       	ldi	r30, 0xC8	; 200
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	95 ff       	sbrs	r25, 5
 18e:	fd cf       	rjmp	.-6      	; 0x18a <UART_Tx+0x4>
 190:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 194:	08 95       	ret

00000196 <UART_Put_String>:
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
 19c:	88 81       	ld	r24, Y
 19e:	88 23       	and	r24, r24
 1a0:	31 f0       	breq	.+12     	; 0x1ae <UART_Put_String+0x18>
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	0e 94 c3 00 	call	0x186	; 0x186 <UART_Tx>
 1a8:	89 91       	ld	r24, Y+
 1aa:	81 11       	cpse	r24, r1
 1ac:	fb cf       	rjmp	.-10     	; 0x1a4 <UART_Put_String+0xe>
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <BNO_MUX_Select>:
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	a1 f0       	breq	.+40     	; 0x1e0 <BNO_MUX_Select+0x2c>
 1b8:	28 f4       	brcc	.+10     	; 0x1c4 <BNO_MUX_Select+0x10>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	49 f0       	breq	.+18     	; 0x1d0 <BNO_MUX_Select+0x1c>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	59 f0       	breq	.+22     	; 0x1d8 <BNO_MUX_Select+0x24>
 1c2:	1e c0       	rjmp	.+60     	; 0x200 <BNO_MUX_Select+0x4c>
 1c4:	85 30       	cpi	r24, 0x05	; 5
 1c6:	a1 f0       	breq	.+40     	; 0x1f0 <BNO_MUX_Select+0x3c>
 1c8:	78 f0       	brcs	.+30     	; 0x1e8 <BNO_MUX_Select+0x34>
 1ca:	86 30       	cpi	r24, 0x06	; 6
 1cc:	a9 f0       	breq	.+42     	; 0x1f8 <BNO_MUX_Select+0x44>
 1ce:	18 c0       	rjmp	.+48     	; 0x200 <BNO_MUX_Select+0x4c>
 1d0:	5c 9a       	sbi	0x0b, 4	; 11
 1d2:	5e 98       	cbi	0x0b, 6	; 11
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	08 95       	ret
 1d8:	5c 98       	cbi	0x0b, 4	; 11
 1da:	5e 98       	cbi	0x0b, 6	; 11
 1dc:	5f 9a       	sbi	0x0b, 7	; 11
 1de:	08 95       	ret
 1e0:	5c 98       	cbi	0x0b, 4	; 11
 1e2:	5e 9a       	sbi	0x0b, 6	; 11
 1e4:	5f 98       	cbi	0x0b, 7	; 11
 1e6:	08 95       	ret
 1e8:	5c 9a       	sbi	0x0b, 4	; 11
 1ea:	5e 98       	cbi	0x0b, 6	; 11
 1ec:	5f 98       	cbi	0x0b, 7	; 11
 1ee:	08 95       	ret
 1f0:	5c 98       	cbi	0x0b, 4	; 11
 1f2:	5e 98       	cbi	0x0b, 6	; 11
 1f4:	5f 98       	cbi	0x0b, 7	; 11
 1f6:	08 95       	ret
 1f8:	5c 9a       	sbi	0x0b, 4	; 11
 1fa:	5e 9a       	sbi	0x0b, 6	; 11
 1fc:	5f 98       	cbi	0x0b, 7	; 11
 1fe:	08 95       	ret
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
 208:	08 95       	ret

0000020a <BNO_Init>:
 20a:	cf 93       	push	r28
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <BNO_MUX_Select>
 212:	80 e5       	ldi	r24, 0x50	; 80
 214:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <i2c_start_wait>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 24 03 	call	0x648	; 0x648 <i2c_write>
 21e:	81 e5       	ldi	r24, 0x51	; 81
 220:	0e 94 18 03 	call	0x630	; 0x630 <i2c_rep_start>
 224:	0e 94 41 03 	call	0x682	; 0x682 <i2c_readNak>
 228:	c8 2f       	mov	r28, r24
 22a:	0e 94 1b 03 	call	0x636	; 0x636 <i2c_stop>
 22e:	c0 3a       	cpi	r28, 0xA0	; 160
 230:	29 f0       	breq	.+10     	; 0x23c <BNO_Init+0x32>
 232:	84 e1       	ldi	r24, 0x14	; 20
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
 23a:	07 c0       	rjmp	.+14     	; 0x24a <BNO_Init+0x40>
 23c:	8a e2       	ldi	r24, 0x2A	; 42
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
 244:	80 ea       	ldi	r24, 0xA0	; 160
 246:	0e 94 c3 00 	call	0x186	; 0x186 <UART_Tx>
 24a:	80 e5       	ldi	r24, 0x50	; 80
 24c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <i2c_start_wait>
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	0e 94 24 03 	call	0x648	; 0x648 <i2c_write>
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	0e 94 24 03 	call	0x648	; 0x648 <i2c_write>
 25c:	0e 94 1b 03 	call	0x636	; 0x636 <i2c_stop>
 260:	2f e7       	ldi	r18, 0x7F	; 127
 262:	8f e4       	ldi	r24, 0x4F	; 79
 264:	92 e1       	ldi	r25, 0x12	; 18
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <BNO_Init+0x5c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <BNO_Init+0x66>
 270:	00 00       	nop
 272:	80 e5       	ldi	r24, 0x50	; 80
 274:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <i2c_start_wait>
 278:	8d e3       	ldi	r24, 0x3D	; 61
 27a:	0e 94 24 03 	call	0x648	; 0x648 <i2c_write>
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 24 03 	call	0x648	; 0x648 <i2c_write>
 284:	0e 94 1b 03 	call	0x636	; 0x636 <i2c_stop>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	80 e7       	ldi	r24, 0x70	; 112
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <BNO_Init+0x84>
 296:	00 c0       	rjmp	.+0      	; 0x298 <BNO_Init+0x8e>
 298:	00 00       	nop
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <BNO_get_Euler>:

void BNO_get_Euler(void)
{
 29e:	8f 92       	push	r8
 2a0:	9f 92       	push	r9
 2a2:	af 92       	push	r10
 2a4:	bf 92       	push	r11
 2a6:	cf 92       	push	r12
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
	i2c_start_wait(BNO055_ADDRESS + I2C_WRITE);	//Set device address and read mode
 2b6:	80 e5       	ldi	r24, 0x50	; 80
 2b8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <i2c_start_wait>
	i2c_write(BNO055_EULER_H_LSB_ADDR);		//Access LSB of Heading Euler angle
 2bc:	8a e1       	ldi	r24, 0x1A	; 26
 2be:	0e 94 24 03 	call	0x648	; 0x648 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS + I2C_READ);	//Set device address and read mode
 2c2:	81 e5       	ldi	r24, 0x51	; 81
 2c4:	0e 94 18 03 	call	0x630	; 0x630 <i2c_rep_start>
	Euler_H_LSB = i2c_readAck();			//Read Euler_H LSB
 2c8:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 2cc:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <Euler_H_LSB>
	Euler_H_MSB = i2c_readAck();			//Read Euler_H MSB
 2d0:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 2d4:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Euler_H_MSB>
	Euler_R_LSB = i2c_readAck();			//Read Euler_R LSB
 2d8:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 2dc:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Euler_R_LSB>
	Euler_R_MSB = i2c_readAck();			//Read Euler_R MSB
 2e0:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 2e4:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <Euler_R_MSB>
	Euler_P_LSB = i2c_readAck();			//Read Euler_P LSB
 2e8:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 2ec:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Euler_P_LSB>
	Euler_P_MSB = i2c_readNak();			//Read Euler_P MSB
 2f0:	0e 94 41 03 	call	0x682	; 0x682 <i2c_readNak>
 2f4:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Euler_P_MSB>
	i2c_stop();
 2f8:	0e 94 1b 03 	call	0x636	; 0x636 <i2c_stop>

	//Combine the raw Euler bytes to word
	Euler_H_Raw = (Euler_H_MSB << 8) | (Euler_H_LSB);
 2fc:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <Euler_H_MSB>
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	76 2f       	mov	r23, r22
 304:	66 27       	eor	r22, r22
 306:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <Euler_H_LSB>
 30a:	68 2b       	or	r22, r24
 30c:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <Euler_H_Raw+0x1>
 310:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <Euler_H_Raw>
	Euler_R_Raw = (Euler_R_MSB << 8) | (Euler_R_LSB);
 314:	00 91 ce 01 	lds	r16, 0x01CE	; 0x8001ce <Euler_R_MSB>
 318:	10 e0       	ldi	r17, 0x00	; 0
 31a:	10 2f       	mov	r17, r16
 31c:	00 27       	eor	r16, r16
 31e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <Euler_R_LSB>
 322:	08 2b       	or	r16, r24
 324:	10 93 a9 01 	sts	0x01A9, r17	; 0x8001a9 <Euler_R_Raw+0x1>
 328:	00 93 a8 01 	sts	0x01A8, r16	; 0x8001a8 <Euler_R_Raw>
	Euler_P_Raw = (Euler_P_MSB << 8) | (Euler_P_LSB);
 32c:	c0 91 cc 01 	lds	r28, 0x01CC	; 0x8001cc <Euler_P_MSB>
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	dc 2f       	mov	r29, r28
 334:	cc 27       	eor	r28, r28
 336:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <Euler_P_LSB>
 33a:	c8 2b       	or	r28, r24
 33c:	d0 93 d8 01 	sts	0x01D8, r29	; 0x8001d8 <Euler_P_Raw+0x1>
 340:	c0 93 d7 01 	sts	0x01D7, r28	; 0x8001d7 <Euler_P_Raw>

	//Normalize the Euler Angles
	Euler_H = (float)(Euler_H_Raw) * angle_scale;
 344:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 348:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 34c:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 350:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 354:	07 2e       	mov	r0, r23
 356:	00 0c       	add	r0, r0
 358:	88 0b       	sbc	r24, r24
 35a:	99 0b       	sbc	r25, r25
 35c:	0e 94 84 03 	call	0x708	; 0x708 <__floatsisf>
 360:	a7 01       	movw	r20, r14
 362:	96 01       	movw	r18, r12
 364:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__mulsf3>
 368:	4b 01       	movw	r8, r22
 36a:	5c 01       	movw	r10, r24
 36c:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <Euler_H>
 370:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <Euler_H+0x1>
 374:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <Euler_H+0x2>
 378:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <Euler_H+0x3>
	Euler_R = (float)(Euler_R_Raw) * angle_scale;
 37c:	b8 01       	movw	r22, r16
 37e:	11 0f       	add	r17, r17
 380:	88 0b       	sbc	r24, r24
 382:	99 0b       	sbc	r25, r25
 384:	0e 94 84 03 	call	0x708	; 0x708 <__floatsisf>
 388:	a7 01       	movw	r20, r14
 38a:	96 01       	movw	r18, r12
 38c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__mulsf3>
 390:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <Euler_R>
 394:	70 93 a4 01 	sts	0x01A4, r23	; 0x8001a4 <Euler_R+0x1>
 398:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Euler_R+0x2>
 39c:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Euler_R+0x3>
	Euler_P = (float)(Euler_P_Raw) * angle_scale;
 3a0:	be 01       	movw	r22, r28
 3a2:	dd 0f       	add	r29, r29
 3a4:	88 0b       	sbc	r24, r24
 3a6:	99 0b       	sbc	r25, r25
 3a8:	0e 94 84 03 	call	0x708	; 0x708 <__floatsisf>
 3ac:	a7 01       	movw	r20, r14
 3ae:	96 01       	movw	r18, r12
 3b0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__mulsf3>
 3b4:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <Euler_P>
 3b8:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <Euler_P+0x1>
 3bc:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Euler_P+0x2>
 3c0:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <Euler_P+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3c4:	c5 01       	movw	r24, r10
 3c6:	b4 01       	movw	r22, r8
 3c8:	0e 94 4c 03 	call	0x698	; 0x698 <__fixsfsi>
 3cc:	dc 01       	movw	r26, r24
 3ce:	cb 01       	movw	r24, r22
 3d0:	4a e0       	ldi	r20, 0x0A	; 10
 3d2:	6b ea       	ldi	r22, 0xAB	; 171
 3d4:	71 e0       	ldi	r23, 0x01	; 1
 3d6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__itoa_ncheck>
 3da:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <Euler_R>
 3de:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <Euler_R+0x1>
 3e2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Euler_R+0x2>
 3e6:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Euler_R+0x3>
 3ea:	0e 94 4c 03 	call	0x698	; 0x698 <__fixsfsi>
 3ee:	dc 01       	movw	r26, r24
 3f0:	cb 01       	movw	r24, r22
 3f2:	4a e0       	ldi	r20, 0x0A	; 10
 3f4:	6b eb       	ldi	r22, 0xBB	; 187
 3f6:	71 e0       	ldi	r23, 0x01	; 1
 3f8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__itoa_ncheck>
 3fc:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <Euler_P>
 400:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <Euler_P+0x1>
 404:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <Euler_P+0x2>
 408:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <Euler_P+0x3>
 40c:	0e 94 4c 03 	call	0x698	; 0x698 <__fixsfsi>
 410:	dc 01       	movw	r26, r24
 412:	cb 01       	movw	r24, r22
 414:	4a e0       	ldi	r20, 0x0A	; 10
 416:	60 e9       	ldi	r22, 0x90	; 144
 418:	71 e0       	ldi	r23, 0x01	; 1
 41a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__itoa_ncheck>
	itoa(Euler_H, Euler_H_String, 10);
	itoa(Euler_R, Euler_R_String, 10);
	itoa(Euler_P, Euler_P_String, 10);

	//Send the Euler angles via UART
	UART_Put_String("EH: ");
 41e:	8a e6       	ldi	r24, 0x6A	; 106
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(Euler_H_String);
 426:	8b ea       	ldi	r24, 0xAB	; 171
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(" ER: ");
 42e:	8f e6       	ldi	r24, 0x6F	; 111
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(Euler_R_String);
 436:	8b eb       	ldi	r24, 0xBB	; 187
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(" EP: ");
 43e:	85 e7       	ldi	r24, 0x75	; 117
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(Euler_P_String);
 446:	80 e9       	ldi	r24, 0x90	; 144
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String("\n");
 44e:	88 e2       	ldi	r24, 0x28	; 40
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
}
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	bf 90       	pop	r11
 468:	af 90       	pop	r10
 46a:	9f 90       	pop	r9
 46c:	8f 90       	pop	r8
 46e:	08 95       	ret

00000470 <BNO_get_Mag_Data>:

void BNO_get_Mag_Data(void)
{
 470:	bf 92       	push	r11
 472:	cf 92       	push	r12
 474:	df 92       	push	r13
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	e0 97       	sbiw	r28, 0x30	; 48
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
	//Store the Mag float values as string
	char Mag_X_String[16];
	char Mag_Y_String[16];
	char Mag_Z_String[16];
	
	i2c_start_wait(BNO055_ADDRESS + I2C_WRITE);	//Set device address and read mode
 492:	80 e5       	ldi	r24, 0x50	; 80
 494:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <i2c_start_wait>
	i2c_write(BNO055_MAG_DATA_X_LSB_ADDR);		//Access LSB of Magnetometer X-axis reading
 498:	8e e0       	ldi	r24, 0x0E	; 14
 49a:	0e 94 24 03 	call	0x648	; 0x648 <i2c_write>
	i2c_rep_start(BNO055_ADDRESS + I2C_READ);	//Set device address and read mode
 49e:	81 e5       	ldi	r24, 0x51	; 81
 4a0:	0e 94 18 03 	call	0x630	; 0x630 <i2c_rep_start>
	uint8_t Mag_X_LSB = i2c_readAck();		//Read Mag_X LSB
 4a4:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 4a8:	d8 2e       	mov	r13, r24
	uint8_t Mag_X_MSB = i2c_readAck();		//Read Mag_X MSB
 4aa:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 4ae:	c8 2e       	mov	r12, r24
	uint8_t Mag_Y_LSB = i2c_readAck();		//Read Mag_Y LSB
 4b0:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 4b4:	e8 2e       	mov	r14, r24
	uint8_t Mag_Y_MSB = i2c_readAck();		//Read Mag_Y MSB
 4b6:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 4ba:	18 2f       	mov	r17, r24
	uint8_t Mag_Z_LSB = i2c_readAck();		//Read Mag_Z LSB
 4bc:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_readAck>
 4c0:	08 2f       	mov	r16, r24
	uint8_t Mag_Z_MSB = i2c_readNak();		//Read Mag_Z MSB
 4c2:	0e 94 41 03 	call	0x682	; 0x682 <i2c_readNak>
 4c6:	b8 2e       	mov	r11, r24
	i2c_stop();
 4c8:	0e 94 1b 03 	call	0x636	; 0x636 <i2c_stop>

	//Combine the raw Mag bytes to word
	int16_t Mag_X_Raw = (Mag_X_MSB << 8) | (Mag_X_LSB);
	int16_t Mag_Y_Raw = (Mag_Y_MSB << 8) | (Mag_Y_LSB);
 4cc:	f1 2c       	mov	r15, r1
 4ce:	f1 2a       	or	r15, r17
	int16_t Mag_Z_Raw = (Mag_Z_MSB << 8) | (Mag_Z_LSB);
 4d0:	10 e0       	ldi	r17, 0x00	; 0
 4d2:	1b 29       	or	r17, r11
 4d4:	8d 2d       	mov	r24, r13
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	4a e0       	ldi	r20, 0x0A	; 10
 4da:	be 01       	movw	r22, r28
 4dc:	6f 5f       	subi	r22, 0xFF	; 255
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	9c 29       	or	r25, r12
 4e2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__itoa_ncheck>
 4e6:	4a e0       	ldi	r20, 0x0A	; 10
 4e8:	be 01       	movw	r22, r28
 4ea:	6f 5e       	subi	r22, 0xEF	; 239
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	c7 01       	movw	r24, r14
 4f0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__itoa_ncheck>
 4f4:	4a e0       	ldi	r20, 0x0A	; 10
 4f6:	be 01       	movw	r22, r28
 4f8:	6f 5d       	subi	r22, 0xDF	; 223
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	c8 01       	movw	r24, r16
 4fe:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__itoa_ncheck>
	itoa(Mag_X_Raw, Mag_X_String, 10);
	itoa(Mag_Y_Raw, Mag_Y_String, 10);
	itoa(Mag_Z_Raw, Mag_Z_String, 10);

	//Send the Euler angles via UART
	UART_Put_String("MX: ");
 502:	8b e7       	ldi	r24, 0x7B	; 123
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(Mag_X_String);
 50a:	ce 01       	movw	r24, r28
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(" MY: ");
 512:	80 e8       	ldi	r24, 0x80	; 128
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(Mag_Y_String);
 51a:	ce 01       	movw	r24, r28
 51c:	41 96       	adiw	r24, 0x11	; 17
 51e:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(" MZ: ");
 522:	86 e8       	ldi	r24, 0x86	; 134
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String(Mag_Z_String);
 52a:	ce 01       	movw	r24, r28
 52c:	81 96       	adiw	r24, 0x21	; 33
 52e:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
	UART_Put_String("  ");	
 532:	8c e8       	ldi	r24, 0x8C	; 140
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Put_String>
}
 53a:	e0 96       	adiw	r28, 0x30	; 48
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	cf 90       	pop	r12
 556:	bf 90       	pop	r11
 558:	08 95       	ret

0000055a <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 55a:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	UART_Init();
 55e:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_Init>
	i2c_init();
 562:	0e 94 c3 02 	call	0x586	; 0x586 <i2c_init>
	BNO_Init();
 566:	0e 94 05 01 	call	0x20a	; 0x20a <BNO_Init>
	//Endless Loop
	while(1)
	{

//		BNO_get_Calib_Stat();
		BNO_get_Mag_Data();
 56a:	0e 94 38 02 	call	0x470	; 0x470 <BNO_get_Mag_Data>
		BNO_get_Euler();
 56e:	0e 94 4f 01 	call	0x29e	; 0x29e <BNO_get_Euler>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	2f ef       	ldi	r18, 0xFF	; 255
 574:	84 e3       	ldi	r24, 0x34	; 52
 576:	9c e0       	ldi	r25, 0x0C	; 12
 578:	21 50       	subi	r18, 0x01	; 1
 57a:	80 40       	sbci	r24, 0x00	; 0
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x1e>
 580:	00 c0       	rjmp	.+0      	; 0x582 <main+0x28>
 582:	00 00       	nop
 584:	f2 cf       	rjmp	.-28     	; 0x56a <main+0x10>

00000586 <i2c_init>:
 586:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 58a:	82 e0       	ldi	r24, 0x02	; 2
 58c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 590:	08 95       	ret

00000592 <i2c_start>:
 592:	94 ea       	ldi	r25, 0xA4	; 164
 594:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 598:	ec eb       	ldi	r30, 0xBC	; 188
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	90 81       	ld	r25, Z
 59e:	99 23       	and	r25, r25
 5a0:	ec f7       	brge	.-6      	; 0x59c <i2c_start+0xa>
 5a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5a6:	98 7f       	andi	r25, 0xF8	; 248
 5a8:	98 30       	cpi	r25, 0x08	; 8
 5aa:	11 f0       	breq	.+4      	; 0x5b0 <i2c_start+0x1e>
 5ac:	90 31       	cpi	r25, 0x10	; 16
 5ae:	a1 f4       	brne	.+40     	; 0x5d8 <i2c_start+0x46>
 5b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 5b4:	84 e8       	ldi	r24, 0x84	; 132
 5b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5ba:	ec eb       	ldi	r30, 0xBC	; 188
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	88 23       	and	r24, r24
 5c2:	ec f7       	brge	.-6      	; 0x5be <i2c_start+0x2c>
 5c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5c8:	98 7f       	andi	r25, 0xF8	; 248
 5ca:	98 31       	cpi	r25, 0x18	; 24
 5cc:	39 f0       	breq	.+14     	; 0x5dc <i2c_start+0x4a>
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 34       	cpi	r25, 0x40	; 64
 5d2:	29 f4       	brne	.+10     	; 0x5de <i2c_start+0x4c>
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	08 95       	ret
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	08 95       	ret

000005e0 <i2c_start_wait>:
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	ec eb       	ldi	r30, 0xBC	; 188
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	24 ea       	ldi	r18, 0xA4	; 164
 5ea:	a9 eb       	ldi	r26, 0xB9	; 185
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	cb eb       	ldi	r28, 0xBB	; 187
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
 5f2:	34 e8       	ldi	r19, 0x84	; 132
 5f4:	44 e9       	ldi	r20, 0x94	; 148
 5f6:	20 83       	st	Z, r18
 5f8:	90 81       	ld	r25, Z
 5fa:	99 23       	and	r25, r25
 5fc:	ec f7       	brge	.-6      	; 0x5f8 <i2c_start_wait+0x18>
 5fe:	9c 91       	ld	r25, X
 600:	98 7f       	andi	r25, 0xF8	; 248
 602:	98 30       	cpi	r25, 0x08	; 8
 604:	11 f0       	breq	.+4      	; 0x60a <i2c_start_wait+0x2a>
 606:	90 31       	cpi	r25, 0x10	; 16
 608:	b1 f7       	brne	.-20     	; 0x5f6 <i2c_start_wait+0x16>
 60a:	88 83       	st	Y, r24
 60c:	30 83       	st	Z, r19
 60e:	90 81       	ld	r25, Z
 610:	99 23       	and	r25, r25
 612:	ec f7       	brge	.-6      	; 0x60e <i2c_start_wait+0x2e>
 614:	9c 91       	ld	r25, X
 616:	98 7f       	andi	r25, 0xF8	; 248
 618:	90 32       	cpi	r25, 0x20	; 32
 61a:	11 f0       	breq	.+4      	; 0x620 <i2c_start_wait+0x40>
 61c:	98 35       	cpi	r25, 0x58	; 88
 61e:	29 f4       	brne	.+10     	; 0x62a <i2c_start_wait+0x4a>
 620:	40 83       	st	Z, r20
 622:	90 81       	ld	r25, Z
 624:	94 fd       	sbrc	r25, 4
 626:	fd cf       	rjmp	.-6      	; 0x622 <i2c_start_wait+0x42>
 628:	e6 cf       	rjmp	.-52     	; 0x5f6 <i2c_start_wait+0x16>
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <i2c_rep_start>:
 630:	0e 94 c9 02 	call	0x592	; 0x592 <i2c_start>
 634:	08 95       	ret

00000636 <i2c_stop>:
 636:	84 e9       	ldi	r24, 0x94	; 148
 638:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 63c:	ec eb       	ldi	r30, 0xBC	; 188
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	84 fd       	sbrc	r24, 4
 644:	fd cf       	rjmp	.-6      	; 0x640 <i2c_stop+0xa>
 646:	08 95       	ret

00000648 <i2c_write>:
 648:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 64c:	84 e8       	ldi	r24, 0x84	; 132
 64e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 652:	ec eb       	ldi	r30, 0xBC	; 188
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	88 23       	and	r24, r24
 65a:	ec f7       	brge	.-6      	; 0x656 <i2c_write+0xe>
 65c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 660:	98 7f       	andi	r25, 0xF8	; 248
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	98 32       	cpi	r25, 0x28	; 40
 666:	09 f4       	brne	.+2      	; 0x66a <i2c_write+0x22>
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret

0000066c <i2c_readAck>:
 66c:	84 ec       	ldi	r24, 0xC4	; 196
 66e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 672:	ec eb       	ldi	r30, 0xBC	; 188
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	88 23       	and	r24, r24
 67a:	ec f7       	brge	.-6      	; 0x676 <i2c_readAck+0xa>
 67c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 680:	08 95       	ret

00000682 <i2c_readNak>:
 682:	84 e8       	ldi	r24, 0x84	; 132
 684:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 688:	ec eb       	ldi	r30, 0xBC	; 188
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	88 23       	and	r24, r24
 690:	ec f7       	brge	.-6      	; 0x68c <i2c_readNak+0xa>
 692:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 696:	08 95       	ret

00000698 <__fixsfsi>:
 698:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fixunssfsi>
 69c:	68 94       	set
 69e:	b1 11       	cpse	r27, r1
 6a0:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__fp_szero>
 6a4:	08 95       	ret

000006a6 <__fixunssfsi>:
 6a6:	0e 94 c7 03 	call	0x78e	; 0x78e <__fp_splitA>
 6aa:	88 f0       	brcs	.+34     	; 0x6ce <__fixunssfsi+0x28>
 6ac:	9f 57       	subi	r25, 0x7F	; 127
 6ae:	98 f0       	brcs	.+38     	; 0x6d6 <__fixunssfsi+0x30>
 6b0:	b9 2f       	mov	r27, r25
 6b2:	99 27       	eor	r25, r25
 6b4:	b7 51       	subi	r27, 0x17	; 23
 6b6:	b0 f0       	brcs	.+44     	; 0x6e4 <__fixunssfsi+0x3e>
 6b8:	e1 f0       	breq	.+56     	; 0x6f2 <__fixunssfsi+0x4c>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a f0       	brmi	.+6      	; 0x6ca <__fixunssfsi+0x24>
 6c4:	ba 95       	dec	r27
 6c6:	c9 f7       	brne	.-14     	; 0x6ba <__fixunssfsi+0x14>
 6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <__fixunssfsi+0x4c>
 6ca:	b1 30       	cpi	r27, 0x01	; 1
 6cc:	91 f0       	breq	.+36     	; 0x6f2 <__fixunssfsi+0x4c>
 6ce:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fp_zero>
 6d2:	b1 e0       	ldi	r27, 0x01	; 1
 6d4:	08 95       	ret
 6d6:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_zero>
 6da:	67 2f       	mov	r22, r23
 6dc:	78 2f       	mov	r23, r24
 6de:	88 27       	eor	r24, r24
 6e0:	b8 5f       	subi	r27, 0xF8	; 248
 6e2:	39 f0       	breq	.+14     	; 0x6f2 <__fixunssfsi+0x4c>
 6e4:	b9 3f       	cpi	r27, 0xF9	; 249
 6e6:	cc f3       	brlt	.-14     	; 0x6da <__fixunssfsi+0x34>
 6e8:	86 95       	lsr	r24
 6ea:	77 95       	ror	r23
 6ec:	67 95       	ror	r22
 6ee:	b3 95       	inc	r27
 6f0:	d9 f7       	brne	.-10     	; 0x6e8 <__fixunssfsi+0x42>
 6f2:	3e f4       	brtc	.+14     	; 0x702 <__fixunssfsi+0x5c>
 6f4:	90 95       	com	r25
 6f6:	80 95       	com	r24
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__floatunsisf>:
 704:	e8 94       	clt
 706:	09 c0       	rjmp	.+18     	; 0x71a <__floatsisf+0x12>

00000708 <__floatsisf>:
 708:	97 fb       	bst	r25, 7
 70a:	3e f4       	brtc	.+14     	; 0x71a <__floatsisf+0x12>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	99 23       	and	r25, r25
 71c:	a9 f0       	breq	.+42     	; 0x748 <__floatsisf+0x40>
 71e:	f9 2f       	mov	r31, r25
 720:	96 e9       	ldi	r25, 0x96	; 150
 722:	bb 27       	eor	r27, r27
 724:	93 95       	inc	r25
 726:	f6 95       	lsr	r31
 728:	87 95       	ror	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f1 11       	cpse	r31, r1
 732:	f8 cf       	rjmp	.-16     	; 0x724 <__floatsisf+0x1c>
 734:	fa f4       	brpl	.+62     	; 0x774 <__floatsisf+0x6c>
 736:	bb 0f       	add	r27, r27
 738:	11 f4       	brne	.+4      	; 0x73e <__floatsisf+0x36>
 73a:	60 ff       	sbrs	r22, 0
 73c:	1b c0       	rjmp	.+54     	; 0x774 <__floatsisf+0x6c>
 73e:	6f 5f       	subi	r22, 0xFF	; 255
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	16 c0       	rjmp	.+44     	; 0x774 <__floatsisf+0x6c>
 748:	88 23       	and	r24, r24
 74a:	11 f0       	breq	.+4      	; 0x750 <__floatsisf+0x48>
 74c:	96 e9       	ldi	r25, 0x96	; 150
 74e:	11 c0       	rjmp	.+34     	; 0x772 <__floatsisf+0x6a>
 750:	77 23       	and	r23, r23
 752:	21 f0       	breq	.+8      	; 0x75c <__floatsisf+0x54>
 754:	9e e8       	ldi	r25, 0x8E	; 142
 756:	87 2f       	mov	r24, r23
 758:	76 2f       	mov	r23, r22
 75a:	05 c0       	rjmp	.+10     	; 0x766 <__floatsisf+0x5e>
 75c:	66 23       	and	r22, r22
 75e:	71 f0       	breq	.+28     	; 0x77c <__floatsisf+0x74>
 760:	96 e8       	ldi	r25, 0x86	; 134
 762:	86 2f       	mov	r24, r22
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	2a f0       	brmi	.+10     	; 0x774 <__floatsisf+0x6c>
 76a:	9a 95       	dec	r25
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	da f7       	brpl	.-10     	; 0x76a <__floatsisf+0x62>
 774:	88 0f       	add	r24, r24
 776:	96 95       	lsr	r25
 778:	87 95       	ror	r24
 77a:	97 f9       	bld	r25, 7
 77c:	08 95       	ret

0000077e <__fp_split3>:
 77e:	57 fd       	sbrc	r21, 7
 780:	90 58       	subi	r25, 0x80	; 128
 782:	44 0f       	add	r20, r20
 784:	55 1f       	adc	r21, r21
 786:	59 f0       	breq	.+22     	; 0x79e <__fp_splitA+0x10>
 788:	5f 3f       	cpi	r21, 0xFF	; 255
 78a:	71 f0       	breq	.+28     	; 0x7a8 <__fp_splitA+0x1a>
 78c:	47 95       	ror	r20

0000078e <__fp_splitA>:
 78e:	88 0f       	add	r24, r24
 790:	97 fb       	bst	r25, 7
 792:	99 1f       	adc	r25, r25
 794:	61 f0       	breq	.+24     	; 0x7ae <__fp_splitA+0x20>
 796:	9f 3f       	cpi	r25, 0xFF	; 255
 798:	79 f0       	breq	.+30     	; 0x7b8 <__fp_splitA+0x2a>
 79a:	87 95       	ror	r24
 79c:	08 95       	ret
 79e:	12 16       	cp	r1, r18
 7a0:	13 06       	cpc	r1, r19
 7a2:	14 06       	cpc	r1, r20
 7a4:	55 1f       	adc	r21, r21
 7a6:	f2 cf       	rjmp	.-28     	; 0x78c <__fp_split3+0xe>
 7a8:	46 95       	lsr	r20
 7aa:	f1 df       	rcall	.-30     	; 0x78e <__fp_splitA>
 7ac:	08 c0       	rjmp	.+16     	; 0x7be <__fp_splitA+0x30>
 7ae:	16 16       	cp	r1, r22
 7b0:	17 06       	cpc	r1, r23
 7b2:	18 06       	cpc	r1, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	f1 cf       	rjmp	.-30     	; 0x79a <__fp_splitA+0xc>
 7b8:	86 95       	lsr	r24
 7ba:	71 05       	cpc	r23, r1
 7bc:	61 05       	cpc	r22, r1
 7be:	08 94       	sec
 7c0:	08 95       	ret

000007c2 <__fp_zero>:
 7c2:	e8 94       	clt

000007c4 <__fp_szero>:
 7c4:	bb 27       	eor	r27, r27
 7c6:	66 27       	eor	r22, r22
 7c8:	77 27       	eor	r23, r23
 7ca:	cb 01       	movw	r24, r22
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__mulsf3>:
 7d0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__mulsf3x>
 7d4:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_round>
 7d8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_pscA>
 7dc:	38 f0       	brcs	.+14     	; 0x7ec <__mulsf3+0x1c>
 7de:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_pscB>
 7e2:	20 f0       	brcs	.+8      	; 0x7ec <__mulsf3+0x1c>
 7e4:	95 23       	and	r25, r21
 7e6:	11 f0       	breq	.+4      	; 0x7ec <__mulsf3+0x1c>
 7e8:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_inf>
 7ec:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_nan>
 7f0:	11 24       	eor	r1, r1
 7f2:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__fp_szero>

000007f6 <__mulsf3x>:
 7f6:	0e 94 bf 03 	call	0x77e	; 0x77e <__fp_split3>
 7fa:	70 f3       	brcs	.-36     	; 0x7d8 <__mulsf3+0x8>

000007fc <__mulsf3_pse>:
 7fc:	95 9f       	mul	r25, r21
 7fe:	c1 f3       	breq	.-16     	; 0x7f0 <__mulsf3+0x20>
 800:	95 0f       	add	r25, r21
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	55 1f       	adc	r21, r21
 806:	62 9f       	mul	r22, r18
 808:	f0 01       	movw	r30, r0
 80a:	72 9f       	mul	r23, r18
 80c:	bb 27       	eor	r27, r27
 80e:	f0 0d       	add	r31, r0
 810:	b1 1d       	adc	r27, r1
 812:	63 9f       	mul	r22, r19
 814:	aa 27       	eor	r26, r26
 816:	f0 0d       	add	r31, r0
 818:	b1 1d       	adc	r27, r1
 81a:	aa 1f       	adc	r26, r26
 81c:	64 9f       	mul	r22, r20
 81e:	66 27       	eor	r22, r22
 820:	b0 0d       	add	r27, r0
 822:	a1 1d       	adc	r26, r1
 824:	66 1f       	adc	r22, r22
 826:	82 9f       	mul	r24, r18
 828:	22 27       	eor	r18, r18
 82a:	b0 0d       	add	r27, r0
 82c:	a1 1d       	adc	r26, r1
 82e:	62 1f       	adc	r22, r18
 830:	73 9f       	mul	r23, r19
 832:	b0 0d       	add	r27, r0
 834:	a1 1d       	adc	r26, r1
 836:	62 1f       	adc	r22, r18
 838:	83 9f       	mul	r24, r19
 83a:	a0 0d       	add	r26, r0
 83c:	61 1d       	adc	r22, r1
 83e:	22 1f       	adc	r18, r18
 840:	74 9f       	mul	r23, r20
 842:	33 27       	eor	r19, r19
 844:	a0 0d       	add	r26, r0
 846:	61 1d       	adc	r22, r1
 848:	23 1f       	adc	r18, r19
 84a:	84 9f       	mul	r24, r20
 84c:	60 0d       	add	r22, r0
 84e:	21 1d       	adc	r18, r1
 850:	82 2f       	mov	r24, r18
 852:	76 2f       	mov	r23, r22
 854:	6a 2f       	mov	r22, r26
 856:	11 24       	eor	r1, r1
 858:	9f 57       	subi	r25, 0x7F	; 127
 85a:	50 40       	sbci	r21, 0x00	; 0
 85c:	9a f0       	brmi	.+38     	; 0x884 <__mulsf3_pse+0x88>
 85e:	f1 f0       	breq	.+60     	; 0x89c <__mulsf3_pse+0xa0>
 860:	88 23       	and	r24, r24
 862:	4a f0       	brmi	.+18     	; 0x876 <__mulsf3_pse+0x7a>
 864:	ee 0f       	add	r30, r30
 866:	ff 1f       	adc	r31, r31
 868:	bb 1f       	adc	r27, r27
 86a:	66 1f       	adc	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	91 50       	subi	r25, 0x01	; 1
 872:	50 40       	sbci	r21, 0x00	; 0
 874:	a9 f7       	brne	.-22     	; 0x860 <__mulsf3_pse+0x64>
 876:	9e 3f       	cpi	r25, 0xFE	; 254
 878:	51 05       	cpc	r21, r1
 87a:	80 f0       	brcs	.+32     	; 0x89c <__mulsf3_pse+0xa0>
 87c:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_inf>
 880:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__fp_szero>
 884:	5f 3f       	cpi	r21, 0xFF	; 255
 886:	e4 f3       	brlt	.-8      	; 0x880 <__mulsf3_pse+0x84>
 888:	98 3e       	cpi	r25, 0xE8	; 232
 88a:	d4 f3       	brlt	.-12     	; 0x880 <__mulsf3_pse+0x84>
 88c:	86 95       	lsr	r24
 88e:	77 95       	ror	r23
 890:	67 95       	ror	r22
 892:	b7 95       	ror	r27
 894:	f7 95       	ror	r31
 896:	e7 95       	ror	r30
 898:	9f 5f       	subi	r25, 0xFF	; 255
 89a:	c1 f7       	brne	.-16     	; 0x88c <__mulsf3_pse+0x90>
 89c:	fe 2b       	or	r31, r30
 89e:	88 0f       	add	r24, r24
 8a0:	91 1d       	adc	r25, r1
 8a2:	96 95       	lsr	r25
 8a4:	87 95       	ror	r24
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret

000008aa <__fp_inf>:
 8aa:	97 f9       	bld	r25, 7
 8ac:	9f 67       	ori	r25, 0x7F	; 127
 8ae:	80 e8       	ldi	r24, 0x80	; 128
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	08 95       	ret

000008b6 <__fp_nan>:
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	80 ec       	ldi	r24, 0xC0	; 192
 8ba:	08 95       	ret

000008bc <__fp_pscA>:
 8bc:	00 24       	eor	r0, r0
 8be:	0a 94       	dec	r0
 8c0:	16 16       	cp	r1, r22
 8c2:	17 06       	cpc	r1, r23
 8c4:	18 06       	cpc	r1, r24
 8c6:	09 06       	cpc	r0, r25
 8c8:	08 95       	ret

000008ca <__fp_pscB>:
 8ca:	00 24       	eor	r0, r0
 8cc:	0a 94       	dec	r0
 8ce:	12 16       	cp	r1, r18
 8d0:	13 06       	cpc	r1, r19
 8d2:	14 06       	cpc	r1, r20
 8d4:	05 06       	cpc	r0, r21
 8d6:	08 95       	ret

000008d8 <__fp_round>:
 8d8:	09 2e       	mov	r0, r25
 8da:	03 94       	inc	r0
 8dc:	00 0c       	add	r0, r0
 8de:	11 f4       	brne	.+4      	; 0x8e4 <__fp_round+0xc>
 8e0:	88 23       	and	r24, r24
 8e2:	52 f0       	brmi	.+20     	; 0x8f8 <__fp_round+0x20>
 8e4:	bb 0f       	add	r27, r27
 8e6:	40 f4       	brcc	.+16     	; 0x8f8 <__fp_round+0x20>
 8e8:	bf 2b       	or	r27, r31
 8ea:	11 f4       	brne	.+4      	; 0x8f0 <__fp_round+0x18>
 8ec:	60 ff       	sbrs	r22, 0
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <__fp_round+0x20>
 8f0:	6f 5f       	subi	r22, 0xFF	; 255
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	08 95       	ret

000008fa <__itoa_ncheck>:
 8fa:	bb 27       	eor	r27, r27
 8fc:	4a 30       	cpi	r20, 0x0A	; 10
 8fe:	31 f4       	brne	.+12     	; 0x90c <__itoa_ncheck+0x12>
 900:	99 23       	and	r25, r25
 902:	22 f4       	brpl	.+8      	; 0x90c <__itoa_ncheck+0x12>
 904:	bd e2       	ldi	r27, 0x2D	; 45
 906:	90 95       	com	r25
 908:	81 95       	neg	r24
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	0c 94 89 04 	jmp	0x912	; 0x912 <__utoa_common>

00000910 <__utoa_ncheck>:
 910:	bb 27       	eor	r27, r27

00000912 <__utoa_common>:
 912:	fb 01       	movw	r30, r22
 914:	55 27       	eor	r21, r21
 916:	aa 27       	eor	r26, r26
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	aa 1f       	adc	r26, r26
 91e:	a4 17       	cp	r26, r20
 920:	10 f0       	brcs	.+4      	; 0x926 <__utoa_common+0x14>
 922:	a4 1b       	sub	r26, r20
 924:	83 95       	inc	r24
 926:	50 51       	subi	r21, 0x10	; 16
 928:	b9 f7       	brne	.-18     	; 0x918 <__utoa_common+0x6>
 92a:	a0 5d       	subi	r26, 0xD0	; 208
 92c:	aa 33       	cpi	r26, 0x3A	; 58
 92e:	08 f0       	brcs	.+2      	; 0x932 <__utoa_common+0x20>
 930:	a9 5d       	subi	r26, 0xD9	; 217
 932:	a1 93       	st	Z+, r26
 934:	00 97       	sbiw	r24, 0x00	; 0
 936:	79 f7       	brne	.-34     	; 0x916 <__utoa_common+0x4>
 938:	b1 11       	cpse	r27, r1
 93a:	b1 93       	st	Z+, r27
 93c:	11 92       	st	Z+, r1
 93e:	cb 01       	movw	r24, r22
 940:	0c 94 a2 04 	jmp	0x944	; 0x944 <strrev>

00000944 <strrev>:
 944:	dc 01       	movw	r26, r24
 946:	fc 01       	movw	r30, r24
 948:	67 2f       	mov	r22, r23
 94a:	71 91       	ld	r23, Z+
 94c:	77 23       	and	r23, r23
 94e:	e1 f7       	brne	.-8      	; 0x948 <strrev+0x4>
 950:	32 97       	sbiw	r30, 0x02	; 2
 952:	04 c0       	rjmp	.+8      	; 0x95c <strrev+0x18>
 954:	7c 91       	ld	r23, X
 956:	6d 93       	st	X+, r22
 958:	70 83       	st	Z, r23
 95a:	62 91       	ld	r22, -Z
 95c:	ae 17       	cp	r26, r30
 95e:	bf 07       	cpc	r27, r31
 960:	c8 f3       	brcs	.-14     	; 0x954 <strrev+0x10>
 962:	08 95       	ret

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>

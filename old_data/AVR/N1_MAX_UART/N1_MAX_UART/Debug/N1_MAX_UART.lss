
N1_MAX_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001292  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c66  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085f  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006eb  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000489  00000000  00000000  00003547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a5 30       	cpi	r26, 0x05	; 5
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  cc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <AVR_Init>:
	while(*s)
	{
		UART_Tx(*s);
		s++;
	}
}
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  e0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	51 9a       	sbi	0x0a, 1	; 10
  e8:	50 98       	cbi	0x0a, 0	; 10
  ea:	3e 9a       	sbi	0x07, 6	; 7
  ec:	3f 9a       	sbi	0x07, 7	; 7
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	46 98       	cbi	0x08, 6	; 8
  f4:	47 9a       	sbi	0x08, 7	; 8
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	30 e7       	ldi	r19, 0x70	; 112
  fa:	42 e0       	ldi	r20, 0x02	; 2
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	40 40       	sbci	r20, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <AVR_Init+0x28>
 104:	00 c0       	rjmp	.+0      	; 0x106 <AVR_Init+0x32>
 106:	00 00       	nop
 108:	46 9a       	sbi	0x08, 6	; 8
 10a:	47 98       	cbi	0x08, 7	; 8
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	30 e7       	ldi	r19, 0x70	; 112
 110:	42 e0       	ldi	r20, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <AVR_Init+0x3e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <AVR_Init+0x48>
 11c:	00 00       	nop
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	41 f7       	brne	.-48     	; 0xf2 <AVR_Init+0x1e>
 122:	46 98       	cbi	0x08, 6	; 8
 124:	47 98       	cbi	0x08, 7	; 8
 126:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <TWI_data>
 12a:	08 95       	ret

0000012c <UART_Init>:
 12c:	83 e3       	ldi	r24, 0x33	; 51
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 134:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 138:	e8 ec       	ldi	r30, 0xC8	; 200
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	80 83       	st	Z, r24
 142:	ea ec       	ldi	r30, 0xCA	; 202
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	86 60       	ori	r24, 0x06	; 6
 14a:	80 83       	st	Z, r24
 14c:	e9 ec       	ldi	r30, 0xC9	; 201
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 61       	ori	r24, 0x18	; 24
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <UART_Tx>:
 158:	e8 ec       	ldi	r30, 0xC8	; 200
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	90 81       	ld	r25, Z
 15e:	95 ff       	sbrs	r25, 5
 160:	fd cf       	rjmp	.-6      	; 0x15c <UART_Tx+0x4>
 162:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 166:	08 95       	ret

00000168 <MAX17043_Write_Word>:

//	return SOC_H + SOC_decimal;
}

void MAX17043_Write_Word(uint8_t reg, uint8_t MSB, uint8_t LSB)
{
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	18 2f       	mov	r17, r24
 170:	d6 2f       	mov	r29, r22
 172:	c4 2f       	mov	r28, r20
	i2c_start_wait(MAX17043_ADDR + I2C_WRITE);	//Set device address and write mode
 174:	8c e6       	ldi	r24, 0x6C	; 108
 176:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_start_wait>
	i2c_write(reg);					//Access the Command register
 17a:	81 2f       	mov	r24, r17
 17c:	0e 94 b3 01 	call	0x366	; 0x366 <i2c_write>
	i2c_write(MSB);					//Write 0x54 to the lower byte of Command register
 180:	8d 2f       	mov	r24, r29
 182:	0e 94 b3 01 	call	0x366	; 0x366 <i2c_write>
	i2c_write(LSB);					//Write 0x00 to the higher byte of Command register
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 b3 01 	call	0x366	; 0x366 <i2c_write>
	i2c_stop();					//Stop the I2C transmission
 18c:	0e 94 aa 01 	call	0x354	; 0x354 <i2c_stop>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	08 95       	ret

00000198 <MAX17043_Power_On_Reset>:
}

//MAX17043 Power-on Reset
void MAX17043_Power_On_Reset(void)
{
	MAX17043_Write_Word(MAX17043_COMMAND, MAX17043_POR_H, MAX17043_POR_L);
 198:	44 e5       	ldi	r20, 0x54	; 84
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	8e ef       	ldi	r24, 0xFE	; 254
 19e:	0e 94 b4 00 	call	0x168	; 0x168 <MAX17043_Write_Word>
 1a2:	08 95       	ret

000001a4 <MAX17043_Quick_Start>:
}

//MAX17043 Quick Start
void MAX17043_Quick_Start(void)
{
	MAX17043_Write_Word(MAX17043_MODE, MAX17043_QS_H, MAX17043_QS_L);
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	60 e4       	ldi	r22, 0x40	; 64
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	0e 94 b4 00 	call	0x168	; 0x168 <MAX17043_Write_Word>
 1ae:	08 95       	ret

000001b0 <MAX17043_Config>:
}

//MAX17043 Configuration
void MAX17043_Config(void)
{
	MAX17043_Write_Word(MAX17043_CONFIG, MAX17043_RCOMP, MAX17043_ALT_30);
 1b0:	42 e0       	ldi	r20, 0x02	; 2
 1b2:	67 e9       	ldi	r22, 0x97	; 151
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	0e 94 b4 00 	call	0x168	; 0x168 <MAX17043_Write_Word>
 1ba:	08 95       	ret

000001bc <MAX17043_Read_Word>:
	i2c_write(LSB);					//Write 0x00 to the higher byte of Command register
	i2c_stop();					//Stop the I2C transmission
}

void MAX17043_Read_Word(uint8_t reg, uint8_t *MSB, uint8_t *LSB)
{
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	f8 2e       	mov	r15, r24
 1c8:	8b 01       	movw	r16, r22
 1ca:	ea 01       	movw	r28, r20
	i2c_start_wait(MAX17043_ADDR + I2C_WRITE);	//Set device address and write mode
 1cc:	8c e6       	ldi	r24, 0x6C	; 108
 1ce:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_start_wait>
	i2c_write(reg);					//Access the Command register
 1d2:	8f 2d       	mov	r24, r15
 1d4:	0e 94 b3 01 	call	0x366	; 0x366 <i2c_write>
	i2c_rep_start(MAX17043_ADDR + I2C_READ);	//Set device address and read mode
 1d8:	8d e6       	ldi	r24, 0x6D	; 109
 1da:	0e 94 a7 01 	call	0x34e	; 0x34e <i2c_rep_start>
	*MSB = i2c_readNak();				//Read MSB
 1de:	0e 94 c5 01 	call	0x38a	; 0x38a <i2c_readNak>
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 83       	st	Z, r24
	*LSB = i2c_readNak();				//Read LSB
 1e6:	0e 94 c5 01 	call	0x38a	; 0x38a <i2c_readNak>
 1ea:	88 83       	st	Y, r24
	i2c_stop();					//Stop the I2C transmission
 1ec:	0e 94 aa 01 	call	0x354	; 0x354 <i2c_stop>
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	08 95       	ret

000001fc <MAX17043_Read_VCELL>:
	MAX17043_Write_Word(MAX17043_CONFIG, MAX17043_RCOMP, MAX17043_ALT_30);
}

void MAX17043_Read_VCELL(void)
{
	MAX17043_Read_Word(MAX17043_VCELL, &VCell_H, &VCell_L);
 1fc:	44 e0       	ldi	r20, 0x04	; 4
 1fe:	51 e0       	ldi	r21, 0x01	; 1
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	71 e0       	ldi	r23, 0x01	; 1
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 de 00 	call	0x1bc	; 0x1bc <MAX17043_Read_Word>

	UART_Tx(VCell_H);
 20a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <VCell_H>
 20e:	0e 94 ac 00 	call	0x158	; 0x158 <UART_Tx>
	UART_Tx(VCell_L);
 212:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <VCell_L>
 216:	0e 94 ac 00 	call	0x158	; 0x158 <UART_Tx>
 21a:	08 95       	ret

0000021c <MAX17043_Read_SOC>:
//	return VCell;
}

void MAX17043_Read_SOC(void)
{
	MAX17043_Read_Word(MAX17043_SOC, &SOC_H, &SOC_L);
 21c:	42 e0       	ldi	r20, 0x02	; 2
 21e:	51 e0       	ldi	r21, 0x01	; 1
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	71 e0       	ldi	r23, 0x01	; 1
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	0e 94 de 00 	call	0x1bc	; 0x1bc <MAX17043_Read_Word>

	UART_Tx(SOC_H);
 22a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 22e:	0e 94 ac 00 	call	0x158	; 0x158 <UART_Tx>
	UART_Tx(SOC_L);
 232:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SOC_L>
 236:	0e 94 ac 00 	call	0x158	; 0x158 <UART_Tx>
 23a:	08 95       	ret

0000023c <main>:
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	//Initialize AVR and peripherals
	AVR_Init();
 23c:	0e 94 6a 00 	call	0xd4	; 0xd4 <AVR_Init>
	i2c_init();
 240:	0e 94 52 01 	call	0x2a4	; 0x2a4 <i2c_init>
	UART_Init();
 244:	0e 94 96 00 	call	0x12c	; 0x12c <UART_Init>

	VCell_H = 0;
 248:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <VCell_H>
	VCell_L = 0;
 24c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <VCell_L>
	SOC_H = 0;
 250:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	SOC_L = 0;
 254:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <SOC_L>

	//MAX17043 Initialization & Configuration
	MAX17043_Power_On_Reset();
 258:	0e 94 cc 00 	call	0x198	; 0x198 <MAX17043_Power_On_Reset>
	MAX17043_Config();
 25c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <MAX17043_Config>
	MAX17043_Quick_Start();
 260:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <MAX17043_Quick_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	89 e6       	ldi	r24, 0x69	; 105
 268:	98 e1       	ldi	r25, 0x18	; 24
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x2e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x38>
 274:	00 00       	nop
		UART_Tx(SOC_H);
		UART_Tx(SOC_L);

		_delay_ms(500);
*/
		MAX17043_Read_VCELL();
 276:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MAX17043_Read_VCELL>
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	84 e3       	ldi	r24, 0x34	; 52
 27e:	9c e0       	ldi	r25, 0x0C	; 12
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x44>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x4e>
 28a:	00 00       	nop
		_delay_ms(500);
		MAX17043_Read_SOC();
 28c:	0e 94 0e 01 	call	0x21c	; 0x21c <MAX17043_Read_SOC>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	84 e3       	ldi	r24, 0x34	; 52
 294:	9c e0       	ldi	r25, 0x0C	; 12
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x5a>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x64>
 2a0:	00 00       	nop
 2a2:	e9 cf       	rjmp	.-46     	; 0x276 <main+0x3a>

000002a4 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));

    return TWDR;

}/* i2c_readAck */
 2a4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 2ae:	08 95       	ret

000002b0 <i2c_start>:
 2b0:	94 ea       	ldi	r25, 0xA4	; 164
 2b2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2b6:	ec eb       	ldi	r30, 0xBC	; 188
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	90 81       	ld	r25, Z
 2bc:	99 23       	and	r25, r25
 2be:	ec f7       	brge	.-6      	; 0x2ba <i2c_start+0xa>
 2c0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2c4:	98 7f       	andi	r25, 0xF8	; 248
 2c6:	98 30       	cpi	r25, 0x08	; 8
 2c8:	11 f0       	breq	.+4      	; 0x2ce <i2c_start+0x1e>
 2ca:	90 31       	cpi	r25, 0x10	; 16
 2cc:	a1 f4       	brne	.+40     	; 0x2f6 <i2c_start+0x46>
 2ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2d2:	84 e8       	ldi	r24, 0x84	; 132
 2d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2d8:	ec eb       	ldi	r30, 0xBC	; 188
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	ec f7       	brge	.-6      	; 0x2dc <i2c_start+0x2c>
 2e2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2e6:	98 7f       	andi	r25, 0xF8	; 248
 2e8:	98 31       	cpi	r25, 0x18	; 24
 2ea:	39 f0       	breq	.+14     	; 0x2fa <i2c_start+0x4a>
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 34       	cpi	r25, 0x40	; 64
 2f0:	29 f4       	brne	.+10     	; 0x2fc <i2c_start+0x4c>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	08 95       	ret
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	08 95       	ret

000002fe <i2c_start_wait>:
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec eb       	ldi	r30, 0xBC	; 188
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	24 ea       	ldi	r18, 0xA4	; 164
 308:	a9 eb       	ldi	r26, 0xB9	; 185
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	cb eb       	ldi	r28, 0xBB	; 187
 30e:	d0 e0       	ldi	r29, 0x00	; 0
 310:	34 e8       	ldi	r19, 0x84	; 132
 312:	44 e9       	ldi	r20, 0x94	; 148
 314:	20 83       	st	Z, r18
 316:	90 81       	ld	r25, Z
 318:	99 23       	and	r25, r25
 31a:	ec f7       	brge	.-6      	; 0x316 <i2c_start_wait+0x18>
 31c:	9c 91       	ld	r25, X
 31e:	98 7f       	andi	r25, 0xF8	; 248
 320:	98 30       	cpi	r25, 0x08	; 8
 322:	11 f0       	breq	.+4      	; 0x328 <i2c_start_wait+0x2a>
 324:	90 31       	cpi	r25, 0x10	; 16
 326:	b1 f7       	brne	.-20     	; 0x314 <i2c_start_wait+0x16>
 328:	88 83       	st	Y, r24
 32a:	30 83       	st	Z, r19
 32c:	90 81       	ld	r25, Z
 32e:	99 23       	and	r25, r25
 330:	ec f7       	brge	.-6      	; 0x32c <i2c_start_wait+0x2e>
 332:	9c 91       	ld	r25, X
 334:	98 7f       	andi	r25, 0xF8	; 248
 336:	90 32       	cpi	r25, 0x20	; 32
 338:	11 f0       	breq	.+4      	; 0x33e <i2c_start_wait+0x40>
 33a:	98 35       	cpi	r25, 0x58	; 88
 33c:	29 f4       	brne	.+10     	; 0x348 <i2c_start_wait+0x4a>
 33e:	40 83       	st	Z, r20
 340:	90 81       	ld	r25, Z
 342:	94 fd       	sbrc	r25, 4
 344:	fd cf       	rjmp	.-6      	; 0x340 <i2c_start_wait+0x42>
 346:	e6 cf       	rjmp	.-52     	; 0x314 <i2c_start_wait+0x16>
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <i2c_rep_start>:
 34e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <i2c_start>
 352:	08 95       	ret

00000354 <i2c_stop>:
 354:	84 e9       	ldi	r24, 0x94	; 148
 356:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 35a:	ec eb       	ldi	r30, 0xBC	; 188
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	84 fd       	sbrc	r24, 4
 362:	fd cf       	rjmp	.-6      	; 0x35e <i2c_stop+0xa>
 364:	08 95       	ret

00000366 <i2c_write>:
 366:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 36a:	84 e8       	ldi	r24, 0x84	; 132
 36c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 370:	ec eb       	ldi	r30, 0xBC	; 188
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	ec f7       	brge	.-6      	; 0x374 <i2c_write+0xe>
 37a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 37e:	98 7f       	andi	r25, 0xF8	; 248
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	98 32       	cpi	r25, 0x28	; 40
 384:	09 f4       	brne	.+2      	; 0x388 <i2c_write+0x22>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret

0000038a <i2c_readNak>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 38a:	84 e8       	ldi	r24, 0x84	; 132
 38c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 390:	ec eb       	ldi	r30, 0xBC	; 188
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	88 23       	and	r24, r24
 398:	ec f7       	brge	.-6      	; 0x394 <i2c_readNak+0xa>

    return TWDR;
 39a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 39e:	08 95       	ret

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>

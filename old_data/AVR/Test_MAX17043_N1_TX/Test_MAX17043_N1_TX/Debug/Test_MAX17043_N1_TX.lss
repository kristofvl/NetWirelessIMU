
Test_MAX17043_N1_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000748  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000007bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002282  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d12  00000000  00000000  00002be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cdf  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  000045d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074a  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001017  00000000  00000000  00005016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000602d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_7>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	aa 30       	cpi	r26, 0x0A	; 10
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
  cc:	0c 94 a2 03 	jmp	0x744	; 0x744 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <AVR_Init>:
** - Initializes the I/O peripherals
** - Short pause after BNO055 Power-On Reset(Mandatory)
*************************************************************************************/
void AVR_Init(void)
{
	DDRD |= _BV(1);			//Set TX as output
  d4:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(_BV(0));		//Set RX as input
  d6:	50 98       	cbi	0x0a, 0	; 10

	//Make LED pins as output
	DDRC |= _BV(6);			//Makes PORTC, bit 6 as Output
  d8:	3e 9a       	sbi	0x07, 6	; 7
	DDRC |= _BV(7);			//Makes PORTC, bit 7 as Output
  da:	3f 9a       	sbi	0x07, 7	; 7
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	90 e0       	ldi	r25, 0x00	; 0
	
	//Start-up LED sequence loop
	for (int i = 5; i != 0; i--)
	{
		PORTC &= ~(_BV(6));	//Turns OFF LED in Port C pin 6
  e0:	46 98       	cbi	0x08, 6	; 8
		PORTC |= _BV(7);	//Turns ON LED in Port C pin 7
  e2:	47 9a       	sbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	e7 ea       	ldi	r30, 0xA7	; 167
  e6:	f1 e6       	ldi	r31, 0x61	; 97
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <AVR_Init+0x14>
  ec:	00 c0       	rjmp	.+0      	; 0xee <AVR_Init+0x1a>
  ee:	00 00       	nop
		_delay_ms(100);		//0.1 second delay
		
		PORTC |= _BV(6);	//Turns ON LED in Port C pin 6
  f0:	46 9a       	sbi	0x08, 6	; 8
		PORTC &= ~(_BV(7));	//Turns OFF LED in Port C pin 7
  f2:	47 98       	cbi	0x08, 7	; 8
  f4:	e7 ea       	ldi	r30, 0xA7	; 167
  f6:	f1 e6       	ldi	r31, 0x61	; 97
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <AVR_Init+0x24>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <AVR_Init+0x2a>
  fe:	00 00       	nop
 100:	01 97       	sbiw	r24, 0x01	; 1
	//Make LED pins as output
	DDRC |= _BV(6);			//Makes PORTC, bit 6 as Output
	DDRC |= _BV(7);			//Makes PORTC, bit 7 as Output
	
	//Start-up LED sequence loop
	for (int i = 5; i != 0; i--)
 102:	71 f7       	brne	.-36     	; 0xe0 <AVR_Init+0xc>
		PORTC |= _BV(6);	//Turns ON LED in Port C pin 6
		PORTC &= ~(_BV(7));	//Turns OFF LED in Port C pin 7
		_delay_ms(100);		//0.1 second delay
	}

	PORTC &= ~(_BV(6));		//Turns OFF LED in Port C pin 6
 104:	46 98       	cbi	0x08, 6	; 8
	PORTC &= ~(_BV(7));		//Turns OFF LED in Port C pin 7
 106:	47 98       	cbi	0x08, 7	; 8

	//Initialize TWI data
	TWI_data = 0;
 108:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <TWI_data>
 10c:	08 95       	ret

0000010e <MAX17043_Write_Word>:
{
	MAX17043_Read_Word(MAX17043_SOC, &N1_payload_TX[2], &N1_payload_TX[3]);
}

void MAX17043_Write_Word(uint8_t reg, uint8_t MSB, uint8_t LSB)
{
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	18 2f       	mov	r17, r24
 116:	d6 2f       	mov	r29, r22
 118:	c4 2f       	mov	r28, r20
	i2c_start_wait(MAX17043_ADDR + I2C_WRITE);	//Set device address and write mode
 11a:	8c e6       	ldi	r24, 0x6C	; 108
 11c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <i2c_start_wait>
	i2c_write(reg);					//Access the Command register
 120:	81 2f       	mov	r24, r17
 122:	0e 94 85 03 	call	0x70a	; 0x70a <i2c_write>
	i2c_write(MSB);					//Write 0x54 to the lower byte of Command register
 126:	8d 2f       	mov	r24, r29
 128:	0e 94 85 03 	call	0x70a	; 0x70a <i2c_write>
	i2c_write(LSB);					//Write 0x00 to the higher byte of Command register
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 85 03 	call	0x70a	; 0x70a <i2c_write>
	i2c_stop();					//Stop the I2C transmission
 132:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <i2c_stop>
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <MAX17043_Power_On_Reset>:
}

//MAX17043 Power-on Reset
void MAX17043_Power_On_Reset(void)
{
	MAX17043_Write_Word(MAX17043_COMMAND, MAX17043_POR_H, MAX17043_POR_L);
 13e:	44 e5       	ldi	r20, 0x54	; 84
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	0e 94 87 00 	call	0x10e	; 0x10e <MAX17043_Write_Word>
 148:	08 95       	ret

0000014a <MAX17043_Config>:
}

//MAX17043 Configuration
void MAX17043_Config(void)
{
	MAX17043_Write_Word(MAX17043_CONFIG, MAX17043_RCOMP, MAX17043_ALT_30);
 14a:	42 e0       	ldi	r20, 0x02	; 2
 14c:	67 e9       	ldi	r22, 0x97	; 151
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	0e 94 87 00 	call	0x10e	; 0x10e <MAX17043_Write_Word>
 154:	08 95       	ret

00000156 <MAX17043_Read_Word>:
	i2c_write(LSB);					//Write 0x00 to the higher byte of Command register
	i2c_stop();					//Stop the I2C transmission
}

void MAX17043_Read_Word(uint8_t reg, uint8_t *MSB, uint8_t *LSB)
{
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	f8 2e       	mov	r15, r24
 162:	8b 01       	movw	r16, r22
 164:	ea 01       	movw	r28, r20
	i2c_start_wait(MAX17043_ADDR + I2C_WRITE);	//Set device address and write mode
 166:	8c e6       	ldi	r24, 0x6C	; 108
 168:	0e 94 51 03 	call	0x6a2	; 0x6a2 <i2c_start_wait>
	i2c_write(reg);					//Access the Command register
 16c:	8f 2d       	mov	r24, r15
 16e:	0e 94 85 03 	call	0x70a	; 0x70a <i2c_write>
	i2c_rep_start(MAX17043_ADDR + I2C_READ);	//Set device address and read mode
 172:	8d e6       	ldi	r24, 0x6D	; 109
 174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <i2c_rep_start>
	*MSB = i2c_readNak();				//Read MSB
 178:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_readNak>
 17c:	f8 01       	movw	r30, r16
 17e:	80 83       	st	Z, r24
	*LSB = i2c_readNak();				//Read LSB
 180:	0e 94 97 03 	call	0x72e	; 0x72e <i2c_readNak>
 184:	88 83       	st	Y, r24
	i2c_stop();					//Stop the I2C transmission
 186:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <i2c_stop>
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	08 95       	ret

00000196 <MAX17043_Read_VCELL>:
	MAX17043_Write_Word(MAX17043_CONFIG, MAX17043_RCOMP, MAX17043_ALT_30);
}

void MAX17043_Read_VCELL(void)
{
	MAX17043_Read_Word(MAX17043_VCELL, &N1_payload_TX[0], &N1_payload_TX[1]);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	51 e0       	ldi	r21, 0x01	; 1
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	71 e0       	ldi	r23, 0x01	; 1
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 ab 00 	call	0x156	; 0x156 <MAX17043_Read_Word>
 1a4:	08 95       	ret

000001a6 <MAX17043_Read_SOC>:
}

void MAX17043_Read_SOC(void)
{
	MAX17043_Read_Word(MAX17043_SOC, &N1_payload_TX[2], &N1_payload_TX[3]);
 1a6:	43 e0       	ldi	r20, 0x03	; 3
 1a8:	51 e0       	ldi	r21, 0x01	; 1
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	0e 94 ab 00 	call	0x156	; 0x156 <MAX17043_Read_Word>
 1b4:	08 95       	ret

000001b6 <SPI_Init>:
}

void SPI_Init()
{
	//Set the output pin(s) for SPI
	DDRB |= _BV(CE);	//CE
 1b6:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(CSN);	//CSN
 1b8:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(MOSI);  	//MOSI
 1ba:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= _BV(SCLK);  	//SCLK
 1bc:	21 9a       	sbi	0x04, 1	; 4

	//Set the input pin(s) for SPI
	DDRB &= ~_BV(MISO); 	//MISO
 1be:	23 98       	cbi	0x04, 3	; 4

	SPCR |= ((1 << SPE) | (1 << MSTR) | (1 << SPR0));	//Enable SPI as master
 1c0:	8c b5       	in	r24, 0x2c	; 44
 1c2:	81 65       	ori	r24, 0x51	; 81
 1c4:	8c bd       	out	0x2c, r24	; 44
	SPCR &= (~_BV(SPI2X) & ~_BV(SPR1)); 		   	//Set clock rate but not too important
 1c6:	8c b5       	in	r24, 0x2c	; 44
 1c8:	8c 7f       	andi	r24, 0xFC	; 252
 1ca:	8c bd       	out	0x2c, r24	; 44
	
	PORTB |= _BV(CSN);	//CSN high
 1cc:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~_BV(CE);	//CE low
 1ce:	2c 98       	cbi	0x05, 4	; 5
 1d0:	83 ec       	ldi	r24, 0xC3	; 195
 1d2:	99 e0       	ldi	r25, 0x09	; 9
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <SPI_Init+0x1e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <SPI_Init+0x24>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <SPI_Tranceiver>:
}

unsigned char SPI_Tranceiver(unsigned char data)
{
	//Load data into the buffer
	SPDR = data;
 1de:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1 << SPIF)));
 1e0:	0d b4       	in	r0, 0x2d	; 45
 1e2:	07 fe       	sbrs	r0, 7
 1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <SPI_Tranceiver+0x2>

	//Return received data
	return(SPDR);
 1e6:	8e b5       	in	r24, 0x2e	; 46
}
 1e8:	08 95       	ret

000001ea <SPI_Read_Byte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	93 e0       	ldi	r25, 0x03	; 3
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <SPI_Read_Byte+0x2>
 1f0:	00 00       	nop

unsigned char SPI_Read_Byte(unsigned char reg)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 1f2:	28 98       	cbi	0x05, 0	; 5
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	9a 95       	dec	r25
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <SPI_Read_Byte+0xc>
 1fa:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(R_REGISTER + reg);
 1fc:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <SPI_Read_Byte+0x18>
 206:	00 00       	nop
	_delay_us(10);
	reg = SPI_Tranceiver(NOP);
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 20e:	93 e0       	ldi	r25, 0x03	; 3
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <SPI_Read_Byte+0x26>
 214:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 216:	28 9a       	sbi	0x05, 0	; 5
	return reg;
}
 218:	08 95       	ret

0000021a <SPI_Write_Byte>:

void SPI_Write_Byte(unsigned char reg, unsigned char data)
{
 21a:	cf 93       	push	r28
 21c:	c6 2f       	mov	r28, r22
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	9a 95       	dec	r25
 222:	f1 f7       	brne	.-4      	; 0x220 <SPI_Write_Byte+0x6>
 224:	00 00       	nop
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 226:	28 98       	cbi	0x05, 0	; 5
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	9a 95       	dec	r25
 22c:	f1 f7       	brne	.-4      	; 0x22a <SPI_Write_Byte+0x10>
 22e:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(W_REGISTER + reg);
 230:	80 5e       	subi	r24, 0xE0	; 224
 232:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <SPI_Write_Byte+0x1e>
 23c:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(data);
 23e:	8c 2f       	mov	r24, r28
 240:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 244:	93 e0       	ldi	r25, 0x03	; 3
 246:	9a 95       	dec	r25
 248:	f1 f7       	brne	.-4      	; 0x246 <SPI_Write_Byte+0x2c>
 24a:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 24c:	28 9a       	sbi	0x05, 0	; 5
}
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <nRF_Flush_TX>:
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	8a 95       	dec	r24
 256:	f1 f7       	brne	.-4      	; 0x254 <nRF_Flush_TX+0x2>
 258:	00 00       	nop
}

void nRF_Flush_TX(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 25a:	28 98       	cbi	0x05, 0	; 5
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <nRF_Flush_TX+0xc>
 262:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(FLUSH_TX);
 264:	81 ee       	ldi	r24, 0xE1	; 225
 266:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <nRF_Flush_TX+0x1a>
 270:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 272:	28 9a       	sbi	0x05, 0	; 5
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <nRF_Flush_TX+0x24>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <nRF_TX_Mode>:
	_delay_ms(10);		//10ms delay after power-up
}

void nRF_TX_Mode(void)
{
	PORTB &= ~_BV(CE);						 //CE low - Standby-I
 27e:	2c 98       	cbi	0x05, 4	; 5
	//Power-up and set as TX
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) & ~(1 << PRIM_RX));
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 286:	68 2f       	mov	r22, r24
 288:	6e 7f       	andi	r22, 0xFE	; 254
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << PWR_UP));
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 296:	68 2f       	mov	r22, r24
 298:	62 60       	ori	r22, 0x02	; 2
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	nRF_Flush_TX();							 //Flush TX FIFO
 2a0:	0e 94 29 01 	call	0x252	; 0x252 <nRF_Flush_TX>
	SPI_Write_Byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 2a4:	60 e7       	ldi	r22, 0x70	; 112
 2a6:	87 e0       	ldi	r24, 0x07	; 7
 2a8:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	//Mask TX_DR and MAX_RT interrupts
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 2b2:	68 2f       	mov	r22, r24
 2b4:	60 63       	ori	r22, 0x30	; 48
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
 2bc:	82 e3       	ldi	r24, 0x32	; 50
 2be:	8a 95       	dec	r24
 2c0:	f1 f7       	brne	.-4      	; 0x2be <nRF_TX_Mode+0x40>
 2c2:	08 95       	ret

000002c4 <nRF_Flush_RX>:
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	8a 95       	dec	r24
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <nRF_Flush_RX+0x2>
 2ca:	00 00       	nop
}

void nRF_Flush_RX(void)
{
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 2cc:	28 98       	cbi	0x05, 0	; 5
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	8a 95       	dec	r24
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <nRF_Flush_RX+0xc>
 2d4:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(FLUSH_RX);
 2d6:	82 ee       	ldi	r24, 0xE2	; 226
 2d8:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	8a 95       	dec	r24
 2e0:	f1 f7       	brne	.-4      	; 0x2de <nRF_Flush_RX+0x1a>
 2e2:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 2e4:	28 9a       	sbi	0x05, 0	; 5
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	8a 95       	dec	r24
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <nRF_Flush_RX+0x24>
 2ec:	00 00       	nop
 2ee:	08 95       	ret

000002f0 <nRF_RX_Mode>:
	_delay_us(150);
}

void nRF_RX_Mode(void)
{
	PORTB &= ~_BV(CE); 						 //CE low - Standby-I
 2f0:	2c 98       	cbi	0x05, 4	; 5
	//Power-up as set as RX
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << PWR_UP) | (1 << PRIM_RX));
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 2f8:	68 2f       	mov	r22, r24
 2fa:	63 60       	ori	r22, 0x03	; 3
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	nRF_Flush_RX();							 //Flush RX FIFO
 302:	0e 94 62 01 	call	0x2c4	; 0x2c4 <nRF_Flush_RX>
	SPI_Write_Byte(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT)); //Reset status
 306:	60 e7       	ldi	r22, 0x70	; 112
 308:	87 e0       	ldi	r24, 0x07	; 7
 30a:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	//Mask TX_DR and MAX_RT interrupts
	SPI_Write_Byte(CONFIG, SPI_Read_Byte(CONFIG) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT));
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_Read_Byte>
 314:	68 2f       	mov	r22, r24
 316:	60 63       	ori	r22, 0x30	; 48
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	PORTB |= _BV(CE);  						 //CE high
 31e:	2c 9a       	sbi	0x05, 4	; 5
 320:	82 e3       	ldi	r24, 0x32	; 50
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <nRF_RX_Mode+0x32>
 326:	08 95       	ret

00000328 <nRF_Init>:
}

void nRF_Init(void)
{
	//Enable auto-acknowledgment for data pipe 0
	SPI_Write_Byte(EN_AA, 0x01);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	
	//Enable data pipe 0
	SPI_Write_Byte(EN_RXADDR, 0x01);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>

	//Set address width to 5 bytes
	SPI_Write_Byte(SETUP_AW, 0x03);
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	
	//Set channel frequency to 2.505GHz
	SPI_Write_Byte(RF_CH, 0x69);
 340:	69 e6       	ldi	r22, 0x69	; 105
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	
	//Set data rate to 2Mbps and 0dB gain
//	SPI_Write_Byte(RF_SETUP, 0x0E);

	//Set data rate to 250kbps and 0dB gain
	SPI_Write_Byte(RF_SETUP, 0x26);
 348:	66 e2       	ldi	r22, 0x26	; 38
 34a:	86 e0       	ldi	r24, 0x06	; 6
 34c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	8a 95       	dec	r24
 354:	f1 f7       	brne	.-4      	; 0x352 <nRF_Init+0x2a>
 356:	00 00       	nop
	//Enable W_TX_PAYLOAD_NOACK command
	//	SPI_Write_Byte(FEATURE, 0x01);
	
	//Set the 5-bytes receiver address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 358:	28 98       	cbi	0x05, 0	; 5
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	9a 95       	dec	r25
 35e:	f1 f7       	brne	.-4      	; 0x35c <nRF_Init+0x34>
 360:	00 00       	nop
	_delay_us(10);
	//Setup p0 pipe address for receiving
	SPI_Tranceiver(W_REGISTER + RX_ADDR_P0);
 362:	8a e2       	ldi	r24, 0x2A	; 42
 364:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <nRF_Init+0x42>
 36e:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0xAA);
 370:	8a ea       	ldi	r24, 0xAA	; 170
 372:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 376:	93 e0       	ldi	r25, 0x03	; 3
 378:	9a 95       	dec	r25
 37a:	f1 f7       	brne	.-4      	; 0x378 <nRF_Init+0x50>
 37c:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0xBB);
 37e:	8b eb       	ldi	r24, 0xBB	; 187
 380:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	8a 95       	dec	r24
 388:	f1 f7       	brne	.-4      	; 0x386 <nRF_Init+0x5e>
 38a:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0xCC);
 38c:	8c ec       	ldi	r24, 0xCC	; 204
 38e:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 392:	93 e0       	ldi	r25, 0x03	; 3
 394:	9a 95       	dec	r25
 396:	f1 f7       	brne	.-4      	; 0x394 <nRF_Init+0x6c>
 398:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0xDD);
 39a:	8d ed       	ldi	r24, 0xDD	; 221
 39c:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <nRF_Init+0x7a>
 3a6:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0xEE);
 3a8:	8e ee       	ldi	r24, 0xEE	; 238
 3aa:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 3ae:	93 e0       	ldi	r25, 0x03	; 3
 3b0:	9a 95       	dec	r25
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <nRF_Init+0x88>
 3b4:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 3b6:	28 9a       	sbi	0x05, 0	; 5
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	8a 95       	dec	r24
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <nRF_Init+0x92>
 3be:	00 00       	nop
	
	//Set the 5-bytes transmitter address as 0x01 0x02 0x03 0x04 0x05
	_delay_us(10);
	PORTB &= ~_BV(CSN);	//CSN low
 3c0:	28 98       	cbi	0x05, 0	; 5
 3c2:	93 e0       	ldi	r25, 0x03	; 3
 3c4:	9a 95       	dec	r25
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <nRF_Init+0x9c>
 3c8:	00 00       	nop
	_delay_us(10);
	//Setup the transmitter address
	SPI_Tranceiver(W_REGISTER + TX_ADDR);
 3ca:	80 e3       	ldi	r24, 0x30	; 48
 3cc:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	8a 95       	dec	r24
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <nRF_Init+0xaa>
 3d6:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0x11);
 3d8:	81 e1       	ldi	r24, 0x11	; 17
 3da:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 3de:	93 e0       	ldi	r25, 0x03	; 3
 3e0:	9a 95       	dec	r25
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <nRF_Init+0xb8>
 3e4:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0x12);
 3e6:	82 e1       	ldi	r24, 0x12	; 18
 3e8:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	8a 95       	dec	r24
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <nRF_Init+0xc6>
 3f2:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0x13);
 3f4:	83 e1       	ldi	r24, 0x13	; 19
 3f6:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 3fa:	93 e0       	ldi	r25, 0x03	; 3
 3fc:	9a 95       	dec	r25
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <nRF_Init+0xd4>
 400:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0x14);
 402:	84 e1       	ldi	r24, 0x14	; 20
 404:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 00       	nop
	_delay_us(10);
	SPI_Tranceiver(0x15);
 410:	85 e1       	ldi	r24, 0x15	; 21
 412:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 416:	93 e0       	ldi	r25, 0x03	; 3
 418:	9a 95       	dec	r25
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);	//CSN high
 41e:	28 9a       	sbi	0x05, 0	; 5
	
	//Set the payload width as 8-bytes
	SPI_Write_Byte(RX_PW_P0, 0x08);
 420:	68 e0       	ldi	r22, 0x08	; 8
 422:	81 e1       	ldi	r24, 0x11	; 17
 424:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	
	//Set the retransmission delay to 750us with 15 retries
	SPI_Write_Byte(SETUP_RETR, 0x2F);
 428:	6f e2       	ldi	r22, 0x2F	; 47
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
	
	//Boot the nRF as RX and mask the maximum retransmission interrupt(disable)
	//Enable CRC and set the length to 2-bytes
	nRF_RX_Mode();
 430:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF_RX_Mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 434:	83 ec       	ldi	r24, 0xC3	; 195
 436:	99 e0       	ldi	r25, 0x09	; 9
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	08 95       	ret

00000442 <nRF_send_Payload>:
	PORTB |= _BV(CSN);	//CSN high
	_delay_us(10);
}

void nRF_send_Payload(uint8_t* data, uint8_t len)
{
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
	uint8_t i;
	
	for(i = 0; i < len; i++)
 44a:	66 23       	and	r22, r22
 44c:	69 f0       	breq	.+26     	; 0x468 <nRF_send_Payload+0x26>
 44e:	c0 e0       	ldi	r28, 0x00	; 0
 450:	d1 e0       	ldi	r29, 0x01	; 1
 452:	61 50       	subi	r22, 0x01	; 1
 454:	06 2f       	mov	r16, r22
 456:	10 e0       	ldi	r17, 0x00	; 0
 458:	0f 5f       	subi	r16, 0xFF	; 255
 45a:	1e 4f       	sbci	r17, 0xFE	; 254
	{
		SPI_Tranceiver(N1_payload_TX[i]);
 45c:	89 91       	ld	r24, Y+
 45e:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>

void nRF_send_Payload(uint8_t* data, uint8_t len)
{
	uint8_t i;
	
	for(i = 0; i < len; i++)
 462:	c0 17       	cp	r28, r16
 464:	d1 07       	cpc	r29, r17
 466:	d1 f7       	brne	.-12     	; 0x45c <nRF_send_Payload+0x1a>
	{
		SPI_Tranceiver(N1_payload_TX[i]);
	}
}
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <nRF_TX_Data>:

void nRF_TX_Data(unsigned char *tdata)
{
	nRF_Flush_TX();
 472:	0e 94 29 01 	call	0x252	; 0x252 <nRF_Flush_TX>
	PORTB &= ~_BV(CSN); //CSN low
 476:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	8a 95       	dec	r24
 47c:	f1 f7       	brne	.-4      	; 0x47a <nRF_TX_Data+0x8>
 47e:	00 00       	nop
	_delay_us(10);
	//Transmit payload with ACK enabled
	SPI_Tranceiver(W_TX_PAYLOAD);
 480:	80 ea       	ldi	r24, 0xA0	; 160
 482:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	8a 95       	dec	r24
 48a:	f1 f7       	brne	.-4      	; 0x488 <nRF_TX_Data+0x16>
 48c:	00 00       	nop
	_delay_us(10);
	nRF_send_Payload(N1_payload_TX, PAYLOAD_LEN);
 48e:	64 e0       	ldi	r22, 0x04	; 4
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 21 02 	call	0x442	; 0x442 <nRF_send_Payload>
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	8a 95       	dec	r24
 49c:	f1 f7       	brne	.-4      	; 0x49a <nRF_TX_Data+0x28>
 49e:	00 00       	nop
	_delay_us(10);
	PORTB |= _BV(CSN);  //CSN high
 4a0:	28 9a       	sbi	0x05, 0	; 5
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	8a 95       	dec	r24
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <nRF_TX_Data+0x32>
 4a8:	00 00       	nop
	_delay_us(10);      //Need at least 10us before sending
	PORTB |= _BV(CE);   //CE high
 4aa:	2c 9a       	sbi	0x05, 4	; 5
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	8a 95       	dec	r24
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <nRF_TX_Data+0x3c>
 4b2:	00 00       	nop
	_delay_us(10);      //Hold CE high for at least 10us and not longer than 4ms
	PORTB &= ~_BV(CE);  //CE low
 4b4:	2c 98       	cbi	0x05, 4	; 5
 4b6:	08 95       	ret

000004b8 <nRF_get_Status>:
}

uint8_t nRF_get_Status()
{
	uint8_t rv;
	PORTB &= ~_BV(CSN); //CSN low
 4b8:	28 98       	cbi	0x05, 0	; 5
	rv = SPI_Tranceiver(NOP);
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
	PORTB |= _BV(CSN);  //CSN high
 4c0:	28 9a       	sbi	0x05, 0	; 5
	return rv;
}
 4c2:	08 95       	ret

000004c4 <nRF_is_Sending>:
uint8_t nRF_is_Sending()
{
	uint8_t status;

	/* read the current status */
	status = nRF_get_Status();
 4c4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <nRF_get_Status>
 4c8:	98 2f       	mov	r25, r24
 4ca:	90 73       	andi	r25, 0x30	; 48
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <nRF_is_Sending+0xe>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0; /* false */
	}

	return 1; /* true */
}
 4d2:	08 95       	ret

000004d4 <INT6_Init>:

void INT6_Init(void)
{
	EICRB &= ~(1 << ISC60) | (1 << ISC61);	//INT6 active when low
 4d4:	ea e6       	ldi	r30, 0x6A	; 106
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	8f 7e       	andi	r24, 0xEF	; 239
 4dc:	80 83       	st	Z, r24
	EIMSK |= (1 << INT6);			//Enable INT6
 4de:	ee 9a       	sbi	0x1d, 6	; 29
	sei();					//Enable global interrupts
 4e0:	78 94       	sei
 4e2:	08 95       	ret

000004e4 <nRF_get_Payload>:
	SPI_Write_Byte(STATUS, (1 << RX_DR));
}

/* send and receive multiple bytes over SPI */
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
 4e4:	ef 92       	push	r14
 4e6:	ff 92       	push	r15
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
	uint8_t i;

	for(i=0; i<len; i++)
 4f0:	44 23       	and	r20, r20
 4f2:	d9 f0       	breq	.+54     	; 0x52a <nRF_get_Payload+0x46>
 4f4:	ec 01       	movw	r28, r24
 4f6:	06 2f       	mov	r16, r22
 4f8:	17 2f       	mov	r17, r23
 4fa:	41 50       	subi	r20, 0x01	; 1
 4fc:	e4 2e       	mov	r14, r20
 4fe:	f1 2c       	mov	r15, r1
 500:	2f ef       	ldi	r18, 0xFF	; 255
 502:	e2 1a       	sub	r14, r18
 504:	f2 0a       	sbc	r15, r18
 506:	e8 0e       	add	r14, r24
 508:	f9 1e       	adc	r15, r25
	{
		data_in[i] = SPI_Tranceiver(data_out[i]);
 50a:	89 91       	ld	r24, Y+
 50c:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 510:	f8 01       	movw	r30, r16
 512:	81 93       	st	Z+, r24
 514:	8f 01       	movw	r16, r30
		if (data_in[i] == 0xAA)
 516:	8a 3a       	cpi	r24, 0xAA	; 170
 518:	29 f4       	brne	.+10     	; 0x524 <nRF_get_Payload+0x40>
		{
			RX_Payload_cnt++;
 51a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <RX_Payload_cnt>
 51e:	8f 5f       	subi	r24, 0xFF	; 255
 520:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <RX_Payload_cnt>
/* send and receive multiple bytes over SPI */
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
	uint8_t i;

	for(i=0; i<len; i++)
 524:	ce 15       	cp	r28, r14
 526:	df 05       	cpc	r29, r15
 528:	81 f7       	brne	.-32     	; 0x50a <nRF_get_Payload+0x26>
		if (data_in[i] == 0xAA)
		{
			RX_Payload_cnt++;
		}
	}
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	08 95       	ret

00000538 <__vector_7>:
	EIMSK |= (1 << INT6);			//Enable INT6
	sei();					//Enable global interrupts
}

ISR(INT6_vect)
{
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
	cli();					//Disable global interrupt
 55a:	f8 94       	cli
	
	PORTB &= ~_BV(CE); 			//Stop listening
 55c:	2c 98       	cbi	0x05, 4	; 5
	// Pull down chip select
	PORTB &= ~_BV(CSN); //CSN low
 55e:	28 98       	cbi	0x05, 0	; 5
 560:	83 e0       	ldi	r24, 0x03	; 3
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <__vector_7+0x2a>
 566:	00 00       	nop
	_delay_us(10);
	// Send command to read RX payload
	SPI_Tranceiver(R_RX_PAYLOAD);
 568:	81 e6       	ldi	r24, 0x61	; 97
 56a:	0e 94 ef 00 	call	0x1de	; 0x1de <SPI_Tranceiver>
 56e:	83 e0       	ldi	r24, 0x03	; 3
 570:	8a 95       	dec	r24
 572:	f1 f7       	brne	.-4      	; 0x570 <__vector_7+0x38>
 574:	00 00       	nop
	_delay_us(10);
	// Read payload
	nRF_get_Payload(N1_payload_RX, N1_payload_RX, PAYLOAD_LEN);
 576:	44 e0       	ldi	r20, 0x04	; 4
 578:	65 e0       	ldi	r22, 0x05	; 5
 57a:	71 e0       	ldi	r23, 0x01	; 1
 57c:	cb 01       	movw	r24, r22
 57e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <nRF_get_Payload>
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	8a 95       	dec	r24
 586:	f1 f7       	brne	.-4      	; 0x584 <__vector_7+0x4c>
 588:	00 00       	nop
	_delay_us(10);
	// Pull up chip select
	PORTB |= _BV(CSN);  //CSN high
 58a:	28 9a       	sbi	0x05, 0	; 5
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	8a 95       	dec	r24
 590:	f1 f7       	brne	.-4      	; 0x58e <__vector_7+0x56>
 592:	00 00       	nop
	_delay_us(10);
	// Reset status register
	SPI_Write_Byte(STATUS, (1 << RX_DR));
 594:	60 e4       	ldi	r22, 0x40	; 64
 596:	87 e0       	ldi	r24, 0x07	; 7
 598:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
}
 59c:	ff 91       	pop	r31
 59e:	ef 91       	pop	r30
 5a0:	bf 91       	pop	r27
 5a2:	af 91       	pop	r26
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	7f 91       	pop	r23
 5aa:	6f 91       	pop	r22
 5ac:	5f 91       	pop	r21
 5ae:	4f 91       	pop	r20
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <nRF_Reset>:
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	8a 95       	dec	r24
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <nRF_Reset+0x2>
 5c4:	00 00       	nop

void nRF_Reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
	SPI_Write_Byte(STATUS, 0x70);
 5c6:	60 e7       	ldi	r22, 0x70	; 112
 5c8:	87 e0       	ldi	r24, 0x07	; 7
 5ca:	0e 94 0d 01 	call	0x21a	; 0x21a <SPI_Write_Byte>
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	8a 95       	dec	r24
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <nRF_Reset+0x12>
 5d4:	00 00       	nop
 5d6:	08 95       	ret

000005d8 <main>:
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	//Initialize AVR and peripherals
	AVR_Init();
 5d8:	0e 94 6a 00 	call	0xd4	; 0xd4 <AVR_Init>
	i2c_init();
 5dc:	0e 94 24 03 	call	0x648	; 0x648 <i2c_init>
	SPI_Init();
 5e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SPI_Init>
	nRF_Init();
 5e4:	0e 94 94 01 	call	0x328	; 0x328 <nRF_Init>
	INT6_Init();
 5e8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <INT6_Init>

	//MAX17043 Initialization & Configuration
	MAX17043_Power_On_Reset();
 5ec:	0e 94 9f 00 	call	0x13e	; 0x13e <MAX17043_Power_On_Reset>
	MAX17043_Config();
 5f0:	0e 94 a5 00 	call	0x14a	; 0x14a <MAX17043_Config>
	
	//Initialize the received payload count
	RX_Payload_cnt = 0;
 5f4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <RX_Payload_cnt>
	
	nRF_Flush_RX();
 5f8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <nRF_Flush_RX>
	nRF_Reset();
 5fc:	0e 94 df 02 	call	0x5be	; 0x5be <nRF_Reset>
	PORTB |= _BV(CE);			//Start listening
 600:	2c 9a       	sbi	0x05, 4	; 5

	//Endless Loop
	while(1)
	{
		if (RX_Payload_cnt == PAYLOAD_LEN)
 602:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <RX_Payload_cnt>
 606:	84 30       	cpi	r24, 0x04	; 4
 608:	e1 f7       	brne	.-8      	; 0x602 <main+0x2a>
		{
			RX_Payload_cnt = 0;
 60a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <RX_Payload_cnt>
			
			//Configure as Transmitter
			nRF_TX_Mode();
 60e:	0e 94 3f 01 	call	0x27e	; 0x27e <nRF_TX_Mode>
			
			MAX17043_Read_VCELL();
 612:	0e 94 cb 00 	call	0x196	; 0x196 <MAX17043_Read_VCELL>
			MAX17043_Read_SOC();
 616:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MAX17043_Read_SOC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61a:	89 ef       	ldi	r24, 0xF9	; 249
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <main+0x46>
 622:	00 c0       	rjmp	.+0      	; 0x624 <main+0x4c>
 624:	00 00       	nop
			_delay_ms(1);
			
			nRF_TX_Data(N1_payload_TX);
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	0e 94 39 02 	call	0x472	; 0x472 <nRF_TX_Data>
			while(nRF_is_Sending());
 62e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <nRF_is_Sending>
 632:	81 11       	cpse	r24, r1
 634:	fc cf       	rjmp	.-8      	; 0x62e <main+0x56>
			nRF_Reset();
 636:	0e 94 df 02 	call	0x5be	; 0x5be <nRF_Reset>
			
			//Configure as Receiver
			nRF_RX_Mode();
 63a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF_RX_Mode>
			nRF_Flush_RX();
 63e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <nRF_Flush_RX>
			PORTB |= _BV(CE);	//Start listening again
 642:	2c 9a       	sbi	0x05, 4	; 5
			sei();
 644:	78 94       	sei
 646:	dd cf       	rjmp	.-70     	; 0x602 <main+0x2a>

00000648 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 648:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 64c:	89 ef       	ldi	r24, 0xF9	; 249
 64e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 652:	08 95       	ret

00000654 <i2c_start>:
 654:	94 ea       	ldi	r25, 0xA4	; 164
 656:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 65a:	ec eb       	ldi	r30, 0xBC	; 188
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	90 81       	ld	r25, Z
 660:	99 23       	and	r25, r25
 662:	ec f7       	brge	.-6      	; 0x65e <i2c_start+0xa>
 664:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 668:	98 7f       	andi	r25, 0xF8	; 248
 66a:	98 30       	cpi	r25, 0x08	; 8
 66c:	11 f0       	breq	.+4      	; 0x672 <i2c_start+0x1e>
 66e:	90 31       	cpi	r25, 0x10	; 16
 670:	a1 f4       	brne	.+40     	; 0x69a <i2c_start+0x46>
 672:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 676:	84 e8       	ldi	r24, 0x84	; 132
 678:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 67c:	ec eb       	ldi	r30, 0xBC	; 188
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	88 23       	and	r24, r24
 684:	ec f7       	brge	.-6      	; 0x680 <i2c_start+0x2c>
 686:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 68a:	98 7f       	andi	r25, 0xF8	; 248
 68c:	98 31       	cpi	r25, 0x18	; 24
 68e:	39 f0       	breq	.+14     	; 0x69e <i2c_start+0x4a>
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 34       	cpi	r25, 0x40	; 64
 694:	29 f4       	brne	.+10     	; 0x6a0 <i2c_start+0x4c>
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	08 95       	ret
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	08 95       	ret
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	08 95       	ret

000006a2 <i2c_start_wait>:
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	ec eb       	ldi	r30, 0xBC	; 188
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	24 ea       	ldi	r18, 0xA4	; 164
 6ac:	a9 eb       	ldi	r26, 0xB9	; 185
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	cb eb       	ldi	r28, 0xBB	; 187
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
 6b4:	34 e8       	ldi	r19, 0x84	; 132
 6b6:	44 e9       	ldi	r20, 0x94	; 148
 6b8:	20 83       	st	Z, r18
 6ba:	90 81       	ld	r25, Z
 6bc:	99 23       	and	r25, r25
 6be:	ec f7       	brge	.-6      	; 0x6ba <i2c_start_wait+0x18>
 6c0:	9c 91       	ld	r25, X
 6c2:	98 7f       	andi	r25, 0xF8	; 248
 6c4:	98 30       	cpi	r25, 0x08	; 8
 6c6:	11 f0       	breq	.+4      	; 0x6cc <i2c_start_wait+0x2a>
 6c8:	90 31       	cpi	r25, 0x10	; 16
 6ca:	b1 f7       	brne	.-20     	; 0x6b8 <i2c_start_wait+0x16>
 6cc:	88 83       	st	Y, r24
 6ce:	30 83       	st	Z, r19
 6d0:	90 81       	ld	r25, Z
 6d2:	99 23       	and	r25, r25
 6d4:	ec f7       	brge	.-6      	; 0x6d0 <i2c_start_wait+0x2e>
 6d6:	9c 91       	ld	r25, X
 6d8:	98 7f       	andi	r25, 0xF8	; 248
 6da:	90 32       	cpi	r25, 0x20	; 32
 6dc:	11 f0       	breq	.+4      	; 0x6e2 <i2c_start_wait+0x40>
 6de:	98 35       	cpi	r25, 0x58	; 88
 6e0:	29 f4       	brne	.+10     	; 0x6ec <i2c_start_wait+0x4a>
 6e2:	40 83       	st	Z, r20
 6e4:	90 81       	ld	r25, Z
 6e6:	94 fd       	sbrc	r25, 4
 6e8:	fd cf       	rjmp	.-6      	; 0x6e4 <i2c_start_wait+0x42>
 6ea:	e6 cf       	rjmp	.-52     	; 0x6b8 <i2c_start_wait+0x16>
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <i2c_rep_start>:
 6f2:	0e 94 2a 03 	call	0x654	; 0x654 <i2c_start>
 6f6:	08 95       	ret

000006f8 <i2c_stop>:
 6f8:	84 e9       	ldi	r24, 0x94	; 148
 6fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6fe:	ec eb       	ldi	r30, 0xBC	; 188
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	84 fd       	sbrc	r24, 4
 706:	fd cf       	rjmp	.-6      	; 0x702 <i2c_stop+0xa>
 708:	08 95       	ret

0000070a <i2c_write>:
 70a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 70e:	84 e8       	ldi	r24, 0x84	; 132
 710:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 714:	ec eb       	ldi	r30, 0xBC	; 188
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	88 23       	and	r24, r24
 71c:	ec f7       	brge	.-6      	; 0x718 <i2c_write+0xe>
 71e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 722:	98 7f       	andi	r25, 0xF8	; 248
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	98 32       	cpi	r25, 0x28	; 40
 728:	09 f4       	brne	.+2      	; 0x72c <i2c_write+0x22>
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	08 95       	ret

0000072e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 72e:	84 e8       	ldi	r24, 0x84	; 132
 730:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 734:	ec eb       	ldi	r30, 0xBC	; 188
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	88 23       	and	r24, r24
 73c:	ec f7       	brge	.-6      	; 0x738 <i2c_readNak+0xa>
	
    return TWDR;
 73e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 742:	08 95       	ret

00000744 <_exit>:
 744:	f8 94       	cli

00000746 <__stop_program>:
 746:	ff cf       	rjmp	.-2      	; 0x746 <__stop_program>

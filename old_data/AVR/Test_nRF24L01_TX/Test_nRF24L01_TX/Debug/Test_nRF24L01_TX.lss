
Test_nRF24L01_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000043a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a19  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be5  00000000  00000000  00001ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000813  00000000  00000000  00002bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000033ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d3  00000000  00000000  0000358c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e98  00000000  00000000  00003c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004af7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e3       	ldi	r30, 0x3A	; 58
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	aa e0       	ldi	r26, 0x0A	; 10
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 30       	cpi	r26, 0x0A	; 10
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 03 02 	call	0x406	; 0x406 <main>
  e2:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <ADC_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
  f4:	ac e7       	ldi	r26, 0x7C	; 124
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	8c 91       	ld	r24, X
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	8c 93       	st	X, r24
  fe:	8c 91       	ld	r24, X
 100:	80 62       	ori	r24, 0x20	; 32
 102:	8c 93       	st	X, r24
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <SPI_Init>:
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	86 62       	ori	r24, 0x26	; 38
 110:	84 b9       	out	0x04, r24	; 4
 112:	23 98       	cbi	0x04, 3	; 4
 114:	8c b5       	in	r24, 0x2c	; 44
 116:	81 65       	ori	r24, 0x51	; 81
 118:	8c bd       	out	0x2c, r24	; 44
 11a:	8c b5       	in	r24, 0x2c	; 44
 11c:	8c 7f       	andi	r24, 0xFC	; 252
 11e:	8c bd       	out	0x2c, r24	; 44
 120:	2d 9a       	sbi	0x05, 5	; 5
 122:	08 95       	ret

00000124 <nRF24L01_Init>:
 124:	24 9a       	sbi	0x04, 4	; 4
 126:	2c 98       	cbi	0x05, 4	; 5
 128:	85 e3       	ldi	r24, 0x35	; 53
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <nRF24L01_Init+0x6>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <SPI_Write_Byte>:
 132:	8e bd       	out	0x2e, r24	; 46
 134:	0d b4       	in	r0, 0x2d	; 45
 136:	07 fe       	sbrs	r0, 7
 138:	fd cf       	rjmp	.-6      	; 0x134 <SPI_Write_Byte+0x2>
 13a:	8e b5       	in	r24, 0x2e	; 46
 13c:	08 95       	ret

0000013e <nRF24L01_Write_Reg>:
 13e:	cf 93       	push	r28
 140:	c6 2f       	mov	r28, r22
 142:	95 e3       	ldi	r25, 0x35	; 53
 144:	9a 95       	dec	r25
 146:	f1 f7       	brne	.-4      	; 0x144 <nRF24L01_Write_Reg+0x6>
 148:	00 00       	nop
 14a:	2d 98       	cbi	0x05, 5	; 5
 14c:	95 e3       	ldi	r25, 0x35	; 53
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <nRF24L01_Write_Reg+0x10>
 152:	00 00       	nop
 154:	8f 71       	andi	r24, 0x1F	; 31
 156:	80 62       	ori	r24, 0x20	; 32
 158:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 15c:	85 e3       	ldi	r24, 0x35	; 53
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <nRF24L01_Write_Reg+0x20>
 162:	00 00       	nop
 164:	8c 2f       	mov	r24, r28
 166:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 16a:	95 e3       	ldi	r25, 0x35	; 53
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <nRF24L01_Write_Reg+0x2e>
 170:	00 00       	nop
 172:	2d 9a       	sbi	0x05, 5	; 5
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <nRF24L01_Write_Regs>:
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	7b 01       	movw	r14, r22
 184:	04 2f       	mov	r16, r20
 186:	95 e3       	ldi	r25, 0x35	; 53
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <nRF24L01_Write_Regs+0x10>
 18c:	00 00       	nop
 18e:	2d 98       	cbi	0x05, 5	; 5
 190:	95 e3       	ldi	r25, 0x35	; 53
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <nRF24L01_Write_Regs+0x1a>
 196:	00 00       	nop
 198:	8f 71       	andi	r24, 0x1F	; 31
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	10 16       	cp	r1, r16
 1a4:	11 06       	cpc	r1, r17
 1a6:	ac f4       	brge	.+42     	; 0x1d2 <nRF24L01_Write_Regs+0x5a>
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	85 e3       	ldi	r24, 0x35	; 53
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <nRF24L01_Write_Regs+0x34>
 1b0:	00 00       	nop
 1b2:	f7 01       	movw	r30, r14
 1b4:	ec 0f       	add	r30, r28
 1b6:	f1 1d       	adc	r31, r1
 1b8:	c7 fd       	sbrc	r28, 7
 1ba:	fa 95       	dec	r31
 1bc:	80 81       	ld	r24, Z
 1be:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 1c2:	cf 5f       	subi	r28, 0xFF	; 255
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0c 2e       	mov	r0, r28
 1c8:	00 0c       	add	r0, r0
 1ca:	99 0b       	sbc	r25, r25
 1cc:	80 17       	cp	r24, r16
 1ce:	91 07       	cpc	r25, r17
 1d0:	64 f3       	brlt	.-40     	; 0x1aa <nRF24L01_Write_Regs+0x32>
 1d2:	95 e3       	ldi	r25, 0x35	; 53
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <nRF24L01_Write_Regs+0x5c>
 1d8:	00 00       	nop
 1da:	2d 9a       	sbi	0x05, 5	; 5
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <nRF24L01_Read_Reg>:
 1e8:	95 e3       	ldi	r25, 0x35	; 53
 1ea:	9a 95       	dec	r25
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <nRF24L01_Read_Reg+0x2>
 1ee:	00 00       	nop
 1f0:	2d 98       	cbi	0x05, 5	; 5
 1f2:	95 e3       	ldi	r25, 0x35	; 53
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <nRF24L01_Read_Reg+0xc>
 1f8:	00 00       	nop
 1fa:	8f 71       	andi	r24, 0x1F	; 31
 1fc:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 200:	85 e3       	ldi	r24, 0x35	; 53
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <nRF24L01_Read_Reg+0x1a>
 206:	00 00       	nop
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 20e:	95 e3       	ldi	r25, 0x35	; 53
 210:	9a 95       	dec	r25
 212:	f1 f7       	brne	.-4      	; 0x210 <nRF24L01_Read_Reg+0x28>
 214:	00 00       	nop
 216:	2d 9a       	sbi	0x05, 5	; 5
 218:	08 95       	ret

0000021a <nRF24L01_DR_Setup>:
 21a:	cf 93       	push	r28
 21c:	c8 2f       	mov	r28, r24
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <nRF24L01_Read_Reg>
 224:	c1 30       	cpi	r28, 0x01	; 1
 226:	39 f0       	breq	.+14     	; 0x236 <nRF24L01_DR_Setup+0x1c>
 228:	18 f0       	brcs	.+6      	; 0x230 <nRF24L01_DR_Setup+0x16>
 22a:	c2 30       	cpi	r28, 0x02	; 2
 22c:	31 f0       	breq	.+12     	; 0x23a <nRF24L01_DR_Setup+0x20>
 22e:	07 c0       	rjmp	.+14     	; 0x23e <nRF24L01_DR_Setup+0x24>
 230:	87 7f       	andi	r24, 0xF7	; 247
 232:	80 62       	ori	r24, 0x20	; 32
 234:	04 c0       	rjmp	.+8      	; 0x23e <nRF24L01_DR_Setup+0x24>
 236:	87 7d       	andi	r24, 0xD7	; 215
 238:	02 c0       	rjmp	.+4      	; 0x23e <nRF24L01_DR_Setup+0x24>
 23a:	8f 7d       	andi	r24, 0xDF	; 223
 23c:	88 60       	ori	r24, 0x08	; 8
 23e:	68 2f       	mov	r22, r24
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <nRF24L01_OP_Power>:
 24a:	cf 93       	push	r28
 24c:	c8 2f       	mov	r28, r24
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <nRF24L01_Read_Reg>
 254:	c1 30       	cpi	r28, 0x01	; 1
 256:	41 f0       	breq	.+16     	; 0x268 <nRF24L01_OP_Power+0x1e>
 258:	28 f0       	brcs	.+10     	; 0x264 <nRF24L01_OP_Power+0x1a>
 25a:	c2 30       	cpi	r28, 0x02	; 2
 25c:	41 f0       	breq	.+16     	; 0x26e <nRF24L01_OP_Power+0x24>
 25e:	c3 30       	cpi	r28, 0x03	; 3
 260:	49 f0       	breq	.+18     	; 0x274 <nRF24L01_OP_Power+0x2a>
 262:	09 c0       	rjmp	.+18     	; 0x276 <nRF24L01_OP_Power+0x2c>
 264:	89 7f       	andi	r24, 0xF9	; 249
 266:	07 c0       	rjmp	.+14     	; 0x276 <nRF24L01_OP_Power+0x2c>
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	04 c0       	rjmp	.+8      	; 0x276 <nRF24L01_OP_Power+0x2c>
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	84 60       	ori	r24, 0x04	; 4
 272:	01 c0       	rjmp	.+2      	; 0x276 <nRF24L01_OP_Power+0x2c>
 274:	86 60       	ori	r24, 0x06	; 6
 276:	68 2f       	mov	r22, r24
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <nRF24L01_Flush_TX>:
 282:	85 e3       	ldi	r24, 0x35	; 53
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <nRF24L01_Flush_TX+0x2>
 288:	00 00       	nop
 28a:	2d 98       	cbi	0x05, 5	; 5
 28c:	85 e3       	ldi	r24, 0x35	; 53
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <nRF24L01_Flush_TX+0xc>
 292:	00 00       	nop
 294:	81 ee       	ldi	r24, 0xE1	; 225
 296:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 29a:	85 e3       	ldi	r24, 0x35	; 53
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <nRF24L01_Flush_TX+0x1a>
 2a0:	00 00       	nop
 2a2:	2d 9a       	sbi	0x05, 5	; 5
 2a4:	85 e3       	ldi	r24, 0x35	; 53
 2a6:	8a 95       	dec	r24
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <nRF24L01_Flush_TX+0x24>
 2aa:	00 00       	nop
 2ac:	08 95       	ret

000002ae <nRF24L01_Payload_TX>:
 2ae:	cf 93       	push	r28
 2b0:	c8 2f       	mov	r28, r24
 2b2:	0e 94 41 01 	call	0x282	; 0x282 <nRF24L01_Flush_TX>
 2b6:	2d 98       	cbi	0x05, 5	; 5
 2b8:	85 e3       	ldi	r24, 0x35	; 53
 2ba:	8a 95       	dec	r24
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <nRF24L01_Payload_TX+0xc>
 2be:	00 00       	nop
 2c0:	80 ea       	ldi	r24, 0xA0	; 160
 2c2:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 2c6:	85 e3       	ldi	r24, 0x35	; 53
 2c8:	8a 95       	dec	r24
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <nRF24L01_Payload_TX+0x1a>
 2cc:	00 00       	nop
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <nRF24L01_Payload_TX+0x28>
 2da:	00 00       	nop
 2dc:	2d 9a       	sbi	0x05, 5	; 5
 2de:	85 e3       	ldi	r24, 0x35	; 53
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <nRF24L01_Payload_TX+0x32>
 2e4:	00 00       	nop
 2e6:	2c 9a       	sbi	0x05, 4	; 5
 2e8:	85 e3       	ldi	r24, 0x35	; 53
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <nRF24L01_Payload_TX+0x3c>
 2ee:	00 00       	nop
 2f0:	2c 98       	cbi	0x05, 4	; 5
 2f2:	85 e3       	ldi	r24, 0x35	; 53
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <nRF24L01_Payload_TX+0x46>
 2f8:	00 00       	nop
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <nRF24L01_IRQ_Reset>:
 2fe:	85 e3       	ldi	r24, 0x35	; 53
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <nRF24L01_IRQ_Reset+0x2>
 304:	00 00       	nop

void nRF24L01_IRQ_Reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
	nRF24L01_Write_Reg(NRF24L01_REG_STATUS, 0x70);
 306:	60 e7       	ldi	r22, 0x70	; 112
 308:	87 e0       	ldi	r24, 0x07	; 7
 30a:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
 30e:	85 e3       	ldi	r24, 0x35	; 53
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <nRF24L01_IRQ_Reset+0x12>
 314:	00 00       	nop
 316:	08 95       	ret

00000318 <nRF24L01_Mode>:
}

//Selects the operation mode of the nRF module
void nRF24L01_Mode(uint8_t nRF_mode)
{
	switch(nRF_mode)
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	51 f0       	breq	.+20     	; 0x330 <nRF24L01_Mode+0x18>
 31c:	18 f0       	brcs	.+6      	; 0x324 <nRF24L01_Mode+0xc>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	81 f0       	breq	.+32     	; 0x342 <nRF24L01_Mode+0x2a>
 322:	08 95       	ret
	{
		//Power down mode
		case NRF24L01_POWER_DOWN:
			CE_LOW();
 324:	2c 98       	cbi	0x05, 4	; 5
			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG);
 326:	6c e1       	ldi	r22, 0x1C	; 28
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
			break;
 32e:	08 95       	ret
		
		//TX mode
		case NRF24L01_TX_MODE:
			nRF24L01_Write_Reg(NRF24L01_REG_STATUS, (_BV(NRF24L01_REG_RX_DR))   | 
 330:	60 e7       	ldi	r22, 0x70	; 112
 332:	87 e0       	ldi	r24, 0x07	; 7
 334:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_TX_DS))   |
								(_BV(NRF24L01_REG_MAX_RT)));
								
			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_TX_CONFIG);
 338:	6e e1       	ldi	r22, 0x1E	; 30
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
			break;
 340:	08 95       	ret
		
		//RX mode
		case NRF24L01_RX_MODE:
			CSN_LOW();
 342:	2d 98       	cbi	0x05, 5	; 5
			SPI_Write_Byte(NRF24L01_CMD_FLUSH_RX);
 344:	82 ee       	ldi	r24, 0xE2	; 226
 346:	0e 94 99 00 	call	0x132	; 0x132 <SPI_Write_Byte>
			CSN_HIGH();
 34a:	2d 9a       	sbi	0x05, 5	; 5

			nRF24L01_Write_Reg(NRF24L01_REG_STATUS, (_BV(NRF24L01_REG_RX_DR))   |
 34c:	60 e7       	ldi	r22, 0x70	; 112
 34e:	87 e0       	ldi	r24, 0x07	; 7
 350:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
								(_BV(NRF24L01_REG_TX_DS))   |
								(_BV(NRF24L01_REG_MAX_RT)));

			nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_RX_CONFIG);
 354:	6f e1       	ldi	r22, 0x1F	; 31
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
 35c:	08 95       	ret

0000035e <nRF24L01_Config>:
	/************************************************************************/
	/*                             RF Setup                                 */
	/************************************************************************/
	
	//Set the RF channel to 105 i.e. @2.505 GHz
	nRF24L01_Write_Reg(NRF24L01_REG_RF_CH, NRF24L01_CHANNEL);
 35e:	69 e6       	ldi	r22, 0x69	; 105
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
	
	//Set the data rate to 2 MBPS
	nRF24L01_DR_Setup(NRF24L01_DR_2_MBPS);
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 0d 01 	call	0x21a	; 0x21a <nRF24L01_DR_Setup>
	
	//Set the output power to 0dBM
	nRF24L01_OP_Power(NRF24L01_OP_POWER_POS_0dBM);
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 25 01 	call	0x24a	; 0x24a <nRF24L01_OP_Power>
	/************************************************************************/
	/*                         Data-pipe config                             */
	/************************************************************************/
	
	//Enable data-pipe 0
	nRF24L01_Write_Reg(NRF24L01_REG_EN_RXADDR, NRF24L01_ERX_PN);	
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
	/************************************************************************/
	/*                          Payload config                              */
	/************************************************************************/
	
	//Enable data-pipe 0 with a payload length of 1 byte
	nRF24L01_Write_Reg(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD_LEN);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	81 e1       	ldi	r24, 0x11	; 17
 37e:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
	
	//Disable dynamic payload
	nRF24L01_Write_Reg(NRF24L01_REG_DYNPD, 0x00);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	8c e1       	ldi	r24, 0x1C	; 28
 386:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
	/************************************************************************/
	/*                          Address config                              */
	/************************************************************************/
	
	//Address width set to 5 bytes
	nRF24L01_Write_Reg(NRF24L01_REG_SETUP_AW, NRF24L01_ADDRESS_WIDTH);
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
	
	//Set the 5-byte receiver address from RX_address array
	nRF24L01_Write_Regs(NRF24L01_REG_RX_ADDR_P0, RX_address, 5);
 392:	45 e0       	ldi	r20, 0x05	; 5
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	71 e0       	ldi	r23, 0x01	; 1
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	0e 94 bc 00 	call	0x178	; 0x178 <nRF24L01_Write_Regs>
	
	//Set the 5-byte transmitter address from TX_address array
	nRF24L01_Write_Regs(NRF24L01_REG_TX_ADDR, TX_address, 5);
 39e:	45 e0       	ldi	r20, 0x05	; 5
 3a0:	65 e0       	ldi	r22, 0x05	; 5
 3a2:	71 e0       	ldi	r23, 0x01	; 1
 3a4:	80 e1       	ldi	r24, 0x10	; 16
 3a6:	0e 94 bc 00 	call	0x178	; 0x178 <nRF24L01_Write_Regs>
	/************************************************************************/
	/*			   Data verification                            */
	/************************************************************************/
	
	//Enable auto-acknowledgment for the data-pipe in use(data-pipe 0)
	nRF24L01_Write_Reg(NRF24L01_REG_EN_AA, _BV(NRF24L01_REG_ENAA_P0));
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
	
	//Disable auto-retry
	nRF24L01_Write_Reg(NRF24L01_REG_SETUP_RETR, NRF24L01_RETRY_COUNT);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	84 e0       	ldi	r24, 0x04	; 4
 3b6:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
	
	//Enable CRC and set the length to 2 bytes
	nRF24L01_Write_Reg(NRF24L01_REG_CONFIG, NRF24L01_DEFAULT_CONFIG);
 3ba:	6c e1       	ldi	r22, 0x1C	; 28
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 9f 00 	call	0x13e	; 0x13e <nRF24L01_Write_Reg>
	/************************************************************************/
	/*			   Transceiver mode                             */
	/************************************************************************/
	
	//Set the nRF in transmitter mode
	nRF24L01_Mode(NRF24L01_TX_MODE);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 8c 01 	call	0x318	; 0x318 <nRF24L01_Mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	2f ef       	ldi	r18, 0xFF	; 255
 3ca:	81 ee       	ldi	r24, 0xE1	; 225
 3cc:	94 e0       	ldi	r25, 0x04	; 4
 3ce:	21 50       	subi	r18, 0x01	; 1
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	90 40       	sbci	r25, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <nRF24L01_Config+0x70>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <nRF24L01_Config+0x7a>
 3d8:	00 00       	nop
 3da:	08 95       	ret

000003dc <ADC_Pot>:
*************************************************************************************/
unsigned char ADC_Pot(void)
{
	//Reset ADC Multiplexer
	//Select ADC_1
	ADMUX &= 0b111000001;
 3dc:	ec e7       	ldi	r30, 0x7C	; 124
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	81 7c       	andi	r24, 0xC1	; 193
 3e4:	80 83       	st	Z, r24

	ADCSRA |= _BV(ADSC);			//Start ADC conversion
 3e6:	ea e7       	ldi	r30, 0x7A	; 122
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	80 83       	st	Z, r24
	loop_until_bit_is_set(ADCSRA, ADIF);	//Wait until conversion is complete
 3f0:	80 81       	ld	r24, Z
 3f2:	84 ff       	sbrs	r24, 4
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <ADC_Pot+0x14>
	ADCSRA |= _BV(ADIF);			//Set ADC interrupt flag again
 3f6:	ea e7       	ldi	r30, 0x7A	; 122
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	80 61       	ori	r24, 0x10	; 16
 3fe:	80 83       	st	Z, r24
	return(ADCH);				//Return the 8-bit converted value
 400:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 404:	08 95       	ret

00000406 <main>:
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	89 e6       	ldi	r24, 0x69	; 105
 40a:	98 e1       	ldi	r25, 0x18	; 24
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <main+0x6>
 414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x10>
 416:	00 00       	nop
//Main function
int main(void)
{
	//Initialize the AVR and peripherals
	AVR_Init();
	SPI_Init();
 418:	0e 94 86 00 	call	0x10c	; 0x10c <SPI_Init>
	ADC_Init();
 41c:	0e 94 75 00 	call	0xea	; 0xea <ADC_Init>
	
	//Initialize and configure the nRF module
	nRF24L01_Init();
 420:	0e 94 92 00 	call	0x124	; 0x124 <nRF24L01_Init>
	nRF24L01_Config();
 424:	0e 94 af 01 	call	0x35e	; 0x35e <nRF24L01_Config>
	
	//Loop forever
	while(1) 
	{
		//Fetch ADC data
		ADC_data = ADC_Pot();
 428:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ADC_Pot>
		
	        //Transmit the payload data
	        nRF24L01_Payload_TX(ADC_data);        
 42c:	0e 94 57 01 	call	0x2ae	; 0x2ae <nRF24L01_Payload_TX>
		nRF24L01_IRQ_Reset();
 430:	0e 94 7f 01 	call	0x2fe	; 0x2fe <nRF24L01_IRQ_Reset>
 434:	f9 cf       	rjmp	.-14     	; 0x428 <main+0x22>

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
